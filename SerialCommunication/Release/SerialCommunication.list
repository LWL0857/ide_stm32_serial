
SerialCommunication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001860  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001a58  08001a58  00011a58  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a70  08001a70  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08001a70  08001a70  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a70  08001a70  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a70  08001a70  00011a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a74  08001a74  00011a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000010  08001a88  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08001a88  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b12  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031ce  00000000  00000000  00033b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00008873  00000000  00000000  00036d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000b28  00000000  00000000  0003f591  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001490  00000000  00000000  000400b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008641  00000000  00000000  00041549  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00004ed5  00000000  00000000  00049b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0004ea5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ed0  00000000  00000000  0004eadc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	08001a40 	.word	0x08001a40

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	08001a40 	.word	0x08001a40

08000238 <NVIC_EncodePriority.constprop.2>:
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000238:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800023c:	f1c0 0207 	rsb	r2, r0, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	1d03      	adds	r3, r0, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000242:	2a04      	cmp	r2, #4
 8000244:	bf28      	it	cs
 8000246:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000248:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024a:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024e:	bf8c      	ite	hi
 8000250:	3803      	subhi	r0, #3
 8000252:	2000      	movls	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000254:	4093      	lsls	r3, r2
 8000256:	43db      	mvns	r3, r3
 8000258:	f003 0305 	and.w	r3, r3, #5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800025c:	fa03 f000 	lsl.w	r0, r3, r0
 8000260:	4770      	bx	lr
	...

08000264 <MX_DMA_Init>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000264:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <MX_DMA_Init+0x4c>)
 8000266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000268:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800026c:	b513      	push	{r0, r1, r4, lr}
 800026e:	631a      	str	r2, [r3, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000272:	4c10      	ldr	r4, [pc, #64]	; (80002b4 <MX_DMA_Init+0x50>)
 8000274:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000278:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800027a:	9b01      	ldr	r3, [sp, #4]
 800027c:	68e0      	ldr	r0, [r4, #12]
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800027e:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000282:	f7ff ffd9 	bl	8000238 <NVIC_EncodePriority.constprop.2>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000286:	490c      	ldr	r1, [pc, #48]	; (80002b8 <MX_DMA_Init+0x54>)
 8000288:	0100      	lsls	r0, r0, #4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800028a:	2310      	movs	r3, #16
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	b2c0      	uxtb	r0, r0
 800028e:	f881 0344 	strb.w	r0, [r1, #836]	; 0x344
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	608b      	str	r3, [r1, #8]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000294:	68e0      	ldr	r0, [r4, #12]
  NVIC_EnableIRQ(DMA2_Stream5_IRQn);
  /* DMA2_Stream7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000296:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800029a:	f7ff ffcd 	bl	8000238 <NVIC_EncodePriority.constprop.2>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800029e:	2340      	movs	r3, #64	; 0x40
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a0:	0100      	lsls	r0, r0, #4
 80002a2:	b2c0      	uxtb	r0, r0
 80002a4:	f881 0346 	strb.w	r0, [r1, #838]	; 0x346
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002a8:	608b      	str	r3, [r1, #8]
  NVIC_EnableIRQ(DMA2_Stream7_IRQn);

}
 80002aa:	b002      	add	sp, #8
 80002ac:	bd10      	pop	{r4, pc}
 80002ae:	bf00      	nop
 80002b0:	40023800 	.word	0x40023800
 80002b4:	e000ed00 	.word	0xe000ed00
 80002b8:	e000e100 	.word	0xe000e100

080002bc <LL_AHB1_GRP1_EnableClock>:
  SET_BIT(RCC->AHB1ENR, Periphs);
 80002bc:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <LL_AHB1_GRP1_EnableClock+0x18>)
{
 80002be:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB1ENR, Periphs);
 80002c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80002c2:	4302      	orrs	r2, r0
 80002c4:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80002c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c8:	4018      	ands	r0, r3
 80002ca:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 80002cc:	9b01      	ldr	r3, [sp, #4]
}
 80002ce:	b002      	add	sp, #8
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40023800 	.word	0x40023800

080002d8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80002d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002dc:	b087      	sub	sp, #28

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	2218      	movs	r2, #24
 80002e0:	2100      	movs	r1, #0

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80002e2:	4ee4      	ldr	r6, [pc, #912]	; (8000674 <MX_GPIO_Init+0x39c>)
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e4:	4668      	mov	r0, sp
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80002e6:	2503      	movs	r5, #3
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e8:	f001 fba2 	bl	8001a30 <memset>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 80002ec:	2010      	movs	r0, #16
 80002ee:	f7ff ffe5 	bl	80002bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80002f2:	2004      	movs	r0, #4
 80002f4:	f7ff ffe2 	bl	80002bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80002f8:	2080      	movs	r0, #128	; 0x80
 80002fa:	f7ff ffdf 	bl	80002bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80002fe:	2001      	movs	r0, #1
 8000300:	f7ff ffdc 	bl	80002bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000304:	2002      	movs	r0, #2
 8000306:	f7ff ffd9 	bl	80002bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800030a:	2008      	movs	r0, #8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800030c:	2400      	movs	r4, #0
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800030e:	f7ff ffd5 	bl	80002bc <LL_AHB1_GRP1_EnableClock>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000312:	2304      	movs	r3, #4
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000314:	4669      	mov	r1, sp
 8000316:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000318:	9404      	str	r4, [sp, #16]

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800031a:	f8df 8360 	ldr.w	r8, [pc, #864]	; 800067c <MX_GPIO_Init+0x3a4>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 800031e:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000322:	f8df a35c 	ldr.w	sl, [pc, #860]	; 8000680 <MX_GPIO_Init+0x3a8>
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000326:	f8df 935c 	ldr.w	r9, [pc, #860]	; 8000684 <MX_GPIO_Init+0x3ac>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800032a:	4fd3      	ldr	r7, [pc, #844]	; (8000678 <MX_GPIO_Init+0x3a0>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800032c:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000330:	f001 f8e1 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000334:	2308      	movs	r3, #8
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000336:	4669      	mov	r1, sp
 8000338:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800033a:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800033c:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000340:	f001 f8d9 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000344:	2310      	movs	r3, #16
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000346:	4669      	mov	r1, sp
 8000348:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800034a:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800034c:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000350:	f001 f8d1 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000354:	2320      	movs	r3, #32
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000356:	4669      	mov	r1, sp
 8000358:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800035a:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800035c:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000360:	f001 f8c9 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000364:	2340      	movs	r3, #64	; 0x40
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000366:	4669      	mov	r1, sp
 8000368:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800036a:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800036c:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000370:	f001 f8c1 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8000374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000378:	4669      	mov	r1, sp
 800037a:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800037c:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800037e:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000382:	f001 f8b8 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8000386:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800038a:	4669      	mov	r1, sp
 800038c:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800038e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000390:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000394:	f001 f8af 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000398:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800039c:	4669      	mov	r1, sp
 800039e:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80003a0:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80003a2:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003a6:	f001 f8a6 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80003aa:	2301      	movs	r3, #1
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003ac:	4669      	mov	r1, sp
 80003ae:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80003b0:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80003b2:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003b6:	f001 f89e 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80003ba:	2302      	movs	r3, #2
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003bc:	4669      	mov	r1, sp
 80003be:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80003c0:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80003c2:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003c6:	f001 f896 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80003ca:	2304      	movs	r3, #4
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003cc:	4669      	mov	r1, sp
 80003ce:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80003d0:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80003d2:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003d6:	f001 f88e 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80003da:	2308      	movs	r3, #8
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003dc:	4669      	mov	r1, sp
 80003de:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80003e0:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80003e2:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003e6:	f001 f886 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80003ea:	2301      	movs	r3, #1
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ec:	4669      	mov	r1, sp
 80003ee:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80003f0:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80003f2:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f6:	f001 f87e 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80003fa:	2302      	movs	r3, #2
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003fc:	4669      	mov	r1, sp
 80003fe:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000400:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000402:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000406:	f001 f876 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800040a:	2304      	movs	r3, #4
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040c:	4669      	mov	r1, sp
 800040e:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000410:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000412:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000416:	f001 f86e 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800041a:	2308      	movs	r3, #8
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800041c:	4669      	mov	r1, sp
 800041e:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000420:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000422:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000426:	f001 f866 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 800042a:	2310      	movs	r3, #16
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800042c:	4669      	mov	r1, sp
 800042e:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000430:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000432:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000436:	f001 f85e 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800043a:	2320      	movs	r3, #32
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043c:	4669      	mov	r1, sp
 800043e:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000440:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000442:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000446:	f001 f856 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800044a:	2340      	movs	r3, #64	; 0x40
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044c:	4669      	mov	r1, sp
 800044e:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000450:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000452:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000456:	f001 f84e 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800045a:	2380      	movs	r3, #128	; 0x80
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045c:	4669      	mov	r1, sp
 800045e:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000460:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000462:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000466:	f001 f846 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 800046a:	2310      	movs	r3, #16
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800046c:	4669      	mov	r1, sp
 800046e:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000470:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000472:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000476:	f001 f83e 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800047a:	2320      	movs	r3, #32
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800047c:	4669      	mov	r1, sp
 800047e:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000480:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000482:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000486:	f001 f836 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800048a:	2301      	movs	r3, #1
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800048c:	4669      	mov	r1, sp
 800048e:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000490:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000492:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000496:	f001 f82e 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800049a:	2302      	movs	r3, #2
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800049c:	4669      	mov	r1, sp
 800049e:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004a0:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80004a2:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a6:	f001 f826 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80004aa:	2304      	movs	r3, #4
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ac:	4669      	mov	r1, sp
 80004ae:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004b0:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80004b2:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b6:	f001 f81e 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80004ba:	2380      	movs	r3, #128	; 0x80
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004bc:	4669      	mov	r1, sp
 80004be:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004c0:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80004c2:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004c6:	f001 f816 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80004ca:	f44f 7380 	mov.w	r3, #256	; 0x100
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004ce:	4669      	mov	r1, sp
 80004d0:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004d2:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80004d4:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004d8:	f001 f80d 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80004dc:	f44f 7300 	mov.w	r3, #512	; 0x200
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004e0:	4669      	mov	r1, sp
 80004e2:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004e4:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80004e6:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004ea:	f001 f804 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80004ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004f2:	4669      	mov	r1, sp
 80004f4:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004f6:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80004f8:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004fc:	f000 fffb 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000500:	f44f 6300 	mov.w	r3, #2048	; 0x800
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000504:	4669      	mov	r1, sp
 8000506:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000508:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800050a:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800050e:	f000 fff2 	bl	80014f6 <LL_GPIO_Init>
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000512:	4669      	mov	r1, sp
 8000514:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000516:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000518:	e9cd b500 	strd	fp, r5, [sp]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800051c:	f000 ffeb 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8000520:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000524:	4669      	mov	r1, sp
 8000526:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000528:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800052a:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800052e:	f000 ffe2 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8000532:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000536:	4669      	mov	r1, sp
 8000538:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800053a:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800053c:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000540:	f000 ffd9 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000544:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000548:	4669      	mov	r1, sp
 800054a:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800054c:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800054e:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000552:	f000 ffd0 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000556:	f44f 6380 	mov.w	r3, #1024	; 0x400
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800055a:	4669      	mov	r1, sp
 800055c:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800055e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000560:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000564:	f000 ffc7 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000568:	f44f 6300 	mov.w	r3, #2048	; 0x800
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800056c:	4669      	mov	r1, sp
 800056e:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000570:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000572:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000576:	f000 ffbe 	bl	80014f6 <LL_GPIO_Init>
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057a:	4669      	mov	r1, sp
 800057c:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800057e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000580:	e9cd b500 	strd	fp, r5, [sp]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000584:	f000 ffb7 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8000588:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058c:	4669      	mov	r1, sp
 800058e:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000590:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000592:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000596:	f000 ffae 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 800059a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800059e:	4669      	mov	r1, sp
 80005a0:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005a2:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80005a4:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a8:	f000 ffa5 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80005ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b0:	4669      	mov	r1, sp
 80005b2:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005b4:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80005b6:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ba:	f000 ff9c 	bl	80014f6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80005be:	f44f 7380 	mov.w	r3, #256	; 0x100
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005c2:	4669      	mov	r1, sp
 80005c4:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005c6:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80005c8:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005cc:	f000 ff93 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80005d0:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005d4:	4669      	mov	r1, sp
 80005d6:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005d8:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80005da:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005de:	f000 ff8a 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80005e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005e6:	4669      	mov	r1, sp
 80005e8:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005ea:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80005ec:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005f0:	f000 ff81 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80005f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005f8:	4669      	mov	r1, sp
 80005fa:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005fc:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80005fe:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000602:	f000 ff78 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000606:	4669      	mov	r1, sp
 8000608:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800060a:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800060c:	e9cd b500 	strd	fp, r5, [sp]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000610:	f000 ff71 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8000614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000618:	4669      	mov	r1, sp
 800061a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800061c:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800061e:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000622:	f000 ff68 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8000626:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800062a:	4669      	mov	r1, sp
 800062c:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800062e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000630:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000634:	f000 ff5f 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000638:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800063c:	4669      	mov	r1, sp
 800063e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000640:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000642:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000646:	f000 ff56 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800064a:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064c:	4669      	mov	r1, sp
 800064e:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000650:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000652:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000656:	f000 ff4e 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800065a:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065c:	4669      	mov	r1, sp
 800065e:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000660:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000662:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000666:	f000 ff46 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800066a:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066e:	4669      	mov	r1, sp
 8000670:	4640      	mov	r0, r8
 8000672:	e009      	b.n	8000688 <MX_GPIO_Init+0x3b0>
 8000674:	40021000 	.word	0x40021000
 8000678:	40020c00 	.word	0x40020c00
 800067c:	40020800 	.word	0x40020800
 8000680:	40020000 	.word	0x40020000
 8000684:	40020400 	.word	0x40020400
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000688:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800068a:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068e:	f000 ff32 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000692:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000696:	4669      	mov	r1, sp
 8000698:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800069a:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800069c:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a0:	f000 ff29 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80006a4:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a8:	4669      	mov	r1, sp
 80006aa:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006ac:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80006ae:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b2:	f000 ff20 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80006b6:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	4669      	mov	r1, sp
 80006bc:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006be:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80006c0:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	f000 ff17 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80006c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006cc:	4669      	mov	r1, sp
 80006ce:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006d0:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80006d2:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d6:	f000 ff0e 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80006da:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	4669      	mov	r1, sp
 80006e0:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006e2:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80006e4:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e8:	f000 ff05 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ec:	4669      	mov	r1, sp
 80006ee:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006f0:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80006f2:	e9cd b500 	strd	fp, r5, [sp]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	f000 fefe 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80006fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	4669      	mov	r1, sp
 8000700:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000702:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000704:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	f000 fef5 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800070c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000710:	4669      	mov	r1, sp
 8000712:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000714:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000716:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071a:	f000 feec 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 800071e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000722:	4669      	mov	r1, sp
 8000724:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000726:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000728:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800072c:	f000 fee3 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000730:	4669      	mov	r1, sp
 8000732:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000734:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000736:	e9cd b500 	strd	fp, r5, [sp]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800073a:	f000 fedc 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800073e:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000740:	4669      	mov	r1, sp
 8000742:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000744:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000746:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800074a:	f000 fed4 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800074e:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000750:	4669      	mov	r1, sp
 8000752:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000754:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000756:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800075a:	f000 fecc 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800075e:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000760:	4669      	mov	r1, sp
 8000762:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000764:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000766:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800076a:	f000 fec4 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800076e:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000770:	4669      	mov	r1, sp
 8000772:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000774:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000776:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800077a:	f000 febc 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 800077e:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000780:	4669      	mov	r1, sp
 8000782:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000784:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000786:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800078a:	f000 feb4 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800078e:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000790:	4669      	mov	r1, sp
 8000792:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000794:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000796:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800079a:	f000 feac 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800079e:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007a0:	4669      	mov	r1, sp
 80007a2:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007a4:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80007a6:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007aa:	f000 fea4 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80007ae:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007b0:	4669      	mov	r1, sp
 80007b2:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007b4:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80007b6:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ba:	f000 fe9c 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80007be:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c0:	4669      	mov	r1, sp
 80007c2:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007c4:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80007c6:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ca:	f000 fe94 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80007ce:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d0:	4669      	mov	r1, sp
 80007d2:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007d4:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80007d6:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007da:	f000 fe8c 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80007de:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e0:	4669      	mov	r1, sp
 80007e2:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007e4:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80007e6:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ea:	f000 fe84 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80007ee:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f2:	4669      	mov	r1, sp
 80007f4:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007f6:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80007f8:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fc:	f000 fe7b 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000800:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000804:	4669      	mov	r1, sp
 8000806:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000808:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800080a:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080e:	f000 fe72 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000812:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000814:	4669      	mov	r1, sp
 8000816:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000818:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800081a:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800081e:	f000 fe6a 	bl	80014f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000822:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000824:	4669      	mov	r1, sp
 8000826:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000828:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800082a:	e9cd 3500 	strd	r3, r5, [sp]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800082e:	f000 fe62 	bl	80014f6 <LL_GPIO_Init>

}
 8000832:	b007      	add	sp, #28
 8000834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000838 <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000838:	4b2a      	ldr	r3, [pc, #168]	; (80008e4 <SystemClock_Config+0xac>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	f022 020f 	bic.w	r2, r2, #15
 8000840:	f042 0207 	orr.w	r2, r2, #7
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000844:	b510      	push	{r4, lr}
 8000846:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	f002 020f 	and.w	r2, r2, #15
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_7);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_7)
 800084e:	2a07      	cmp	r2, #7
 8000850:	d1fa      	bne.n	8000848 <SystemClock_Config+0x10>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000852:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <SystemClock_Config+0xb0>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800085a:	601a      	str	r2, [r3, #0]
  SET_BIT(PWR->CR1, PWR_CR1_ODEN);
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000862:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000864:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800086e:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000870:	681a      	ldr	r2, [r3, #0]
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
  LL_PWR_EnableOverDriveMode();
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000872:	0391      	lsls	r1, r2, #14
 8000874:	d5fc      	bpl.n	8000870 <SystemClock_Config+0x38>
  *         @arg @ref LL_RCC_PLLP_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP,
 8000876:	685a      	ldr	r2, [r3, #4]
 8000878:	491c      	ldr	r1, [pc, #112]	; (80008ec <SystemClock_Config+0xb4>)
 800087a:	4011      	ands	r1, r2
 800087c:	4a1c      	ldr	r2, [pc, #112]	; (80008f0 <SystemClock_Config+0xb8>)
 800087e:	430a      	orrs	r2, r1
 8000880:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000888:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <SystemClock_Config+0xbc>)
 800088c:	681a      	ldr	r2, [r3, #0]
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_25, 432, LL_RCC_PLLP_DIV_2);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800088e:	0192      	lsls	r2, r2, #6
 8000890:	d5fc      	bpl.n	800088c <SystemClock_Config+0x54>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000892:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000894:	4c17      	ldr	r4, [pc, #92]	; (80008f4 <SystemClock_Config+0xbc>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000896:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800089a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800089c:	689a      	ldr	r2, [r3, #8]
 800089e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80008a2:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80008a6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80008a8:	689a      	ldr	r2, [r3, #8]
 80008aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80008ae:	f442 4220 	orr.w	r2, r2, #40960	; 0xa000
 80008b2:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80008b4:	689a      	ldr	r2, [r3, #8]
 80008b6:	f022 0203 	bic.w	r2, r2, #3
 80008ba:	f042 0202 	orr.w	r2, r2, #2
 80008be:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80008c0:	68a3      	ldr	r3, [r4, #8]
 80008c2:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_4);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80008c6:	2b08      	cmp	r3, #8
 80008c8:	d1fa      	bne.n	80008c0 <SystemClock_Config+0x88>
  {

  }
  LL_SetSystemCoreClock(216000000);
 80008ca:	480b      	ldr	r0, [pc, #44]	; (80008f8 <SystemClock_Config+0xc0>)
 80008cc:	f001 f886 	bl	80019dc <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80008d0:	2000      	movs	r0, #0
 80008d2:	f000 f981 	bl	8000bd8 <HAL_InitTick>
  MODIFY_REG(RCC->DCKCFGR2, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80008d6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80008da:	f023 0303 	bic.w	r3, r3, #3
 80008de:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  {
    Error_Handler();
  }
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
}
 80008e2:	bd10      	pop	{r4, pc}
 80008e4:	40023c00 	.word	0x40023c00
 80008e8:	40007000 	.word	0x40007000
 80008ec:	ffbc8000 	.word	0xffbc8000
 80008f0:	00406c19 	.word	0x00406c19
 80008f4:	40023800 	.word	0x40023800
 80008f8:	0cdfe600 	.word	0x0cdfe600

080008fc <main>:
		usartSendData(testSend1,testSend2,testSend3,testSend4);
 80008fc:	4e0d      	ldr	r6, [pc, #52]	; (8000934 <main+0x38>)
 80008fe:	4d0e      	ldr	r5, [pc, #56]	; (8000938 <main+0x3c>)
 8000900:	4c0e      	ldr	r4, [pc, #56]	; (800093c <main+0x40>)
{
 8000902:	b508      	push	{r3, lr}
  HAL_Init();
 8000904:	f000 fad9 	bl	8000eba <HAL_Init>
  SystemClock_Config();
 8000908:	f7ff ff96 	bl	8000838 <SystemClock_Config>
  MX_GPIO_Init();
 800090c:	f7ff fce4 	bl	80002d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000910:	f7ff fca8 	bl	8000264 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000914:	f000 f9c2 	bl	8000c9c <MX_USART1_UART_Init>
		usartSendData(testSend1,testSend2,testSend3,testSend4);
 8000918:	4809      	ldr	r0, [pc, #36]	; (8000940 <main+0x44>)
 800091a:	7833      	ldrb	r3, [r6, #0]
 800091c:	f9b5 2000 	ldrsh.w	r2, [r5]
 8000920:	f9b4 1000 	ldrsh.w	r1, [r4]
 8000924:	f9b0 0000 	ldrsh.w	r0, [r0]
 8000928:	f000 f8e4 	bl	8000af4 <usartSendData>
		HAL_Delay(13);
 800092c:	200d      	movs	r0, #13
 800092e:	f000 fae1 	bl	8000ef4 <HAL_Delay>
 8000932:	e7f1      	b.n	8000918 <main+0x1c>
 8000934:	20000006 	.word	0x20000006
 8000938:	20000004 	.word	0x20000004
 800093c:	20000002 	.word	0x20000002
 8000940:	20000000 	.word	0x20000000

08000944 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000944:	6802      	ldr	r2, [r0, #0]
 8000946:	4b03      	ldr	r3, [pc, #12]	; (8000954 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000948:	429a      	cmp	r2, r3
 800094a:	d101      	bne.n	8000950 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800094c:	f000 bac0 	b.w	8000ed0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40001400 	.word	0x40001400

08000958 <USART1_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <USART1_IRQHandler+0x18>)
 800095a:	69da      	ldr	r2, [r3, #28]
 800095c:	06d2      	lsls	r2, r2, #27
 800095e:	d506      	bpl.n	800096e <USART1_IRQHandler+0x16>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8000960:	2210      	movs	r2, #16
void USART1_IRQHandler(void)
{
	if(LL_USART_IsActiveFlag_IDLE(USART1))
	{
		LL_USART_ClearFlag_IDLE(USART1);
		usartReceiveOneData(&testRece1,&testRece2,&testRece3);
 8000962:	4904      	ldr	r1, [pc, #16]	; (8000974 <USART1_IRQHandler+0x1c>)
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <USART1_IRQHandler+0x20>)
 8000966:	621a      	str	r2, [r3, #32]
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <USART1_IRQHandler+0x24>)
 800096a:	f000 b837 	b.w	80009dc <usartReceiveOneData>
//		LL_DMA_ClearFlag_TE5(DMA2);
//		LL_DMA_ClearFlag_FE5(DMA2);
//		LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_5, RX_LEN);
//		LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_5);
	}
}
 800096e:	4770      	bx	lr
 8000970:	40011000 	.word	0x40011000
 8000974:	20000030 	.word	0x20000030
 8000978:	2000002c 	.word	0x2000002c
 800097c:	20000034 	.word	0x20000034

08000980 <USART_Send_String>:
函数功能：发送指定大小的字符数组，被usartSendData函数调用
入口参数：数组地址、数组大小
返回  值：无
**************************************************************************/
void USART_Send_String(uint8_t *p,uint16_t sendSize)
{
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <USART_Send_String+0x24>)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	b530      	push	{r4, r5, lr}
	static int length =0;
	while(length<sendSize)
 8000986:	1a12      	subs	r2, r2, r0
	{
		//@@@@@#####如果你使用不是USART1更改成相应的，比如USART3，这里有两处修改
		while( !(USART1->ISR&(0x01<<7)) );//发送缓冲区为空
 8000988:	4c07      	ldr	r4, [pc, #28]	; (80009a8 <USART_Send_String+0x28>)
	while(length<sendSize)
 800098a:	1885      	adds	r5, r0, r2
 800098c:	42a9      	cmp	r1, r5
 800098e:	dc02      	bgt.n	8000996 <USART_Send_String+0x16>
		USART1->TDR=*p;
		p++;
		length++;
	}
	length =0;
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
}
 8000994:	bd30      	pop	{r4, r5, pc}
		while( !(USART1->ISR&(0x01<<7)) );//发送缓冲区为空
 8000996:	69e5      	ldr	r5, [r4, #28]
 8000998:	062d      	lsls	r5, r5, #24
 800099a:	d5fc      	bpl.n	8000996 <USART_Send_String+0x16>
		USART1->TDR=*p;
 800099c:	f810 5b01 	ldrb.w	r5, [r0], #1
 80009a0:	62a5      	str	r5, [r4, #40]	; 0x28
 80009a2:	e7f2      	b.n	800098a <USART_Send_String+0xa>
 80009a4:	2000004c 	.word	0x2000004c
 80009a8:	40011000 	.word	0x40011000

080009ac <getCrc8>:
函数功能：计算八位循环冗余校验，被usartSendData和usartReceiveOneData函数调用
入口参数：数组地址、数组大小
返回  值：无
**************************************************************************/
unsigned char getCrc8(unsigned char *ptr, unsigned short len)
{
 80009ac:	4401      	add	r1, r0
	unsigned char crc;
	unsigned char i;
	crc = 0;
 80009ae:	2300      	movs	r3, #0
{
 80009b0:	b510      	push	{r4, lr}
	while(len--)
 80009b2:	4288      	cmp	r0, r1
 80009b4:	d101      	bne.n	80009ba <getCrc8+0xe>
			else
                crc >>= 1;
		}
	}
	return crc;
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	bd10      	pop	{r4, pc}
		crc ^= *ptr++;
 80009ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80009be:	4053      	eors	r3, r2
 80009c0:	2208      	movs	r2, #8
 80009c2:	f003 0401 	and.w	r4, r3, #1
 80009c6:	085b      	lsrs	r3, r3, #1
			if(crc&0x01)
 80009c8:	b114      	cbz	r4, 80009d0 <getCrc8+0x24>
                crc=(crc>>1)^0x8C;
 80009ca:	f083 038c 	eor.w	r3, r3, #140	; 0x8c
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	3a01      	subs	r2, #1
		for(i = 0; i < 8; i++)
 80009d2:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80009d6:	d1f4      	bne.n	80009c2 <getCrc8+0x16>
 80009d8:	e7eb      	b.n	80009b2 <getCrc8+0x6>
	...

080009dc <usartReceiveOneData>:
{
 80009dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80009de:	4b3b      	ldr	r3, [pc, #236]	; (8000acc <usartReceiveOneData+0xf0>)
 80009e0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	if(Start_Flag == START)
 80009e2:	4b3b      	ldr	r3, [pc, #236]	; (8000ad0 <usartReceiveOneData+0xf4>)
 80009e4:	b2e4      	uxtb	r4, r4
 80009e6:	781d      	ldrb	r5, [r3, #0]
 80009e8:	469c      	mov	ip, r3
 80009ea:	2d11      	cmp	r5, #17
 80009ec:	d110      	bne.n	8000a10 <usartReceiveOneData+0x34>
		if(USART_Receiver == 0xaa)                             //buf[1]
 80009ee:	2caa      	cmp	r4, #170	; 0xaa
 80009f0:	4a38      	ldr	r2, [pc, #224]	; (8000ad4 <usartReceiveOneData+0xf8>)
 80009f2:	d10b      	bne.n	8000a0c <usartReceiveOneData+0x30>
			if(USARTReceiverFront == 0x55)        //数据头两位 //buf[0]
 80009f4:	7811      	ldrb	r1, [r2, #0]
 80009f6:	2955      	cmp	r1, #85	; 0x55
 80009f8:	d106      	bne.n	8000a08 <usartReceiveOneData+0x2c>
				Start_Flag = !START;              //收到数据头，开始接收数据
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
				receiveBuff[0]=header[0];         //buf[0]
 80009fe:	4b36      	ldr	r3, [pc, #216]	; (8000ad8 <usartReceiveOneData+0xfc>)
 8000a00:	7019      	strb	r1, [r3, #0]
				receiveBuff[1]=header[1];         //buf[1]
 8000a02:	705c      	strb	r4, [r3, #1]
				USARTBufferIndex = 0;             //缓冲区初始化
 8000a04:	4b35      	ldr	r3, [pc, #212]	; (8000adc <usartReceiveOneData+0x100>)
 8000a06:	701a      	strb	r2, [r3, #0]
}
 8000a08:	2000      	movs	r0, #0
 8000a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			USARTReceiverFront = USART_Receiver;
 8000a0c:	7014      	strb	r4, [r2, #0]
 8000a0e:	e7fb      	b.n	8000a08 <usartReceiveOneData+0x2c>
		switch(USARTBufferIndex)
 8000a10:	4d32      	ldr	r5, [pc, #200]	; (8000adc <usartReceiveOneData+0x100>)
 8000a12:	782b      	ldrb	r3, [r5, #0]
 8000a14:	2b03      	cmp	r3, #3
 8000a16:	d8f7      	bhi.n	8000a08 <usartReceiveOneData+0x2c>
 8000a18:	e8df f003 	tbb	[pc, r3]
 8000a1c:	291b0902 	.word	0x291b0902
				receiveBuff[2] = USART_Receiver;
 8000a20:	4b2d      	ldr	r3, [pc, #180]	; (8000ad8 <usartReceiveOneData+0xfc>)
 8000a22:	709c      	strb	r4, [r3, #2]
				dataLength     = receiveBuff[2];            //buf[2]
 8000a24:	4b2e      	ldr	r3, [pc, #184]	; (8000ae0 <usartReceiveOneData+0x104>)
 8000a26:	801c      	strh	r4, [r3, #0]
				USARTBufferIndex++;
 8000a28:	2301      	movs	r3, #1
				USARTBufferIndex++;
 8000a2a:	702b      	strb	r3, [r5, #0]
				break;
 8000a2c:	e7ec      	b.n	8000a08 <usartReceiveOneData+0x2c>
				receiveBuff[j + 3] = USART_Receiver;        //buf[3] - buf[7]
 8000a2e:	4a2d      	ldr	r2, [pc, #180]	; (8000ae4 <usartReceiveOneData+0x108>)
 8000a30:	4929      	ldr	r1, [pc, #164]	; (8000ad8 <usartReceiveOneData+0xfc>)
 8000a32:	f9b2 3000 	ldrsh.w	r3, [r2]
 8000a36:	4419      	add	r1, r3
				j++;
 8000a38:	3301      	adds	r3, #1
				receiveBuff[j + 3] = USART_Receiver;        //buf[3] - buf[7]
 8000a3a:	70cc      	strb	r4, [r1, #3]
				j++;
 8000a3c:	b21b      	sxth	r3, r3
				if(j >= dataLength)
 8000a3e:	4928      	ldr	r1, [pc, #160]	; (8000ae0 <usartReceiveOneData+0x104>)
				j++;
 8000a40:	8013      	strh	r3, [r2, #0]
				if(j >= dataLength)
 8000a42:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000a46:	4299      	cmp	r1, r3
 8000a48:	dcde      	bgt.n	8000a08 <usartReceiveOneData+0x2c>
					j = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	8013      	strh	r3, [r2, #0]
					USARTBufferIndex++;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	e7eb      	b.n	8000a2a <usartReceiveOneData+0x4e>
				receiveBuff[3 + dataLength] = USART_Receiver;
 8000a52:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <usartReceiveOneData+0x104>)
 8000a54:	4820      	ldr	r0, [pc, #128]	; (8000ad8 <usartReceiveOneData+0xfc>)
 8000a56:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000a5a:	1843      	adds	r3, r0, r1
				checkSum = getCrc8(receiveBuff, 3 + dataLength);
 8000a5c:	3103      	adds	r1, #3
 8000a5e:	b289      	uxth	r1, r1
				receiveBuff[3 + dataLength] = USART_Receiver;
 8000a60:	70dc      	strb	r4, [r3, #3]
				checkSum = getCrc8(receiveBuff, 3 + dataLength);
 8000a62:	f7ff ffa3 	bl	80009ac <getCrc8>
				if (checkSum != receiveBuff[3 + dataLength]) //buf[8]
 8000a66:	42a0      	cmp	r0, r4
 8000a68:	d1ce      	bne.n	8000a08 <usartReceiveOneData+0x2c>
				USARTBufferIndex++;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	e7dd      	b.n	8000a2a <usartReceiveOneData+0x4e>
				if(k==0)
 8000a6e:	4c1e      	ldr	r4, [pc, #120]	; (8000ae8 <usartReceiveOneData+0x10c>)
 8000a70:	f9b4 3000 	ldrsh.w	r3, [r4]
 8000a74:	b913      	cbnz	r3, 8000a7c <usartReceiveOneData+0xa0>
					k++;
 8000a76:	2301      	movs	r3, #1
					k = 0;
 8000a78:	8023      	strh	r3, [r4, #0]
 8000a7a:	e7c5      	b.n	8000a08 <usartReceiveOneData+0x2c>
				else if (k==1)
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d1c3      	bne.n	8000a08 <usartReceiveOneData+0x2c>
						leftVelSet.data[k]  = receiveBuff[k + 3]; //buf[3]  buf[4]
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <usartReceiveOneData+0xfc>)
 8000a82:	4f1a      	ldr	r7, [pc, #104]	; (8000aec <usartReceiveOneData+0x110>)
 8000a84:	78de      	ldrb	r6, [r3, #3]
						rightVelSet.data[k] = receiveBuff[k + 5]; //buf[5]  buf[6]
 8000a86:	f893 e005 	ldrb.w	lr, [r3, #5]
						leftVelSet.data[k]  = receiveBuff[k + 3]; //buf[3]  buf[4]
 8000a8a:	703e      	strb	r6, [r7, #0]
						rightVelSet.data[k] = receiveBuff[k + 5]; //buf[5]  buf[6]
 8000a8c:	4e18      	ldr	r6, [pc, #96]	; (8000af0 <usartReceiveOneData+0x114>)
 8000a8e:	f886 e000 	strb.w	lr, [r6]
						leftVelSet.data[k]  = receiveBuff[k + 3]; //buf[3]  buf[4]
 8000a92:	f893 e004 	ldrb.w	lr, [r3, #4]
 8000a96:	f887 e001 	strb.w	lr, [r7, #1]
						rightVelSet.data[k] = receiveBuff[k + 5]; //buf[5]  buf[6]
 8000a9a:	f893 e006 	ldrb.w	lr, [r3, #6]
					*p_leftSpeedSet  = (int)leftVelSet.d;
 8000a9e:	f9b7 7000 	ldrsh.w	r7, [r7]
						rightVelSet.data[k] = receiveBuff[k + 5]; //buf[5]  buf[6]
 8000aa2:	f886 e001 	strb.w	lr, [r6, #1]
					*p_leftSpeedSet  = (int)leftVelSet.d;
 8000aa6:	6007      	str	r7, [r0, #0]
					*p_rightSpeedSet = (int)rightVelSet.d;
 8000aa8:	f9b6 0000 	ldrsh.w	r0, [r6]
 8000aac:	6008      	str	r0, [r1, #0]
					*p_crtlFlag = receiveBuff[7];                //buf[7]
 8000aae:	79db      	ldrb	r3, [r3, #7]
 8000ab0:	7013      	strb	r3, [r2, #0]
					USARTBufferIndex   = 0;
 8000ab2:	2300      	movs	r3, #0
					USARTReceiverFront = 0;
 8000ab4:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <usartReceiveOneData+0xf8>)
					USARTBufferIndex   = 0;
 8000ab6:	702b      	strb	r3, [r5, #0]
					USARTReceiverFront = 0;
 8000ab8:	7013      	strb	r3, [r2, #0]
					Start_Flag         = START;
 8000aba:	2211      	movs	r2, #17
 8000abc:	f88c 2000 	strb.w	r2, [ip]
					dataLength         = 0;
 8000ac0:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <usartReceiveOneData+0x104>)
 8000ac2:	8013      	strh	r3, [r2, #0]
					j = 0;
 8000ac4:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <usartReceiveOneData+0x108>)
 8000ac6:	8013      	strh	r3, [r2, #0]
 8000ac8:	e7d6      	b.n	8000a78 <usartReceiveOneData+0x9c>
 8000aca:	bf00      	nop
 8000acc:	40011000 	.word	0x40011000
 8000ad0:	20000007 	.word	0x20000007
 8000ad4:	20000036 	.word	0x20000036
 8000ad8:	20000050 	.word	0x20000050
 8000adc:	20000035 	.word	0x20000035
 8000ae0:	20000044 	.word	0x20000044
 8000ae4:	20000046 	.word	0x20000046
 8000ae8:	20000048 	.word	0x20000048
 8000aec:	20000066 	.word	0x20000066
 8000af0:	20000064 	.word	0x20000064

08000af4 <usartSendData>:
{
 8000af4:	b538      	push	{r3, r4, r5, lr}
	leftVelNow.d  = leftVel;
 8000af6:	4c14      	ldr	r4, [pc, #80]	; (8000b48 <usartSendData+0x54>)
		buf[i] = header[i];                      // buf[0] buf[1]
 8000af8:	2555      	movs	r5, #85	; 0x55
	leftVelNow.d  = leftVel;
 8000afa:	8020      	strh	r0, [r4, #0]
	rightVelNow.d = rightVel;
 8000afc:	4c13      	ldr	r4, [pc, #76]	; (8000b4c <usartSendData+0x58>)
 8000afe:	8021      	strh	r1, [r4, #0]
	angleNow.d    = angle;
 8000b00:	4c13      	ldr	r4, [pc, #76]	; (8000b50 <usartSendData+0x5c>)
 8000b02:	8022      	strh	r2, [r4, #0]
		buf[i] = header[i];                      // buf[0] buf[1]
 8000b04:	4c13      	ldr	r4, [pc, #76]	; (8000b54 <usartSendData+0x60>)
 8000b06:	7025      	strb	r5, [r4, #0]
 8000b08:	25aa      	movs	r5, #170	; 0xaa
		buf[i + 3] = leftVelNow.data[i];         // buf[3] buf[4]
 8000b0a:	70e0      	strb	r0, [r4, #3]
 8000b0c:	f3c0 2007 	ubfx	r0, r0, #8, #8
		buf[i + 5] = rightVelNow.data[i];        // buf[5] buf[6]
 8000b10:	7161      	strb	r1, [r4, #5]
 8000b12:	f3c1 2107 	ubfx	r1, r1, #8, #8
		buf[i] = header[i];                      // buf[0] buf[1]
 8000b16:	7065      	strb	r5, [r4, #1]
	buf[2] = length;                             // buf[2]
 8000b18:	2507      	movs	r5, #7
		buf[i + 7] = angleNow.data[i];           // buf[7] buf[8]
 8000b1a:	71e2      	strb	r2, [r4, #7]
 8000b1c:	f3c2 2207 	ubfx	r2, r2, #8, #8
		buf[i + 3] = leftVelNow.data[i];         // buf[3] buf[4]
 8000b20:	7120      	strb	r0, [r4, #4]
	buf[3 + length] = getCrc8(buf, 3 + length);  // buf[10]
 8000b22:	4620      	mov	r0, r4
		buf[i + 5] = rightVelNow.data[i];        // buf[5] buf[6]
 8000b24:	71a1      	strb	r1, [r4, #6]
	buf[3 + length] = getCrc8(buf, 3 + length);  // buf[10]
 8000b26:	210a      	movs	r1, #10
	buf[3 + length - 1] = ctrlFlag;              // buf[9]
 8000b28:	7263      	strb	r3, [r4, #9]
	buf[2] = length;                             // buf[2]
 8000b2a:	70a5      	strb	r5, [r4, #2]
		buf[i + 7] = angleNow.data[i];           // buf[7] buf[8]
 8000b2c:	7222      	strb	r2, [r4, #8]
	buf[3 + length] = getCrc8(buf, 3 + length);  // buf[10]
 8000b2e:	f7ff ff3d 	bl	80009ac <getCrc8>
	buf[3 + length + 2] = ender[1];              // buf[12]
 8000b32:	230a      	movs	r3, #10
	buf[3 + length + 1] = ender[0];              // buf[11]
 8000b34:	210d      	movs	r1, #13
	buf[3 + length] = getCrc8(buf, 3 + length);  // buf[10]
 8000b36:	72a0      	strb	r0, [r4, #10]
	USART_Send_String(buf,sizeof(buf));
 8000b38:	4620      	mov	r0, r4
	buf[3 + length + 1] = ender[0];              // buf[11]
 8000b3a:	72e1      	strb	r1, [r4, #11]
	buf[3 + length + 2] = ender[1];              // buf[12]
 8000b3c:	7323      	strb	r3, [r4, #12]
}
 8000b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	USART_Send_String(buf,sizeof(buf));
 8000b42:	f7ff bf1d 	b.w	8000980 <USART_Send_String>
 8000b46:	bf00      	nop
 8000b48:	20000068 	.word	0x20000068
 8000b4c:	20000062 	.word	0x20000062
 8000b50:	20000060 	.word	0x20000060
 8000b54:	20000037 	.word	0x20000037

08000b58 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b58:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <HAL_MspInit+0x7c>)
{
 8000b5a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b5e:	210f      	movs	r1, #15
 8000b60:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b64:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b68:	641a      	str	r2, [r3, #64]	; 0x40
 8000b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b6c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000b70:	9200      	str	r2, [sp, #0]
 8000b72:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000b7a:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b7c:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b84:	9301      	str	r3, [sp, #4]
 8000b86:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b88:	f000 f9d8 	bl	8000f3c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2105      	movs	r1, #5
 8000b90:	2001      	movs	r0, #1
 8000b92:	f000 f9d3 	bl	8000f3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8000b96:	2001      	movs	r0, #1
 8000b98:	f000 fa02 	bl	8000fa0 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2105      	movs	r1, #5
 8000ba0:	2004      	movs	r0, #4
 8000ba2:	f000 f9cb 	bl	8000f3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8000ba6:	2004      	movs	r0, #4
 8000ba8:	f000 f9fa 	bl	8000fa0 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8000bac:	2105      	movs	r1, #5
 8000bae:	2200      	movs	r2, #0
 8000bb0:	4608      	mov	r0, r1
 8000bb2:	f000 f9c3 	bl	8000f3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000bb6:	2005      	movs	r0, #5
 8000bb8:	f000 f9f2 	bl	8000fa0 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2105      	movs	r1, #5
 8000bc0:	2051      	movs	r0, #81	; 0x51
 8000bc2:	f000 f9bb 	bl	8000f3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8000bc6:	2051      	movs	r0, #81	; 0x51

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc8:	b003      	add	sp, #12
 8000bca:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8000bce:	f000 b9e7 	b.w	8000fa0 <HAL_NVIC_EnableIRQ>
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd8:	b510      	push	{r4, lr}
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000bda:	4601      	mov	r1, r0
{
 8000bdc:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2037      	movs	r0, #55	; 0x37
 8000be2:	f000 f9ab 	bl	8000f3c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000be6:	2037      	movs	r0, #55	; 0x37
 8000be8:	f000 f9da 	bl	8000fa0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <HAL_InitTick+0x68>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bee:	a901      	add	r1, sp, #4
 8000bf0:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000bf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000bf4:	4c13      	ldr	r4, [pc, #76]	; (8000c44 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000bf6:	f042 0220 	orr.w	r2, r2, #32
 8000bfa:	641a      	str	r2, [r3, #64]	; 0x40
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	f003 0320 	and.w	r3, r3, #32
 8000c02:	9302      	str	r3, [sp, #8]
 8000c04:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c06:	f000 facb 	bl	80011a0 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c0a:	f000 fab9 	bl	8001180 <HAL_RCC_GetPCLK1Freq>
  htim7.Instance = TIM7;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c10:	0040      	lsls	r0, r0, #1
  htim7.Instance = TIM7;
 8000c12:	6023      	str	r3, [r4, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000c14:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000c18:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <HAL_InitTick+0x74>)
 8000c1c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c20:	3801      	subs	r0, #1
  htim7.Init.Prescaler = uwPrescalerValue;
  htim7.Init.ClockDivision = 0;
 8000c22:	2300      	movs	r3, #0
  htim7.Init.Prescaler = uwPrescalerValue;
 8000c24:	6060      	str	r0, [r4, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000c26:	4620      	mov	r0, r4
  htim7.Init.ClockDivision = 0;
 8000c28:	6123      	str	r3, [r4, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2a:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000c2c:	f000 fc30 	bl	8001490 <HAL_TIM_Base_Init>
 8000c30:	b920      	cbnz	r0, 8000c3c <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000c32:	4620      	mov	r0, r4
 8000c34:	f000 fad4 	bl	80011e0 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8000c38:	b008      	add	sp, #32
 8000c3a:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	e7fb      	b.n	8000c38 <HAL_InitTick+0x60>
 8000c40:	40023800 	.word	0x40023800
 8000c44:	2000006c 	.word	0x2000006c
 8000c48:	40001400 	.word	0x40001400
 8000c4c:	000f4240 	.word	0x000f4240

08000c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c50:	e7fe      	b.n	8000c50 <NMI_Handler>

08000c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	e7fe      	b.n	8000c54 <MemManage_Handler>

08000c56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c56:	e7fe      	b.n	8000c56 <BusFault_Handler>

08000c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c58:	e7fe      	b.n	8000c58 <UsageFault_Handler>

08000c5a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5a:	4770      	bx	lr

08000c5c <DebugMon_Handler>:
 8000c5c:	4770      	bx	lr

08000c5e <PendSV_Handler>:
 8000c5e:	4770      	bx	lr

08000c60 <SysTick_Handler>:
 8000c60:	4770      	bx	lr

08000c62 <PVD_IRQHandler>:
void PVD_IRQHandler(void)
{
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8000c62:	f000 ba7f 	b.w	8001164 <HAL_PWR_PVD_IRQHandler>

08000c66 <FLASH_IRQHandler>:
void FLASH_IRQHandler(void)
{
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8000c66:	f000 b9dd 	b.w	8001024 <HAL_FLASH_IRQHandler>

08000c6a <RCC_IRQHandler>:
 8000c6a:	4770      	bx	lr

08000c6c <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c6c:	4801      	ldr	r0, [pc, #4]	; (8000c74 <TIM7_IRQHandler+0x8>)
 8000c6e:	f000 baf9 	b.w	8001264 <HAL_TIM_IRQHandler>
 8000c72:	bf00      	nop
 8000c74:	2000006c 	.word	0x2000006c

08000c78 <DMA2_Stream5_IRQHandler>:
 8000c78:	4770      	bx	lr

08000c7a <DMA2_Stream7_IRQHandler>:
 8000c7a:	4770      	bx	lr

08000c7c <FPU_IRQHandler>:
 8000c7c:	4770      	bx	lr
	...

08000c80 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <SystemInit+0x18>)
 8000c82:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000c86:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000c8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c92:	609a      	str	r2, [r3, #8]
#endif
}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c9e:	b091      	sub	sp, #68	; 0x44
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000ca0:	221c      	movs	r2, #28
 8000ca2:	2100      	movs	r1, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	2400      	movs	r4, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000ca6:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000ca8:	2507      	movs	r5, #7
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000caa:	f000 fec1 	bl	8001a30 <memset>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000cae:	4b68      	ldr	r3, [pc, #416]	; (8000e50 <MX_USART1_UART_Init+0x1b4>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000cb0:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	2603      	movs	r6, #3
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb4:	a903      	add	r1, sp, #12
 8000cb6:	4867      	ldr	r0, [pc, #412]	; (8000e54 <MX_USART1_UART_Init+0x1b8>)
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000cbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000cbe:	f042 0210 	orr.w	r2, r2, #16
 8000cc2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000cc6:	f002 0210 	and.w	r2, r2, #16
 8000cca:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000ccc:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000cce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cd0:	f042 0202 	orr.w	r2, r2, #2
 8000cd4:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	9605      	str	r6, [sp, #20]
 8000cda:	f003 0302 	and.w	r3, r3, #2
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000cde:	9508      	str	r5, [sp, #32]
 8000ce0:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000ce2:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ce4:	2340      	movs	r3, #64	; 0x40
 8000ce6:	e9cd 3703 	strd	r3, r7, [sp, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cea:	f000 fc04 	bl	80014f6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000cee:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf0:	a903      	add	r1, sp, #12
 8000cf2:	4858      	ldr	r0, [pc, #352]	; (8000e54 <MX_USART1_UART_Init+0x1b8>)
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cf4:	e9cd 6405 	strd	r6, r4, [sp, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000cf8:	e9cd 4507 	strd	r4, r5, [sp, #28]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000cfc:	e9cd 3703 	strd	r3, r7, [sp, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f000 fbf9 	bl	80014f6 <LL_GPIO_Init>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8000d04:	4b54      	ldr	r3, [pc, #336]	; (8000e58 <MX_USART1_UART_Init+0x1bc>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	3330      	adds	r3, #48	; 0x30
 8000d0a:	f022 52f0 	bic.w	r2, r2, #503316480	; 0x1e000000
 8000d0e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000d12:	f843 2c30 	str.w	r2, [r3, #-48]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8000d16:	f853 2c30 	ldr.w	r2, [r3, #-48]
 8000d1a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000d1e:	f843 2c30 	str.w	r2, [r3, #-48]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8000d22:	f853 2c30 	ldr.w	r2, [r3, #-48]
 8000d26:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000d2a:	f843 2c30 	str.w	r2, [r3, #-48]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8000d2e:	f853 2c30 	ldr.w	r2, [r3, #-48]
 8000d32:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000d36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d3a:	f843 2c30 	str.w	r2, [r3, #-48]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8000d3e:	f853 2c30 	ldr.w	r2, [r3, #-48]
 8000d42:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d46:	f843 2c30 	str.w	r2, [r3, #-48]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8000d4a:	f853 2c30 	ldr.w	r2, [r3, #-48]
 8000d4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d52:	f843 2c30 	str.w	r2, [r3, #-48]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8000d56:	f853 2c30 	ldr.w	r2, [r3, #-48]
 8000d5a:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8000d5e:	f843 2c30 	str.w	r2, [r3, #-48]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8000d62:	f853 2c30 	ldr.w	r2, [r3, #-48]
 8000d66:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8000d6a:	f843 2c30 	str.w	r2, [r3, #-48]
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8000d6e:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8000d72:	f022 0204 	bic.w	r2, r2, #4
 8000d76:	f843 2c1c 	str.w	r2, [r3, #-28]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	f022 52f0 	bic.w	r2, r2, #503316480	; 0x1e000000
 8000d80:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000d84:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000d8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d90:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000d98:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000da0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000da4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000dac:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000db4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8000dbc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8000dc4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8000dc6:	695a      	ldr	r2, [r3, #20]
 8000dc8:	f022 0204 	bic.w	r2, r2, #4
 8000dcc:	615a      	str	r2, [r3, #20]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dce:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <MX_USART1_UART_Init+0x1c0>)
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd6:	1aea      	subs	r2, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd8:	1d19      	adds	r1, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dda:	2a04      	cmp	r2, #4
 8000ddc:	bf28      	it	cs
 8000dde:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de0:	2906      	cmp	r1, #6
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
  LL_USART_Init(USART1, &USART_InitStruct);
 8000de2:	a909      	add	r1, sp, #36	; 0x24
 8000de4:	bf88      	it	hi
 8000de6:	1edc      	subhi	r4, r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dec:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dee:	4a1c      	ldr	r2, [pc, #112]	; (8000e60 <MX_USART1_UART_Init+0x1c4>)
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	43db      	mvns	r3, r3
 8000df2:	f003 0305 	and.w	r3, r3, #5
 8000df6:	40a3      	lsls	r3, r4
 8000df8:	4c1a      	ldr	r4, [pc, #104]	; (8000e64 <MX_USART1_UART_Init+0x1c8>)
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfa:	011b      	lsls	r3, r3, #4
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	f882 3325 	strb.w	r3, [r2, #805]	; 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e04:	2320      	movs	r3, #32
 8000e06:	6053      	str	r3, [r2, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000e0e:	930f      	str	r3, [sp, #60]	; 0x3c
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000e10:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000e14:	220c      	movs	r2, #12
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000e16:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000e1a:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8000e1e:	f000 fd5f 	bl	80018e0 <LL_USART_Init>
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 8000e22:	68a3      	ldr	r3, [r4, #8]
 8000e24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e28:	60a3      	str	r3, [r4, #8]
  CLEAR_BIT(USARTx->CR3, USART_CR3_DDRE);
 8000e2a:	68a3      	ldr	r3, [r4, #8]
 8000e2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e30:	60a3      	str	r3, [r4, #8]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e32:	6863      	ldr	r3, [r4, #4]
 8000e34:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000e38:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000e3a:	68a3      	ldr	r3, [r4, #8]
 8000e3c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8000e40:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000e42:	6823      	ldr	r3, [r4, #0]
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6023      	str	r3, [r4, #0]
  LL_USART_DisableOverrunDetect(USART1);
  LL_USART_DisableDMADeactOnRxErr(USART1);
  LL_USART_ConfigAsyncMode(USART1);
  LL_USART_Enable(USART1);

}
 8000e4a:	b011      	add	sp, #68	; 0x44
 8000e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020400 	.word	0x40020400
 8000e58:	40026488 	.word	0x40026488
 8000e5c:	e000ed00 	.word	0xe000ed00
 8000e60:	e000e100 	.word	0xe000e100
 8000e64:	40011000 	.word	0x40011000

08000e68 <Reset_Handler>:
 8000e68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea0 <LoopFillZerobss+0x14>
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e003      	b.n	8000e78 <LoopCopyDataInit>

08000e70 <CopyDataInit>:
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <LoopFillZerobss+0x18>)
 8000e72:	585b      	ldr	r3, [r3, r1]
 8000e74:	5043      	str	r3, [r0, r1]
 8000e76:	3104      	adds	r1, #4

08000e78 <LoopCopyDataInit>:
 8000e78:	480b      	ldr	r0, [pc, #44]	; (8000ea8 <LoopFillZerobss+0x1c>)
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <LoopFillZerobss+0x20>)
 8000e7c:	1842      	adds	r2, r0, r1
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d3f6      	bcc.n	8000e70 <CopyDataInit>
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <LoopFillZerobss+0x24>)
 8000e84:	e002      	b.n	8000e8c <LoopFillZerobss>

08000e86 <FillZerobss>:
 8000e86:	2300      	movs	r3, #0
 8000e88:	f842 3b04 	str.w	r3, [r2], #4

08000e8c <LoopFillZerobss>:
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <LoopFillZerobss+0x28>)
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d3f9      	bcc.n	8000e86 <FillZerobss>
 8000e92:	f7ff fef5 	bl	8000c80 <SystemInit>
 8000e96:	f000 fda7 	bl	80019e8 <__libc_init_array>
 8000e9a:	f7ff fd2f 	bl	80008fc <main>
 8000e9e:	4770      	bx	lr
 8000ea0:	20080000 	.word	0x20080000
 8000ea4:	08001a78 	.word	0x08001a78
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000010 	.word	0x20000010
 8000eb0:	20000010 	.word	0x20000010
 8000eb4:	200000d8 	.word	0x200000d8

08000eb8 <ADC_IRQHandler>:
 8000eb8:	e7fe      	b.n	8000eb8 <ADC_IRQHandler>

08000eba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eba:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f000 f82b 	bl	8000f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f7ff fe88 	bl	8000bd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec8:	f7ff fe46 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000ecc:	2000      	movs	r0, #0
 8000ece:	bd08      	pop	{r3, pc}

08000ed0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ed0:	4a03      	ldr	r2, [pc, #12]	; (8000ee0 <HAL_IncTick+0x10>)
 8000ed2:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <HAL_IncTick+0x14>)
 8000ed4:	6811      	ldr	r1, [r2, #0]
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	440b      	add	r3, r1
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	200000b8 	.word	0x200000b8
 8000ee4:	2000000c 	.word	0x2000000c

08000ee8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ee8:	4b01      	ldr	r3, [pc, #4]	; (8000ef0 <HAL_GetTick+0x8>)
 8000eea:	6818      	ldr	r0, [r3, #0]
}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	200000b8 	.word	0x200000b8

08000ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef4:	b538      	push	{r3, r4, r5, lr}
 8000ef6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ef8:	f7ff fff6 	bl	8000ee8 <HAL_GetTick>
 8000efc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efe:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000f00:	bf1e      	ittt	ne
 8000f02:	4b04      	ldrne	r3, [pc, #16]	; (8000f14 <HAL_Delay+0x20>)
 8000f04:	781b      	ldrbne	r3, [r3, #0]
 8000f06:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f08:	f7ff ffee 	bl	8000ee8 <HAL_GetTick>
 8000f0c:	1b40      	subs	r0, r0, r5
 8000f0e:	42a0      	cmp	r0, r4
 8000f10:	d3fa      	bcc.n	8000f08 <HAL_Delay+0x14>
  {
  }
}
 8000f12:	bd38      	pop	{r3, r4, r5, pc}
 8000f14:	2000000c 	.word	0x2000000c

08000f18 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f18:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f1a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f1c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f1e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f22:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f26:	041b      	lsls	r3, r3, #16
 8000f28:	0c1b      	lsrs	r3, r3, #16
 8000f2a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000f32:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000f34:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f3c:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f3e:	b570      	push	{r4, r5, r6, lr}
 8000f40:	68dc      	ldr	r4, [r3, #12]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f42:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f46:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f4a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f50:	2d04      	cmp	r5, #4
 8000f52:	bf28      	it	cs
 8000f54:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f56:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5c:	bf8c      	ite	hi
 8000f5e:	3c03      	subhi	r4, #3
 8000f60:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) >= 0)
 8000f62:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	ea21 0303 	bic.w	r3, r1, r3
 8000f68:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6c:	fa06 f404 	lsl.w	r4, r6, r4
 8000f70:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	ea43 0304 	orr.w	r3, r3, r4
 8000f78:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000f7c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000f7e:	db06      	blt.n	8000f8e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f80:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000f84:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000f88:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f8c:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8e:	f000 000f 	and.w	r0, r0, #15
 8000f92:	4a02      	ldr	r2, [pc, #8]	; (8000f9c <HAL_NVIC_SetPriority+0x60>)
 8000f94:	5413      	strb	r3, [r2, r0]
 8000f96:	e7f9      	b.n	8000f8c <HAL_NVIC_SetPriority+0x50>
 8000f98:	e000ed00 	.word	0xe000ed00
 8000f9c:	e000ed14 	.word	0xe000ed14

08000fa0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	db08      	blt.n	8000fb6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa4:	0942      	lsrs	r2, r0, #5
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	f000 001f 	and.w	r0, r0, #31
 8000fac:	fa03 f000 	lsl.w	r0, r3, r0
 8000fb0:	4b01      	ldr	r3, [pc, #4]	; (8000fb8 <HAL_NVIC_EnableIRQ+0x18>)
 8000fb2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000fb6:	4770      	bx	lr
 8000fb8:	e000e100 	.word	0xe000e100

08000fbc <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <FLASH_SetErrorCode+0x5c>)
 8000fbe:	68da      	ldr	r2, [r3, #12]
 8000fc0:	0792      	lsls	r2, r2, #30
 8000fc2:	d504      	bpl.n	8000fce <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000fc4:	4915      	ldr	r1, [pc, #84]	; (800101c <FLASH_SetErrorCode+0x60>)
 8000fc6:	698a      	ldr	r2, [r1, #24]
 8000fc8:	f042 0220 	orr.w	r2, r2, #32
 8000fcc:	618a      	str	r2, [r1, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	06db      	lsls	r3, r3, #27
 8000fd2:	d504      	bpl.n	8000fde <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000fd4:	4a11      	ldr	r2, [pc, #68]	; (800101c <FLASH_SetErrorCode+0x60>)
 8000fd6:	6993      	ldr	r3, [r2, #24]
 8000fd8:	f043 0310 	orr.w	r3, r3, #16
 8000fdc:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <FLASH_SetErrorCode+0x5c>)
 8000fe0:	68da      	ldr	r2, [r3, #12]
 8000fe2:	0690      	lsls	r0, r2, #26
 8000fe4:	d504      	bpl.n	8000ff0 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000fe6:	490d      	ldr	r1, [pc, #52]	; (800101c <FLASH_SetErrorCode+0x60>)
 8000fe8:	698a      	ldr	r2, [r1, #24]
 8000fea:	f042 0208 	orr.w	r2, r2, #8
 8000fee:	618a      	str	r2, [r1, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	0659      	lsls	r1, r3, #25
 8000ff4:	d504      	bpl.n	8001000 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000ff6:	4a09      	ldr	r2, [pc, #36]	; (800101c <FLASH_SetErrorCode+0x60>)
 8000ff8:	6993      	ldr	r3, [r2, #24]
 8000ffa:	f043 0304 	orr.w	r3, r3, #4
 8000ffe:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <FLASH_SetErrorCode+0x5c>)
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	0612      	lsls	r2, r2, #24
 8001006:	d504      	bpl.n	8001012 <FLASH_SetErrorCode+0x56>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8001008:	4904      	ldr	r1, [pc, #16]	; (800101c <FLASH_SetErrorCode+0x60>)
 800100a:	698a      	ldr	r2, [r1, #24]
 800100c:	f042 0202 	orr.w	r2, r2, #2
 8001010:	618a      	str	r2, [r1, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001012:	22f2      	movs	r2, #242	; 0xf2
 8001014:	60da      	str	r2, [r3, #12]
}
 8001016:	4770      	bx	lr
 8001018:	40023c00 	.word	0x40023c00
 800101c:	200000bc 	.word	0x200000bc

08001020 <HAL_FLASH_EndOfOperationCallback>:
}
 8001020:	4770      	bx	lr

08001022 <HAL_FLASH_OperationErrorCallback>:
 8001022:	4770      	bx	lr

08001024 <HAL_FLASH_IRQHandler>:
  FLASH->CR &= (~FLASH_CR_PG);
 8001024:	4b37      	ldr	r3, [pc, #220]	; (8001104 <HAL_FLASH_IRQHandler+0xe0>)
 8001026:	691a      	ldr	r2, [r3, #16]
 8001028:	f022 0201 	bic.w	r2, r2, #1
{
 800102c:	b570      	push	{r4, r5, r6, lr}
  FLASH->CR &= (~FLASH_CR_PG);
 800102e:	611a      	str	r2, [r3, #16]
  FLASH->CR &= (~FLASH_CR_SER);
 8001030:	691a      	ldr	r2, [r3, #16]
 8001032:	4d35      	ldr	r5, [pc, #212]	; (8001108 <HAL_FLASH_IRQHandler+0xe4>)
 8001034:	f022 0202 	bic.w	r2, r2, #2
 8001038:	611a      	str	r2, [r3, #16]
  FLASH->CR &= SECTOR_MASK; 
 800103a:	691a      	ldr	r2, [r3, #16]
 800103c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001040:	611a      	str	r2, [r3, #16]
  FLASH->CR &= (~FLASH_MER_BIT);
 8001042:	691a      	ldr	r2, [r3, #16]
 8001044:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001048:	f022 0204 	bic.w	r2, r2, #4
 800104c:	611a      	str	r2, [r3, #16]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800104e:	68dc      	ldr	r4, [r3, #12]
 8001050:	f014 0401 	ands.w	r4, r4, #1
 8001054:	d018      	beq.n	8001088 <HAL_FLASH_IRQHandler+0x64>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001056:	2201      	movs	r2, #1
 8001058:	60da      	str	r2, [r3, #12]
    switch (pFlash.ProcedureOnGoing)
 800105a:	782b      	ldrb	r3, [r5, #0]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d02c      	beq.n	80010bc <HAL_FLASH_IRQHandler+0x98>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d030      	beq.n	80010c8 <HAL_FLASH_IRQHandler+0xa4>
 8001066:	4293      	cmp	r3, r2
 8001068:	d130      	bne.n	80010cc <HAL_FLASH_IRQHandler+0xa8>
        pFlash.NbSectorsToErase--;
 800106a:	686b      	ldr	r3, [r5, #4]
 800106c:	3b01      	subs	r3, #1
 800106e:	606b      	str	r3, [r5, #4]
        if(pFlash.NbSectorsToErase != 0)
 8001070:	686e      	ldr	r6, [r5, #4]
 8001072:	b1de      	cbz	r6, 80010ac <HAL_FLASH_IRQHandler+0x88>
          temp = pFlash.Sector;
 8001074:	68e8      	ldr	r0, [r5, #12]
          HAL_FLASH_EndOfOperationCallback(temp);
 8001076:	f7ff ffd3 	bl	8001020 <HAL_FLASH_EndOfOperationCallback>
          temp = ++pFlash.Sector;
 800107a:	68ec      	ldr	r4, [r5, #12]
 800107c:	3401      	adds	r4, #1
 800107e:	60ec      	str	r4, [r5, #12]
          FLASH_Erase_Sector(temp, pFlash.VoltageForErase);
 8001080:	4620      	mov	r0, r4
 8001082:	7a29      	ldrb	r1, [r5, #8]
 8001084:	f000 f842 	bl	800110c <FLASH_Erase_Sector>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8001088:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <HAL_FLASH_IRQHandler+0xe0>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	f013 0ff2 	tst.w	r3, #242	; 0xf2
 8001090:	d026      	beq.n	80010e0 <HAL_FLASH_IRQHandler+0xbc>
    switch (pFlash.ProcedureOnGoing)
 8001092:	782b      	ldrb	r3, [r5, #0]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d01a      	beq.n	80010d0 <HAL_FLASH_IRQHandler+0xac>
 800109a:	2b03      	cmp	r3, #3
 800109c:	d02f      	beq.n	80010fe <HAL_FLASH_IRQHandler+0xda>
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d117      	bne.n	80010d2 <HAL_FLASH_IRQHandler+0xae>
        pFlash.Sector = 0xFFFFFFFFU;
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
        temp = pFlash.Sector;
 80010a6:	68ec      	ldr	r4, [r5, #12]
        pFlash.Sector = 0xFFFFFFFFU;
 80010a8:	60eb      	str	r3, [r5, #12]
        break;
 80010aa:	e012      	b.n	80010d2 <HAL_FLASH_IRQHandler+0xae>
          pFlash.Sector = temp = 0xFFFFFFFFU;
 80010ac:	f04f 34ff 	mov.w	r4, #4294967295
          HAL_FLASH_EndOfOperationCallback(temp);
 80010b0:	4620      	mov	r0, r4
          pFlash.Sector = temp = 0xFFFFFFFFU;
 80010b2:	60ec      	str	r4, [r5, #12]
          HAL_FLASH_EndOfOperationCallback(temp);
 80010b4:	f7ff ffb4 	bl	8001020 <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80010b8:	702e      	strb	r6, [r5, #0]
 80010ba:	e7e5      	b.n	8001088 <HAL_FLASH_IRQHandler+0x64>
        HAL_FLASH_EndOfOperationCallback(0);
 80010bc:	2000      	movs	r0, #0
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80010be:	2400      	movs	r4, #0
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80010c0:	f7ff ffae 	bl	8001020 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80010c4:	702c      	strb	r4, [r5, #0]
        break;
 80010c6:	e7df      	b.n	8001088 <HAL_FLASH_IRQHandler+0x64>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80010c8:	6928      	ldr	r0, [r5, #16]
 80010ca:	e7f8      	b.n	80010be <HAL_FLASH_IRQHandler+0x9a>
  uint32_t temp = 0;
 80010cc:	2400      	movs	r4, #0
 80010ce:	e7db      	b.n	8001088 <HAL_FLASH_IRQHandler+0x64>
        temp = 0;
 80010d0:	2400      	movs	r4, #0
    FLASH_SetErrorCode();
 80010d2:	f7ff ff73 	bl	8000fbc <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(temp);
 80010d6:	4620      	mov	r0, r4
 80010d8:	f7ff ffa3 	bl	8001022 <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80010dc:	2300      	movs	r3, #0
 80010de:	702b      	strb	r3, [r5, #0]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80010e0:	782b      	ldrb	r3, [r5, #0]
 80010e2:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80010e6:	b94b      	cbnz	r3, 80010fc <HAL_FLASH_IRQHandler+0xd8>
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_FLASH_IRQHandler+0xe0>)
 80010ea:	691a      	ldr	r2, [r3, #16]
 80010ec:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80010f0:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80010f8:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 80010fa:	7529      	strb	r1, [r5, #20]
}
 80010fc:	bd70      	pop	{r4, r5, r6, pc}
        temp = pFlash.Address;
 80010fe:	692c      	ldr	r4, [r5, #16]
        break;
 8001100:	e7e7      	b.n	80010d2 <HAL_FLASH_IRQHandler+0xae>
 8001102:	bf00      	nop
 8001104:	40023c00 	.word	0x40023c00
 8001108:	200000bc 	.word	0x200000bc

0800110c <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800110c:	b139      	cbz	r1, 800111e <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800110e:	2901      	cmp	r1, #1
 8001110:	d021      	beq.n	8001156 <FLASH_Erase_Sector+0x4a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001112:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001114:	bf0c      	ite	eq
 8001116:	f44f 7100 	moveq.w	r1, #512	; 0x200
 800111a:	f44f 7140 	movne.w	r1, #768	; 0x300
  {
    Sector += 4;
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <FLASH_Erase_Sector+0x50>)
  if(Sector > FLASH_SECTOR_11) 
 8001120:	280b      	cmp	r0, #11
  FLASH->CR &= CR_PSIZE_MASK;
 8001122:	691a      	ldr	r2, [r3, #16]
    Sector += 4;
 8001124:	bf88      	it	hi
 8001126:	3004      	addhi	r0, #4
  FLASH->CR &= CR_PSIZE_MASK;
 8001128:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800112c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 800112e:	691a      	ldr	r2, [r3, #16]
 8001130:	4311      	orrs	r1, r2
 8001132:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001134:	691a      	ldr	r2, [r3, #16]
 8001136:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800113a:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800113c:	691a      	ldr	r2, [r3, #16]
 800113e:	f042 0202 	orr.w	r2, r2, #2
 8001142:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8001146:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001148:	691a      	ldr	r2, [r3, #16]
 800114a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800114e:	611a      	str	r2, [r3, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001150:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001154:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001156:	f44f 7180 	mov.w	r1, #256	; 0x100
 800115a:	e7e0      	b.n	800111e <FLASH_Erase_Sector+0x12>
 800115c:	40023c00 	.word	0x40023c00

08001160 <HAL_PWR_PVDCallback>:
__weak void HAL_PWR_PVDCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8001160:	4770      	bx	lr
	...

08001164 <HAL_PWR_PVD_IRQHandler>:
{
 8001164:	b510      	push	{r4, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8001166:	4c05      	ldr	r4, [pc, #20]	; (800117c <HAL_PWR_PVD_IRQHandler+0x18>)
 8001168:	6963      	ldr	r3, [r4, #20]
 800116a:	03db      	lsls	r3, r3, #15
 800116c:	d504      	bpl.n	8001178 <HAL_PWR_PVD_IRQHandler+0x14>
    HAL_PWR_PVDCallback();
 800116e:	f7ff fff7 	bl	8001160 <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8001172:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001176:	6163      	str	r3, [r4, #20]
}
 8001178:	bd10      	pop	{r4, pc}
 800117a:	bf00      	nop
 800117c:	40013c00 	.word	0x40013c00

08001180 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800118a:	5cd3      	ldrb	r3, [r2, r3]
 800118c:	4a03      	ldr	r2, [pc, #12]	; (800119c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800118e:	6810      	ldr	r0, [r2, #0]
}
 8001190:	40d8      	lsrs	r0, r3
 8001192:	4770      	bx	lr
 8001194:	40023800 	.word	0x40023800
 8001198:	08001a68 	.word	0x08001a68
 800119c:	20000008 	.word	0x20000008

080011a0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80011a0:	230f      	movs	r3, #15
 80011a2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <HAL_RCC_GetClockConfig+0x34>)
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	f002 0203 	and.w	r2, r2, #3
 80011ac:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80011b4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80011bc:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	08db      	lsrs	r3, r3, #3
 80011c2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80011c6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <HAL_RCC_GetClockConfig+0x38>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 030f 	and.w	r3, r3, #15
 80011d0:	600b      	str	r3, [r1, #0]
}
 80011d2:	4770      	bx	lr
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40023c00 	.word	0x40023c00

080011dc <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80011dc:	4770      	bx	lr
	...

080011e0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80011e0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d133      	bne.n	8001250 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80011e8:	2302      	movs	r3, #2
 80011ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80011ee:	6803      	ldr	r3, [r0, #0]
 80011f0:	68da      	ldr	r2, [r3, #12]
 80011f2:	f042 0201 	orr.w	r2, r2, #1
 80011f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80011f8:	4a16      	ldr	r2, [pc, #88]	; (8001254 <HAL_TIM_Base_Start_IT+0x74>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d01a      	beq.n	8001234 <HAL_TIM_Base_Start_IT+0x54>
 80011fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001202:	d017      	beq.n	8001234 <HAL_TIM_Base_Start_IT+0x54>
 8001204:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001208:	4293      	cmp	r3, r2
 800120a:	d013      	beq.n	8001234 <HAL_TIM_Base_Start_IT+0x54>
 800120c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001210:	4293      	cmp	r3, r2
 8001212:	d00f      	beq.n	8001234 <HAL_TIM_Base_Start_IT+0x54>
 8001214:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001218:	4293      	cmp	r3, r2
 800121a:	d00b      	beq.n	8001234 <HAL_TIM_Base_Start_IT+0x54>
 800121c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001220:	4293      	cmp	r3, r2
 8001222:	d007      	beq.n	8001234 <HAL_TIM_Base_Start_IT+0x54>
 8001224:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001228:	4293      	cmp	r3, r2
 800122a:	d003      	beq.n	8001234 <HAL_TIM_Base_Start_IT+0x54>
 800122c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001230:	4293      	cmp	r3, r2
 8001232:	d107      	bne.n	8001244 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001234:	6899      	ldr	r1, [r3, #8]
 8001236:	4a08      	ldr	r2, [pc, #32]	; (8001258 <HAL_TIM_Base_Start_IT+0x78>)
 8001238:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800123a:	2a06      	cmp	r2, #6
 800123c:	d006      	beq.n	800124c <HAL_TIM_Base_Start_IT+0x6c>
 800123e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001242:	d003      	beq.n	800124c <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	f042 0201 	orr.w	r2, r2, #1
 800124a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800124c:	2000      	movs	r0, #0
}
 800124e:	4770      	bx	lr
    return HAL_ERROR;
 8001250:	2001      	movs	r0, #1
 8001252:	4770      	bx	lr
 8001254:	40010000 	.word	0x40010000
 8001258:	00010007 	.word	0x00010007

0800125c <HAL_TIM_OC_DelayElapsedCallback>:
 800125c:	4770      	bx	lr

0800125e <HAL_TIM_IC_CaptureCallback>:
 800125e:	4770      	bx	lr

08001260 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001260:	4770      	bx	lr

08001262 <HAL_TIM_TriggerCallback>:
 8001262:	4770      	bx	lr

08001264 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001264:	6803      	ldr	r3, [r0, #0]
 8001266:	691a      	ldr	r2, [r3, #16]
 8001268:	0791      	lsls	r1, r2, #30
{
 800126a:	b510      	push	{r4, lr}
 800126c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800126e:	d50f      	bpl.n	8001290 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	0792      	lsls	r2, r2, #30
 8001274:	d50c      	bpl.n	8001290 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001276:	f06f 0202 	mvn.w	r2, #2
 800127a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800127c:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800127e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001280:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001282:	0799      	lsls	r1, r3, #30
 8001284:	f000 8085 	beq.w	8001392 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001288:	f7ff ffe9 	bl	800125e <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800128c:	2300      	movs	r3, #0
 800128e:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001290:	6823      	ldr	r3, [r4, #0]
 8001292:	691a      	ldr	r2, [r3, #16]
 8001294:	0752      	lsls	r2, r2, #29
 8001296:	d510      	bpl.n	80012ba <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001298:	68da      	ldr	r2, [r3, #12]
 800129a:	0750      	lsls	r0, r2, #29
 800129c:	d50d      	bpl.n	80012ba <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800129e:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012a2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80012a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80012a6:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80012a8:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80012aa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80012ac:	f413 7f40 	tst.w	r3, #768	; 0x300
 80012b0:	d075      	beq.n	800139e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80012b2:	f7ff ffd4 	bl	800125e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012b6:	2300      	movs	r3, #0
 80012b8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80012ba:	6823      	ldr	r3, [r4, #0]
 80012bc:	691a      	ldr	r2, [r3, #16]
 80012be:	0711      	lsls	r1, r2, #28
 80012c0:	d50f      	bpl.n	80012e2 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80012c2:	68da      	ldr	r2, [r3, #12]
 80012c4:	0712      	lsls	r2, r2, #28
 80012c6:	d50c      	bpl.n	80012e2 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80012c8:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012cc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80012ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80012d0:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80012d2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80012d4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80012d6:	079b      	lsls	r3, r3, #30
 80012d8:	d067      	beq.n	80013aa <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80012da:	f7ff ffc0 	bl	800125e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012de:	2300      	movs	r3, #0
 80012e0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80012e2:	6823      	ldr	r3, [r4, #0]
 80012e4:	691a      	ldr	r2, [r3, #16]
 80012e6:	06d0      	lsls	r0, r2, #27
 80012e8:	d510      	bpl.n	800130c <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	06d1      	lsls	r1, r2, #27
 80012ee:	d50d      	bpl.n	800130c <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80012f0:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012f4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80012f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80012f8:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012fa:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80012fc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012fe:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001302:	d058      	beq.n	80013b6 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001304:	f7ff ffab 	bl	800125e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001308:	2300      	movs	r3, #0
 800130a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800130c:	6823      	ldr	r3, [r4, #0]
 800130e:	691a      	ldr	r2, [r3, #16]
 8001310:	07d2      	lsls	r2, r2, #31
 8001312:	d508      	bpl.n	8001326 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001314:	68da      	ldr	r2, [r3, #12]
 8001316:	07d0      	lsls	r0, r2, #31
 8001318:	d505      	bpl.n	8001326 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800131a:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800131e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001320:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001322:	f7ff fb0f 	bl	8000944 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001326:	6823      	ldr	r3, [r4, #0]
 8001328:	691a      	ldr	r2, [r3, #16]
 800132a:	0611      	lsls	r1, r2, #24
 800132c:	d508      	bpl.n	8001340 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800132e:	68da      	ldr	r2, [r3, #12]
 8001330:	0612      	lsls	r2, r2, #24
 8001332:	d505      	bpl.n	8001340 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001334:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001338:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800133a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800133c:	f000 f8d9 	bl	80014f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001340:	6823      	ldr	r3, [r4, #0]
 8001342:	691a      	ldr	r2, [r3, #16]
 8001344:	05d0      	lsls	r0, r2, #23
 8001346:	d508      	bpl.n	800135a <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	0611      	lsls	r1, r2, #24
 800134c:	d505      	bpl.n	800135a <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800134e:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001352:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001354:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001356:	f000 f8cd 	bl	80014f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800135a:	6823      	ldr	r3, [r4, #0]
 800135c:	691a      	ldr	r2, [r3, #16]
 800135e:	0652      	lsls	r2, r2, #25
 8001360:	d508      	bpl.n	8001374 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	0650      	lsls	r0, r2, #25
 8001366:	d505      	bpl.n	8001374 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001368:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800136c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800136e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001370:	f7ff ff77 	bl	8001262 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001374:	6823      	ldr	r3, [r4, #0]
 8001376:	691a      	ldr	r2, [r3, #16]
 8001378:	0691      	lsls	r1, r2, #26
 800137a:	d522      	bpl.n	80013c2 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800137c:	68da      	ldr	r2, [r3, #12]
 800137e:	0692      	lsls	r2, r2, #26
 8001380:	d51f      	bpl.n	80013c2 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001382:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001386:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001388:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800138a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800138e:	f000 b8af 	b.w	80014f0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001392:	f7ff ff63 	bl	800125c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001396:	4620      	mov	r0, r4
 8001398:	f7ff ff62 	bl	8001260 <HAL_TIM_PWM_PulseFinishedCallback>
 800139c:	e776      	b.n	800128c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800139e:	f7ff ff5d 	bl	800125c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013a2:	4620      	mov	r0, r4
 80013a4:	f7ff ff5c 	bl	8001260 <HAL_TIM_PWM_PulseFinishedCallback>
 80013a8:	e785      	b.n	80012b6 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013aa:	f7ff ff57 	bl	800125c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013ae:	4620      	mov	r0, r4
 80013b0:	f7ff ff56 	bl	8001260 <HAL_TIM_PWM_PulseFinishedCallback>
 80013b4:	e793      	b.n	80012de <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013b6:	f7ff ff51 	bl	800125c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013ba:	4620      	mov	r0, r4
 80013bc:	f7ff ff50 	bl	8001260 <HAL_TIM_PWM_PulseFinishedCallback>
 80013c0:	e7a2      	b.n	8001308 <HAL_TIM_IRQHandler+0xa4>
}
 80013c2:	bd10      	pop	{r4, pc}

080013c4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013c4:	4a30      	ldr	r2, [pc, #192]	; (8001488 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80013c6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013c8:	4290      	cmp	r0, r2
 80013ca:	d012      	beq.n	80013f2 <TIM_Base_SetConfig+0x2e>
 80013cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80013d0:	d00f      	beq.n	80013f2 <TIM_Base_SetConfig+0x2e>
 80013d2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80013d6:	4290      	cmp	r0, r2
 80013d8:	d00b      	beq.n	80013f2 <TIM_Base_SetConfig+0x2e>
 80013da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013de:	4290      	cmp	r0, r2
 80013e0:	d007      	beq.n	80013f2 <TIM_Base_SetConfig+0x2e>
 80013e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013e6:	4290      	cmp	r0, r2
 80013e8:	d003      	beq.n	80013f2 <TIM_Base_SetConfig+0x2e>
 80013ea:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80013ee:	4290      	cmp	r0, r2
 80013f0:	d119      	bne.n	8001426 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80013f2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80013f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80013f8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80013fa:	4a23      	ldr	r2, [pc, #140]	; (8001488 <TIM_Base_SetConfig+0xc4>)
 80013fc:	4290      	cmp	r0, r2
 80013fe:	d029      	beq.n	8001454 <TIM_Base_SetConfig+0x90>
 8001400:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001404:	d026      	beq.n	8001454 <TIM_Base_SetConfig+0x90>
 8001406:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800140a:	4290      	cmp	r0, r2
 800140c:	d022      	beq.n	8001454 <TIM_Base_SetConfig+0x90>
 800140e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001412:	4290      	cmp	r0, r2
 8001414:	d01e      	beq.n	8001454 <TIM_Base_SetConfig+0x90>
 8001416:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800141a:	4290      	cmp	r0, r2
 800141c:	d01a      	beq.n	8001454 <TIM_Base_SetConfig+0x90>
 800141e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001422:	4290      	cmp	r0, r2
 8001424:	d016      	beq.n	8001454 <TIM_Base_SetConfig+0x90>
 8001426:	4a19      	ldr	r2, [pc, #100]	; (800148c <TIM_Base_SetConfig+0xc8>)
 8001428:	4290      	cmp	r0, r2
 800142a:	d013      	beq.n	8001454 <TIM_Base_SetConfig+0x90>
 800142c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001430:	4290      	cmp	r0, r2
 8001432:	d00f      	beq.n	8001454 <TIM_Base_SetConfig+0x90>
 8001434:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001438:	4290      	cmp	r0, r2
 800143a:	d00b      	beq.n	8001454 <TIM_Base_SetConfig+0x90>
 800143c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001440:	4290      	cmp	r0, r2
 8001442:	d007      	beq.n	8001454 <TIM_Base_SetConfig+0x90>
 8001444:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001448:	4290      	cmp	r0, r2
 800144a:	d003      	beq.n	8001454 <TIM_Base_SetConfig+0x90>
 800144c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001450:	4290      	cmp	r0, r2
 8001452:	d103      	bne.n	800145c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001458:	68ca      	ldr	r2, [r1, #12]
 800145a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800145c:	694a      	ldr	r2, [r1, #20]
 800145e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001462:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001464:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001466:	688b      	ldr	r3, [r1, #8]
 8001468:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800146a:	680b      	ldr	r3, [r1, #0]
 800146c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <TIM_Base_SetConfig+0xc4>)
 8001470:	4298      	cmp	r0, r3
 8001472:	d003      	beq.n	800147c <TIM_Base_SetConfig+0xb8>
 8001474:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001478:	4298      	cmp	r0, r3
 800147a:	d101      	bne.n	8001480 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800147c:	690b      	ldr	r3, [r1, #16]
 800147e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001480:	2301      	movs	r3, #1
 8001482:	6143      	str	r3, [r0, #20]
}
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40010000 	.word	0x40010000
 800148c:	40014000 	.word	0x40014000

08001490 <HAL_TIM_Base_Init>:
{
 8001490:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001492:	4604      	mov	r4, r0
 8001494:	b350      	cbz	r0, 80014ec <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001496:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800149a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800149e:	b91b      	cbnz	r3, 80014a8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80014a0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80014a4:	f7ff fe9a 	bl	80011dc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80014a8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014aa:	6820      	ldr	r0, [r4, #0]
 80014ac:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80014ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014b2:	f7ff ff87 	bl	80013c4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014b6:	2301      	movs	r3, #1
  return HAL_OK;
 80014b8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014ba:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80014c2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80014c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80014ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80014ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80014d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80014da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80014de:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80014e2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80014e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80014ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80014ec:	2001      	movs	r0, #1
 80014ee:	e7fc      	b.n	80014ea <HAL_TIM_Base_Init+0x5a>

080014f0 <HAL_TIMEx_CommutCallback>:
 80014f0:	4770      	bx	lr

080014f2 <HAL_TIMEx_BreakCallback>:
 80014f2:	4770      	bx	lr

080014f4 <HAL_TIMEx_Break2Callback>:
 80014f4:	4770      	bx	lr

080014f6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80014f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014fa:	4602      	mov	r2, r0
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80014fc:	680d      	ldr	r5, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fe:	fa95 f4a5 	rbit	r4, r5

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001502:	f04f 0e01 	mov.w	lr, #1
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001506:	fab4 f484 	clz	r4, r4
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800150a:	2603      	movs	r6, #3
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800150c:	f04f 0c0f 	mov.w	ip, #15
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001510:	ea6f 0805 	mvn.w	r8, r5
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001514:	fa35 f004 	lsrs.w	r0, r5, r4
 8001518:	d101      	bne.n	800151e <LL_GPIO_Init+0x28>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
  }
  return (SUCCESS);
}
 800151a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800151e:	fa0e f304 	lsl.w	r3, lr, r4
    if (currentpin)
 8001522:	402b      	ands	r3, r5
 8001524:	d06c      	beq.n	8001600 <LL_GPIO_Init+0x10a>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001526:	6848      	ldr	r0, [r1, #4]
 8001528:	1e47      	subs	r7, r0, #1
 800152a:	2f01      	cmp	r7, #1
 800152c:	d81e      	bhi.n	800156c <LL_GPIO_Init+0x76>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800152e:	6897      	ldr	r7, [r2, #8]
 8001530:	fa93 f9a3 	rbit	r9, r3
 8001534:	fab9 f989 	clz	r9, r9
 8001538:	fa93 faa3 	rbit	sl, r3
 800153c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8001540:	faba fa8a 	clz	sl, sl
 8001544:	fa06 f909 	lsl.w	r9, r6, r9
 8001548:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800154c:	ea27 0909 	bic.w	r9, r7, r9
 8001550:	688f      	ldr	r7, [r1, #8]
 8001552:	fa07 f70a 	lsl.w	r7, r7, sl
 8001556:	ea49 0707 	orr.w	r7, r9, r7
 800155a:	6097      	str	r7, [r2, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800155c:	6857      	ldr	r7, [r2, #4]
 800155e:	ea08 0907 	and.w	r9, r8, r7
 8001562:	68cf      	ldr	r7, [r1, #12]
 8001564:	436f      	muls	r7, r5
 8001566:	ea49 0707 	orr.w	r7, r9, r7
 800156a:	6057      	str	r7, [r2, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800156c:	68d7      	ldr	r7, [r2, #12]
 800156e:	fa93 f9a3 	rbit	r9, r3
 8001572:	fab9 f989 	clz	r9, r9
 8001576:	fa93 faa3 	rbit	sl, r3
 800157a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800157e:	faba fa8a 	clz	sl, sl
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001582:	2802      	cmp	r0, #2
 8001584:	fa06 f909 	lsl.w	r9, r6, r9
 8001588:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800158c:	ea27 0909 	bic.w	r9, r7, r9
 8001590:	690f      	ldr	r7, [r1, #16]
 8001592:	fa07 f70a 	lsl.w	r7, r7, sl
 8001596:	ea49 0707 	orr.w	r7, r9, r7
 800159a:	60d7      	str	r7, [r2, #12]
 800159c:	d11d      	bne.n	80015da <LL_GPIO_Init+0xe4>
 800159e:	fa93 f7a3 	rbit	r7, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80015a2:	fab7 f787 	clz	r7, r7
 80015a6:	f8d1 a014 	ldr.w	sl, [r1, #20]
 80015aa:	2f07      	cmp	r7, #7
 80015ac:	dc2a      	bgt.n	8001604 <LL_GPIO_Init+0x10e>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80015ae:	f8d2 b020 	ldr.w	fp, [r2, #32]
 80015b2:	fa93 f7a3 	rbit	r7, r3
 80015b6:	fab7 f787 	clz	r7, r7
 80015ba:	fa93 f9a3 	rbit	r9, r3
 80015be:	fab9 f989 	clz	r9, r9
 80015c2:	00bf      	lsls	r7, r7, #2
 80015c4:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80015c8:	fa0c f707 	lsl.w	r7, ip, r7
 80015cc:	fa0a fa09 	lsl.w	sl, sl, r9
 80015d0:	ea2b 0707 	bic.w	r7, fp, r7
 80015d4:	ea47 070a 	orr.w	r7, r7, sl
 80015d8:	6217      	str	r7, [r2, #32]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80015da:	f8d2 9000 	ldr.w	r9, [r2]
 80015de:	fa93 f7a3 	rbit	r7, r3
 80015e2:	fab7 f787 	clz	r7, r7
 80015e6:	fa93 f3a3 	rbit	r3, r3
 80015ea:	fab3 f383 	clz	r3, r3
 80015ee:	007f      	lsls	r7, r7, #1
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	fa06 f707 	lsl.w	r7, r6, r7
 80015f6:	4098      	lsls	r0, r3
 80015f8:	ea29 0707 	bic.w	r7, r9, r7
 80015fc:	4307      	orrs	r7, r0
 80015fe:	6017      	str	r7, [r2, #0]
    pinpos++;
 8001600:	3401      	adds	r4, #1
 8001602:	e787      	b.n	8001514 <LL_GPIO_Init+0x1e>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001604:	f8d2 b024 	ldr.w	fp, [r2, #36]	; 0x24
 8001608:	ea4f 2913 	mov.w	r9, r3, lsr #8
 800160c:	fa99 f7a9 	rbit	r7, r9
 8001610:	fab7 f787 	clz	r7, r7
 8001614:	fa99 f9a9 	rbit	r9, r9
 8001618:	fab9 f989 	clz	r9, r9
 800161c:	00bf      	lsls	r7, r7, #2
 800161e:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8001622:	fa0c f707 	lsl.w	r7, ip, r7
 8001626:	fa0a fa09 	lsl.w	sl, sl, r9
 800162a:	ea2b 0707 	bic.w	r7, fp, r7
 800162e:	ea47 070a 	orr.w	r7, r7, sl
 8001632:	6257      	str	r7, [r2, #36]	; 0x24
 8001634:	e7d1      	b.n	80015da <LL_GPIO_Init+0xe4>
	...

08001638 <LL_RCC_HSI_IsReady>:
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001638:	4b02      	ldr	r3, [pc, #8]	; (8001644 <LL_RCC_HSI_IsReady+0xc>)
 800163a:	6818      	ldr	r0, [r3, #0]
}
 800163c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800

08001648 <LL_RCC_LSE_IsReady>:
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001648:	4b02      	ldr	r3, [pc, #8]	; (8001654 <LL_RCC_LSE_IsReady+0xc>)
 800164a:	6f18      	ldr	r0, [r3, #112]	; 0x70
}
 800164c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800

08001658 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800165a:	4a04      	ldr	r2, [pc, #16]	; (800166c <RCC_GetHCLKClockFreq+0x14>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001662:	5cd3      	ldrb	r3, [r2, r3]
}
 8001664:	40d8      	lsrs	r0, r3
 8001666:	4770      	bx	lr
 8001668:	40023800 	.word	0x40023800
 800166c:	08001a58 	.word	0x08001a58

08001670 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001670:	4b03      	ldr	r3, [pc, #12]	; (8001680 <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001672:	4a04      	ldr	r2, [pc, #16]	; (8001684 <RCC_GetPCLK1ClockFreq+0x14>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800167a:	5cd3      	ldrb	r3, [r2, r3]
}
 800167c:	40d8      	lsrs	r0, r3
 800167e:	4770      	bx	lr
 8001680:	40023800 	.word	0x40023800
 8001684:	08001a68 	.word	0x08001a68

08001688 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800168a:	4a04      	ldr	r2, [pc, #16]	; (800169c <RCC_GetPCLK2ClockFreq+0x14>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001692:	5cd3      	ldrb	r3, [r2, r3]
}
 8001694:	40d8      	lsrs	r0, r3
 8001696:	4770      	bx	lr
 8001698:	40023800 	.word	0x40023800
 800169c:	08001a68 	.word	0x08001a68

080016a0 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <RCC_PLL_GetFreqDomain_SYS+0x34>)
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80016a2:	490d      	ldr	r1, [pc, #52]	; (80016d8 <RCC_PLL_GetFreqDomain_SYS+0x38>)
 80016a4:	6858      	ldr	r0, [r3, #4]
 80016a6:	4a0d      	ldr	r2, [pc, #52]	; (80016dc <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 80016a8:	f400 0080 	and.w	r0, r0, #4194304	; 0x400000
 80016ac:	2800      	cmp	r0, #0
 80016ae:	bf08      	it	eq
 80016b0:	460a      	moveq	r2, r1
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80016b2:	6859      	ldr	r1, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80016b4:	6858      	ldr	r0, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80016b6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80016ba:	685b      	ldr	r3, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80016bc:	f3c0 1088 	ubfx	r0, r0, #6, #9

    default:
      pllinputfreq = HSI_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80016c0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80016c4:	fbb2 f2f1 	udiv	r2, r2, r1
 80016c8:	3301      	adds	r3, #1
 80016ca:	4350      	muls	r0, r2
 80016cc:	005b      	lsls	r3, r3, #1
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 80016ce:	fbb0 f0f3 	udiv	r0, r0, r3
 80016d2:	4770      	bx	lr
 80016d4:	40023800 	.word	0x40023800
 80016d8:	00f42400 	.word	0x00f42400
 80016dc:	017d7840 	.word	0x017d7840

080016e0 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <RCC_GetSystemClockFreq+0x1c>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d003      	beq.n	80016f4 <RCC_GetSystemClockFreq+0x14>
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d003      	beq.n	80016f8 <RCC_GetSystemClockFreq+0x18>
      frequency = HSI_VALUE;
 80016f0:	4803      	ldr	r0, [pc, #12]	; (8001700 <RCC_GetSystemClockFreq+0x20>)
}
 80016f2:	4770      	bx	lr
      frequency = HSE_VALUE;
 80016f4:	4803      	ldr	r0, [pc, #12]	; (8001704 <RCC_GetSystemClockFreq+0x24>)
 80016f6:	4770      	bx	lr
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80016f8:	f7ff bfd2 	b.w	80016a0 <RCC_PLL_GetFreqDomain_SYS>
 80016fc:	40023800 	.word	0x40023800
 8001700:	00f42400 	.word	0x00f42400
 8001704:	017d7840 	.word	0x017d7840

08001708 <LL_RCC_GetUSARTClockFreq>:
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001708:	2803      	cmp	r0, #3
{
 800170a:	b508      	push	{r3, lr}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800170c:	d128      	bne.n	8001760 <LL_RCC_GetUSARTClockFreq+0x58>
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 800170e:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <LL_RCC_GetUSARTClockFreq+0xd8>)
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001710:	4a34      	ldr	r2, [pc, #208]	; (80017e4 <LL_RCC_GetUSARTClockFreq+0xdc>)
 8001712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800171e:	4293      	cmp	r3, r2
 8001720:	d009      	beq.n	8001736 <LL_RCC_GetUSARTClockFreq+0x2e>
 8001722:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8001726:	d00c      	beq.n	8001742 <LL_RCC_GetUSARTClockFreq+0x3a>
 8001728:	3a01      	subs	r2, #1
 800172a:	4293      	cmp	r3, r2
 800172c:	d110      	bne.n	8001750 <LL_RCC_GetUSARTClockFreq+0x48>
}
 800172e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usart_frequency = RCC_GetSystemClockFreq();
 8001732:	f7ff bfd5 	b.w	80016e0 <RCC_GetSystemClockFreq>
        if (LL_RCC_HSI_IsReady())
 8001736:	f7ff ff7f 	bl	8001638 <LL_RCC_HSI_IsReady>
 800173a:	2800      	cmp	r0, #0
 800173c:	d14e      	bne.n	80017dc <LL_RCC_GetUSARTClockFreq+0xd4>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800173e:	2000      	movs	r0, #0
}
 8001740:	bd08      	pop	{r3, pc}
        if (LL_RCC_LSE_IsReady())
 8001742:	f7ff ff81 	bl	8001648 <LL_RCC_LSE_IsReady>
 8001746:	2800      	cmp	r0, #0
 8001748:	d0f9      	beq.n	800173e <LL_RCC_GetUSARTClockFreq+0x36>
          usart_frequency = LSE_VALUE;
 800174a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return usart_frequency;
 800174e:	e7f7      	b.n	8001740 <LL_RCC_GetUSARTClockFreq+0x38>
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001750:	f7ff ffc6 	bl	80016e0 <RCC_GetSystemClockFreq>
 8001754:	f7ff ff80 	bl	8001658 <RCC_GetHCLKClockFreq>
}
 8001758:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800175c:	f7ff bf94 	b.w	8001688 <RCC_GetPCLK2ClockFreq>
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001760:	280c      	cmp	r0, #12
 8001762:	d117      	bne.n	8001794 <LL_RCC_GetUSARTClockFreq+0x8c>
 8001764:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <LL_RCC_GetUSARTClockFreq+0xd8>)
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001766:	4a20      	ldr	r2, [pc, #128]	; (80017e8 <LL_RCC_GetUSARTClockFreq+0xe0>)
 8001768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800176c:	f003 030c 	and.w	r3, r3, #12
 8001770:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8001774:	4293      	cmp	r3, r2
 8001776:	d0de      	beq.n	8001736 <LL_RCC_GetUSARTClockFreq+0x2e>
 8001778:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 800177c:	d0e1      	beq.n	8001742 <LL_RCC_GetUSARTClockFreq+0x3a>
 800177e:	3a04      	subs	r2, #4
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001780:	4293      	cmp	r3, r2
 8001782:	d0d4      	beq.n	800172e <LL_RCC_GetUSARTClockFreq+0x26>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001784:	f7ff ffac 	bl	80016e0 <RCC_GetSystemClockFreq>
 8001788:	f7ff ff66 	bl	8001658 <RCC_GetHCLKClockFreq>
}
 800178c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001790:	f7ff bf6e 	b.w	8001670 <RCC_GetPCLK1ClockFreq>
  else if (USARTxSource == LL_RCC_USART6_CLKSOURCE)
 8001794:	f5b0 6f40 	cmp.w	r0, #3072	; 0xc00
 8001798:	d10f      	bne.n	80017ba <LL_RCC_GetUSARTClockFreq+0xb2>
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <LL_RCC_GetUSARTClockFreq+0xd8>)
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800179c:	4a13      	ldr	r2, [pc, #76]	; (80017ec <LL_RCC_GetUSARTClockFreq+0xe4>)
 800179e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017a6:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d0c3      	beq.n	8001736 <LL_RCC_GetUSARTClockFreq+0x2e>
 80017ae:	f1b3 2f0c 	cmp.w	r3, #201329664	; 0xc000c00
 80017b2:	d0c6      	beq.n	8001742 <LL_RCC_GetUSARTClockFreq+0x3a>
 80017b4:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80017b8:	e7b7      	b.n	800172a <LL_RCC_GetUSARTClockFreq+0x22>
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80017ba:	2830      	cmp	r0, #48	; 0x30
 80017bc:	d1bf      	bne.n	800173e <LL_RCC_GetUSARTClockFreq+0x36>
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <LL_RCC_GetUSARTClockFreq+0xd8>)
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80017c0:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <LL_RCC_GetUSARTClockFreq+0xe8>)
 80017c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80017ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d0b1      	beq.n	8001736 <LL_RCC_GetUSARTClockFreq+0x2e>
 80017d2:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80017d6:	d0b4      	beq.n	8001742 <LL_RCC_GetUSARTClockFreq+0x3a>
 80017d8:	3a10      	subs	r2, #16
 80017da:	e7d1      	b.n	8001780 <LL_RCC_GetUSARTClockFreq+0x78>
          usart_frequency = HSI_VALUE;
 80017dc:	4805      	ldr	r0, [pc, #20]	; (80017f4 <LL_RCC_GetUSARTClockFreq+0xec>)
 80017de:	e7af      	b.n	8001740 <LL_RCC_GetUSARTClockFreq+0x38>
 80017e0:	40023800 	.word	0x40023800
 80017e4:	00030002 	.word	0x00030002
 80017e8:	000c0008 	.word	0x000c0008
 80017ec:	0c000800 	.word	0x0c000800
 80017f0:	00300020 	.word	0x00300020
 80017f4:	00f42400 	.word	0x00f42400

080017f8 <LL_RCC_GetUARTClockFreq>:
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80017f8:	28c0      	cmp	r0, #192	; 0xc0
{
 80017fa:	b508      	push	{r3, lr}
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80017fc:	d128      	bne.n	8001850 <LL_RCC_GetUARTClockFreq+0x58>
 80017fe:	4b32      	ldr	r3, [pc, #200]	; (80018c8 <LL_RCC_GetUARTClockFreq+0xd0>)
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8001800:	4a32      	ldr	r2, [pc, #200]	; (80018cc <LL_RCC_GetUARTClockFreq+0xd4>)
 8001802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001806:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800180a:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800180e:	4293      	cmp	r3, r2
 8001810:	d009      	beq.n	8001826 <LL_RCC_GetUARTClockFreq+0x2e>
 8001812:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8001816:	d00c      	beq.n	8001832 <LL_RCC_GetUARTClockFreq+0x3a>
 8001818:	3a40      	subs	r2, #64	; 0x40
 800181a:	4293      	cmp	r3, r2
 800181c:	d110      	bne.n	8001840 <LL_RCC_GetUARTClockFreq+0x48>
}
 800181e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        uart_frequency = RCC_GetSystemClockFreq();
 8001822:	f7ff bf5d 	b.w	80016e0 <RCC_GetSystemClockFreq>
        if (LL_RCC_HSI_IsReady())
 8001826:	f7ff ff07 	bl	8001638 <LL_RCC_HSI_IsReady>
 800182a:	2800      	cmp	r0, #0
 800182c:	d149      	bne.n	80018c2 <LL_RCC_GetUARTClockFreq+0xca>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800182e:	2000      	movs	r0, #0
}
 8001830:	bd08      	pop	{r3, pc}
        if (LL_RCC_LSE_IsReady())
 8001832:	f7ff ff09 	bl	8001648 <LL_RCC_LSE_IsReady>
 8001836:	2800      	cmp	r0, #0
 8001838:	d0f9      	beq.n	800182e <LL_RCC_GetUARTClockFreq+0x36>
          uart_frequency = LSE_VALUE;
 800183a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return uart_frequency;
 800183e:	e7f7      	b.n	8001830 <LL_RCC_GetUARTClockFreq+0x38>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001840:	f7ff ff4e 	bl	80016e0 <RCC_GetSystemClockFreq>
 8001844:	f7ff ff08 	bl	8001658 <RCC_GetHCLKClockFreq>
}
 8001848:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800184c:	f7ff bf10 	b.w	8001670 <RCC_GetPCLK1ClockFreq>
  else if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8001850:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8001854:	d10f      	bne.n	8001876 <LL_RCC_GetUARTClockFreq+0x7e>
 8001856:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <LL_RCC_GetUARTClockFreq+0xd0>)
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8001858:	4a1d      	ldr	r2, [pc, #116]	; (80018d0 <LL_RCC_GetUARTClockFreq+0xd8>)
 800185a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001862:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8001866:	4293      	cmp	r3, r2
 8001868:	d0dd      	beq.n	8001826 <LL_RCC_GetUARTClockFreq+0x2e>
 800186a:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800186e:	d0e0      	beq.n	8001832 <LL_RCC_GetUARTClockFreq+0x3a>
 8001870:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8001874:	e7d1      	b.n	800181a <LL_RCC_GetUARTClockFreq+0x22>
  else if (UARTxSource == LL_RCC_UART7_CLKSOURCE)
 8001876:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
 800187a:	d10f      	bne.n	800189c <LL_RCC_GetUARTClockFreq+0xa4>
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <LL_RCC_GetUARTClockFreq+0xd0>)
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800187e:	4a15      	ldr	r2, [pc, #84]	; (80018d4 <LL_RCC_GetUARTClockFreq+0xdc>)
 8001880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001884:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001888:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800188c:	4293      	cmp	r3, r2
 800188e:	d0ca      	beq.n	8001826 <LL_RCC_GetUARTClockFreq+0x2e>
 8001890:	f1b3 2f30 	cmp.w	r3, #805318656	; 0x30003000
 8001894:	d0cd      	beq.n	8001832 <LL_RCC_GetUARTClockFreq+0x3a>
 8001896:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 800189a:	e7be      	b.n	800181a <LL_RCC_GetUARTClockFreq+0x22>
    if (UARTxSource == LL_RCC_UART8_CLKSOURCE)
 800189c:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 80018a0:	d1c5      	bne.n	800182e <LL_RCC_GetUARTClockFreq+0x36>
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <LL_RCC_GetUARTClockFreq+0xd0>)
      switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80018a4:	4a0c      	ldr	r2, [pc, #48]	; (80018d8 <LL_RCC_GetUARTClockFreq+0xe0>)
 80018a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018ae:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d0b7      	beq.n	8001826 <LL_RCC_GetUARTClockFreq+0x2e>
 80018b6:	f1b3 2fc0 	cmp.w	r3, #3221274624	; 0xc000c000
 80018ba:	d0ba      	beq.n	8001832 <LL_RCC_GetUARTClockFreq+0x3a>
 80018bc:	f5a2 4280 	sub.w	r2, r2, #16384	; 0x4000
 80018c0:	e7ab      	b.n	800181a <LL_RCC_GetUARTClockFreq+0x22>
          uart_frequency = HSI_VALUE;
 80018c2:	4806      	ldr	r0, [pc, #24]	; (80018dc <LL_RCC_GetUARTClockFreq+0xe4>)
 80018c4:	e7b4      	b.n	8001830 <LL_RCC_GetUARTClockFreq+0x38>
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800
 80018cc:	00c00080 	.word	0x00c00080
 80018d0:	03000200 	.word	0x03000200
 80018d4:	30002000 	.word	0x30002000
 80018d8:	c0008000 	.word	0xc0008000
 80018dc:	00f42400 	.word	0x00f42400

080018e0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80018e0:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80018e2:	6803      	ldr	r3, [r0, #0]
 80018e4:	4604      	mov	r4, r0
 80018e6:	460d      	mov	r5, r1
 80018e8:	07db      	lsls	r3, r3, #31
 80018ea:	d501      	bpl.n	80018f0 <LL_USART_Init+0x10>
  ErrorStatus status = ERROR;
 80018ec:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 80018ee:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(USARTx->CR1,
 80018f0:	68ea      	ldr	r2, [r5, #12]
 80018f2:	686b      	ldr	r3, [r5, #4]
 80018f4:	6801      	ldr	r1, [r0, #0]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	692a      	ldr	r2, [r5, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	69aa      	ldr	r2, [r5, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	4a2d      	ldr	r2, [pc, #180]	; (80019b8 <LL_USART_Init+0xd8>)
 8001902:	400a      	ands	r2, r1
 8001904:	4313      	orrs	r3, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001906:	68aa      	ldr	r2, [r5, #8]
 8001908:	6003      	str	r3, [r0, #0]
 800190a:	6843      	ldr	r3, [r0, #4]
 800190c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001910:	4313      	orrs	r3, r2
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001912:	696a      	ldr	r2, [r5, #20]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001914:	6043      	str	r3, [r0, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001916:	6883      	ldr	r3, [r0, #8]
 8001918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800191c:	4313      	orrs	r3, r2
 800191e:	6083      	str	r3, [r0, #8]
    if (USARTx == USART1)
 8001920:	4b26      	ldr	r3, [pc, #152]	; (80019bc <LL_USART_Init+0xdc>)
 8001922:	4298      	cmp	r0, r3
 8001924:	d119      	bne.n	800195a <LL_USART_Init+0x7a>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001926:	2003      	movs	r0, #3
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8001928:	f7ff feee 	bl	8001708 <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800192c:	2800      	cmp	r0, #0
 800192e:	d0dd      	beq.n	80018ec <LL_USART_Init+0xc>
        && (USART_InitStruct->BaudRate != 0U))
 8001930:	682a      	ldr	r2, [r5, #0]
 8001932:	2a00      	cmp	r2, #0
 8001934:	d0da      	beq.n	80018ec <LL_USART_Init+0xc>
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001936:	69a9      	ldr	r1, [r5, #24]
 8001938:	0853      	lsrs	r3, r2, #1
 800193a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800193e:	d135      	bne.n	80019ac <LL_USART_Init+0xcc>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001940:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    brrtemp = usartdiv & 0xFFF0U;
 8001944:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001948:	fbb0 f0f2 	udiv	r0, r0, r2
    brrtemp = usartdiv & 0xFFF0U;
 800194c:	4003      	ands	r3, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800194e:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8001952:	4318      	orrs	r0, r3
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001954:	60e0      	str	r0, [r4, #12]
      status = SUCCESS;
 8001956:	2000      	movs	r0, #0
 8001958:	e7c9      	b.n	80018ee <LL_USART_Init+0xe>
    else if (USARTx == USART2)
 800195a:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <LL_USART_Init+0xe0>)
 800195c:	4298      	cmp	r0, r3
 800195e:	d101      	bne.n	8001964 <LL_USART_Init+0x84>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8001960:	200c      	movs	r0, #12
 8001962:	e7e1      	b.n	8001928 <LL_USART_Init+0x48>
    else if (USARTx == USART3)
 8001964:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <LL_USART_Init+0xe4>)
 8001966:	4298      	cmp	r0, r3
 8001968:	d101      	bne.n	800196e <LL_USART_Init+0x8e>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800196a:	2030      	movs	r0, #48	; 0x30
 800196c:	e7dc      	b.n	8001928 <LL_USART_Init+0x48>
    else if (USARTx == UART4)
 800196e:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <LL_USART_Init+0xe8>)
 8001970:	4298      	cmp	r0, r3
 8001972:	d103      	bne.n	800197c <LL_USART_Init+0x9c>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8001974:	20c0      	movs	r0, #192	; 0xc0
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 8001976:	f7ff ff3f 	bl	80017f8 <LL_RCC_GetUARTClockFreq>
 800197a:	e7d7      	b.n	800192c <LL_USART_Init+0x4c>
    else if (USARTx == UART5)
 800197c:	4b13      	ldr	r3, [pc, #76]	; (80019cc <LL_USART_Init+0xec>)
 800197e:	4298      	cmp	r0, r3
 8001980:	d102      	bne.n	8001988 <LL_USART_Init+0xa8>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8001982:	f44f 7040 	mov.w	r0, #768	; 0x300
 8001986:	e7f6      	b.n	8001976 <LL_USART_Init+0x96>
    else if (USARTx == USART6)
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <LL_USART_Init+0xf0>)
 800198a:	4298      	cmp	r0, r3
 800198c:	d102      	bne.n	8001994 <LL_USART_Init+0xb4>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART6_CLKSOURCE);
 800198e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001992:	e7c9      	b.n	8001928 <LL_USART_Init+0x48>
    else if (USARTx == UART7)
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <LL_USART_Init+0xf4>)
 8001996:	4298      	cmp	r0, r3
 8001998:	d102      	bne.n	80019a0 <LL_USART_Init+0xc0>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART7_CLKSOURCE);
 800199a:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800199e:	e7ea      	b.n	8001976 <LL_USART_Init+0x96>
    else if (USARTx == UART8)
 80019a0:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <LL_USART_Init+0xf8>)
 80019a2:	4298      	cmp	r0, r3
 80019a4:	d1a2      	bne.n	80018ec <LL_USART_Init+0xc>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 80019a6:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 80019aa:	e7e4      	b.n	8001976 <LL_USART_Init+0x96>
 80019ac:	4418      	add	r0, r3
 80019ae:	fbb0 f0f2 	udiv	r0, r0, r2
 80019b2:	b280      	uxth	r0, r0
 80019b4:	e7ce      	b.n	8001954 <LL_USART_Init+0x74>
 80019b6:	bf00      	nop
 80019b8:	efff69f3 	.word	0xefff69f3
 80019bc:	40011000 	.word	0x40011000
 80019c0:	40004400 	.word	0x40004400
 80019c4:	40004800 	.word	0x40004800
 80019c8:	40004c00 	.word	0x40004c00
 80019cc:	40005000 	.word	0x40005000
 80019d0:	40011400 	.word	0x40011400
 80019d4:	40007800 	.word	0x40007800
 80019d8:	40007c00 	.word	0x40007c00

080019dc <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80019dc:	4b01      	ldr	r3, [pc, #4]	; (80019e4 <LL_SetSystemCoreClock+0x8>)
 80019de:	6018      	str	r0, [r3, #0]
}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000008 	.word	0x20000008

080019e8 <__libc_init_array>:
 80019e8:	b570      	push	{r4, r5, r6, lr}
 80019ea:	4e0d      	ldr	r6, [pc, #52]	; (8001a20 <__libc_init_array+0x38>)
 80019ec:	4c0d      	ldr	r4, [pc, #52]	; (8001a24 <__libc_init_array+0x3c>)
 80019ee:	1ba4      	subs	r4, r4, r6
 80019f0:	10a4      	asrs	r4, r4, #2
 80019f2:	2500      	movs	r5, #0
 80019f4:	42a5      	cmp	r5, r4
 80019f6:	d109      	bne.n	8001a0c <__libc_init_array+0x24>
 80019f8:	4e0b      	ldr	r6, [pc, #44]	; (8001a28 <__libc_init_array+0x40>)
 80019fa:	4c0c      	ldr	r4, [pc, #48]	; (8001a2c <__libc_init_array+0x44>)
 80019fc:	f000 f820 	bl	8001a40 <_init>
 8001a00:	1ba4      	subs	r4, r4, r6
 8001a02:	10a4      	asrs	r4, r4, #2
 8001a04:	2500      	movs	r5, #0
 8001a06:	42a5      	cmp	r5, r4
 8001a08:	d105      	bne.n	8001a16 <__libc_init_array+0x2e>
 8001a0a:	bd70      	pop	{r4, r5, r6, pc}
 8001a0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a10:	4798      	blx	r3
 8001a12:	3501      	adds	r5, #1
 8001a14:	e7ee      	b.n	80019f4 <__libc_init_array+0xc>
 8001a16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a1a:	4798      	blx	r3
 8001a1c:	3501      	adds	r5, #1
 8001a1e:	e7f2      	b.n	8001a06 <__libc_init_array+0x1e>
 8001a20:	08001a70 	.word	0x08001a70
 8001a24:	08001a70 	.word	0x08001a70
 8001a28:	08001a70 	.word	0x08001a70
 8001a2c:	08001a74 	.word	0x08001a74

08001a30 <memset>:
 8001a30:	4402      	add	r2, r0
 8001a32:	4603      	mov	r3, r0
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d100      	bne.n	8001a3a <memset+0xa>
 8001a38:	4770      	bx	lr
 8001a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8001a3e:	e7f9      	b.n	8001a34 <memset+0x4>

08001a40 <_init>:
 8001a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a42:	bf00      	nop
 8001a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a46:	bc08      	pop	{r3}
 8001a48:	469e      	mov	lr, r3
 8001a4a:	4770      	bx	lr

08001a4c <_fini>:
 8001a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a4e:	bf00      	nop
 8001a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a52:	bc08      	pop	{r3}
 8001a54:	469e      	mov	lr, r3
 8001a56:	4770      	bx	lr
