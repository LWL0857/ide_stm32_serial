
SerialCommunication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003110  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003308  08003308  00013308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800332c  0800332c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800332c  0800332c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800332c  0800332c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800332c  0800332c  0001332c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003330  08003330  00013330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000010  08003344  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08003344  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f5c9  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027b6  00000000  00000000  0002f607  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001160  00000000  00000000  00031dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001008  00000000  00000000  00032f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a487  00000000  00000000  00033f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d6c5  00000000  00000000  0005e3af  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010230c  00000000  00000000  0006ba74  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016dd80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046ac  00000000  00000000  0016ddfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	080032f0 	.word	0x080032f0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	080032f0 	.word	0x080032f0

08000238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__NVIC_GetPriorityGrouping+0x18>)
 800023e:	68db      	ldr	r3, [r3, #12]
 8000240:	0a1b      	lsrs	r3, r3, #8
 8000242:	f003 0307 	and.w	r3, r3, #7
}
 8000246:	4618      	mov	r0, r3
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	e000ed00 	.word	0xe000ed00

08000254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800025e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000262:	2b00      	cmp	r3, #0
 8000264:	db0b      	blt.n	800027e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	f003 021f 	and.w	r2, r3, #31
 800026c:	4907      	ldr	r1, [pc, #28]	; (800028c <__NVIC_EnableIRQ+0x38>)
 800026e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000272:	095b      	lsrs	r3, r3, #5
 8000274:	2001      	movs	r0, #1
 8000276:	fa00 f202 	lsl.w	r2, r0, r2
 800027a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800027e:	bf00      	nop
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	e000e100 	.word	0xe000e100

08000290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	6039      	str	r1, [r7, #0]
 800029a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800029c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	db0a      	blt.n	80002ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	490c      	ldr	r1, [pc, #48]	; (80002dc <__NVIC_SetPriority+0x4c>)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	0112      	lsls	r2, r2, #4
 80002b0:	b2d2      	uxtb	r2, r2
 80002b2:	440b      	add	r3, r1
 80002b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002b8:	e00a      	b.n	80002d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	b2da      	uxtb	r2, r3
 80002be:	4908      	ldr	r1, [pc, #32]	; (80002e0 <__NVIC_SetPriority+0x50>)
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	f003 030f 	and.w	r3, r3, #15
 80002c6:	3b04      	subs	r3, #4
 80002c8:	0112      	lsls	r2, r2, #4
 80002ca:	b2d2      	uxtb	r2, r2
 80002cc:	440b      	add	r3, r1
 80002ce:	761a      	strb	r2, [r3, #24]
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	e000e100 	.word	0xe000e100
 80002e0:	e000ed00 	.word	0xe000ed00

080002e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b089      	sub	sp, #36	; 0x24
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	60f8      	str	r0, [r7, #12]
 80002ec:	60b9      	str	r1, [r7, #8]
 80002ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	f003 0307 	and.w	r3, r3, #7
 80002f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002f8:	69fb      	ldr	r3, [r7, #28]
 80002fa:	f1c3 0307 	rsb	r3, r3, #7
 80002fe:	2b04      	cmp	r3, #4
 8000300:	bf28      	it	cs
 8000302:	2304      	movcs	r3, #4
 8000304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000306:	69fb      	ldr	r3, [r7, #28]
 8000308:	3304      	adds	r3, #4
 800030a:	2b06      	cmp	r3, #6
 800030c:	d902      	bls.n	8000314 <NVIC_EncodePriority+0x30>
 800030e:	69fb      	ldr	r3, [r7, #28]
 8000310:	3b03      	subs	r3, #3
 8000312:	e000      	b.n	8000316 <NVIC_EncodePriority+0x32>
 8000314:	2300      	movs	r3, #0
 8000316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000318:	f04f 32ff 	mov.w	r2, #4294967295
 800031c:	69bb      	ldr	r3, [r7, #24]
 800031e:	fa02 f303 	lsl.w	r3, r2, r3
 8000322:	43da      	mvns	r2, r3
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	401a      	ands	r2, r3
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800032c:	f04f 31ff 	mov.w	r1, #4294967295
 8000330:	697b      	ldr	r3, [r7, #20]
 8000332:	fa01 f303 	lsl.w	r3, r1, r3
 8000336:	43d9      	mvns	r1, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800033c:	4313      	orrs	r3, r2
         );
}
 800033e:	4618      	mov	r0, r3
 8000340:	3724      	adds	r7, #36	; 0x24
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
	...

0800034c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000354:	4b08      	ldr	r3, [pc, #32]	; (8000378 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000358:	4907      	ldr	r1, [pc, #28]	; (8000378 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4313      	orrs	r3, r2
 800035e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000360:	4b05      	ldr	r3, [pc, #20]	; (8000378 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4013      	ands	r3, r2
 8000368:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800036a:	68fb      	ldr	r3, [r7, #12]
}
 800036c:	bf00      	nop
 800036e:	3714      	adds	r7, #20
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr
 8000378:	40023800 	.word	0x40023800

0800037c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8000380:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000384:	f7ff ffe2 	bl	800034c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000388:	f7ff ff56 	bl	8000238 <__NVIC_GetPriorityGrouping>
 800038c:	4603      	mov	r3, r0
 800038e:	2200      	movs	r2, #0
 8000390:	2105      	movs	r1, #5
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ffa6 	bl	80002e4 <NVIC_EncodePriority>
 8000398:	4603      	mov	r3, r0
 800039a:	4619      	mov	r1, r3
 800039c:	2044      	movs	r0, #68	; 0x44
 800039e:	f7ff ff77 	bl	8000290 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80003a2:	2044      	movs	r0, #68	; 0x44
 80003a4:	f7ff ff56 	bl	8000254 <__NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80003a8:	f7ff ff46 	bl	8000238 <__NVIC_GetPriorityGrouping>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2200      	movs	r2, #0
 80003b0:	2105      	movs	r1, #5
 80003b2:	4618      	mov	r0, r3
 80003b4:	f7ff ff96 	bl	80002e4 <NVIC_EncodePriority>
 80003b8:	4603      	mov	r3, r0
 80003ba:	4619      	mov	r1, r3
 80003bc:	2046      	movs	r0, #70	; 0x46
 80003be:	f7ff ff67 	bl	8000290 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80003c2:	2046      	movs	r0, #70	; 0x46
 80003c4:	f7ff ff46 	bl	8000254 <__NVIC_EnableIRQ>

}
 80003c8:	bf00      	nop
 80003ca:	bd80      	pop	{r7, pc}

080003cc <LL_AHB1_GRP1_EnableClock>:
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80003d4:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80003d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003d8:	4907      	ldr	r1, [pc, #28]	; (80003f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4313      	orrs	r3, r2
 80003de:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80003e0:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80003e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4013      	ands	r3, r2
 80003e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003ea:	68fb      	ldr	r3, [r7, #12]
}
 80003ec:	bf00      	nop
 80003ee:	3714      	adds	r7, #20
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	40023800 	.word	0x40023800

080003fc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b086      	sub	sp, #24
 8000400:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000402:	463b      	mov	r3, r7
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	605a      	str	r2, [r3, #4]
 800040a:	609a      	str	r2, [r3, #8]
 800040c:	60da      	str	r2, [r3, #12]
 800040e:	611a      	str	r2, [r3, #16]
 8000410:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8000412:	2010      	movs	r0, #16
 8000414:	f7ff ffda 	bl	80003cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000418:	2004      	movs	r0, #4
 800041a:	f7ff ffd7 	bl	80003cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800041e:	2080      	movs	r0, #128	; 0x80
 8000420:	f7ff ffd4 	bl	80003cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000424:	2001      	movs	r0, #1
 8000426:	f7ff ffd1 	bl	80003cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800042a:	2002      	movs	r0, #2
 800042c:	f7ff ffce 	bl	80003cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000430:	2008      	movs	r0, #8
 8000432:	f7ff ffcb 	bl	80003cc <LL_AHB1_GRP1_EnableClock>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000436:	2304      	movs	r3, #4
 8000438:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800043a:	2303      	movs	r3, #3
 800043c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800043e:	2300      	movs	r3, #0
 8000440:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000442:	463b      	mov	r3, r7
 8000444:	4619      	mov	r1, r3
 8000446:	48bb      	ldr	r0, [pc, #748]	; (8000734 <MX_GPIO_Init+0x338>)
 8000448:	f002 fa53 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800044c:	2308      	movs	r3, #8
 800044e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000450:	2303      	movs	r3, #3
 8000452:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000454:	2300      	movs	r3, #0
 8000456:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000458:	463b      	mov	r3, r7
 800045a:	4619      	mov	r1, r3
 800045c:	48b5      	ldr	r0, [pc, #724]	; (8000734 <MX_GPIO_Init+0x338>)
 800045e:	f002 fa48 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000462:	2310      	movs	r3, #16
 8000464:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000466:	2303      	movs	r3, #3
 8000468:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800046a:	2300      	movs	r3, #0
 800046c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800046e:	463b      	mov	r3, r7
 8000470:	4619      	mov	r1, r3
 8000472:	48b0      	ldr	r0, [pc, #704]	; (8000734 <MX_GPIO_Init+0x338>)
 8000474:	f002 fa3d 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000478:	2320      	movs	r3, #32
 800047a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800047c:	2303      	movs	r3, #3
 800047e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000480:	2300      	movs	r3, #0
 8000482:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000484:	463b      	mov	r3, r7
 8000486:	4619      	mov	r1, r3
 8000488:	48aa      	ldr	r0, [pc, #680]	; (8000734 <MX_GPIO_Init+0x338>)
 800048a:	f002 fa32 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800048e:	2340      	movs	r3, #64	; 0x40
 8000490:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000492:	2303      	movs	r3, #3
 8000494:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000496:	2300      	movs	r3, #0
 8000498:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800049a:	463b      	mov	r3, r7
 800049c:	4619      	mov	r1, r3
 800049e:	48a5      	ldr	r0, [pc, #660]	; (8000734 <MX_GPIO_Init+0x338>)
 80004a0:	f002 fa27 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 80004a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004a8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80004aa:	2303      	movs	r3, #3
 80004ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004ae:	2300      	movs	r3, #0
 80004b0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004b2:	463b      	mov	r3, r7
 80004b4:	4619      	mov	r1, r3
 80004b6:	48a0      	ldr	r0, [pc, #640]	; (8000738 <MX_GPIO_Init+0x33c>)
 80004b8:	f002 fa1b 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 80004bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80004c0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80004c2:	2303      	movs	r3, #3
 80004c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004c6:	2300      	movs	r3, #0
 80004c8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ca:	463b      	mov	r3, r7
 80004cc:	4619      	mov	r1, r3
 80004ce:	489a      	ldr	r0, [pc, #616]	; (8000738 <MX_GPIO_Init+0x33c>)
 80004d0:	f002 fa0f 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80004d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004d8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80004da:	2303      	movs	r3, #3
 80004dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004de:	2300      	movs	r3, #0
 80004e0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004e2:	463b      	mov	r3, r7
 80004e4:	4619      	mov	r1, r3
 80004e6:	4894      	ldr	r0, [pc, #592]	; (8000738 <MX_GPIO_Init+0x33c>)
 80004e8:	f002 fa03 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80004ec:	2301      	movs	r3, #1
 80004ee:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80004f0:	2303      	movs	r3, #3
 80004f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004f4:	2300      	movs	r3, #0
 80004f6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004f8:	463b      	mov	r3, r7
 80004fa:	4619      	mov	r1, r3
 80004fc:	488e      	ldr	r0, [pc, #568]	; (8000738 <MX_GPIO_Init+0x33c>)
 80004fe:	f002 f9f8 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000502:	2302      	movs	r3, #2
 8000504:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000506:	2303      	movs	r3, #3
 8000508:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800050e:	463b      	mov	r3, r7
 8000510:	4619      	mov	r1, r3
 8000512:	4889      	ldr	r0, [pc, #548]	; (8000738 <MX_GPIO_Init+0x33c>)
 8000514:	f002 f9ed 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000518:	2304      	movs	r3, #4
 800051a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800051c:	2303      	movs	r3, #3
 800051e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000520:	2300      	movs	r3, #0
 8000522:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000524:	463b      	mov	r3, r7
 8000526:	4619      	mov	r1, r3
 8000528:	4883      	ldr	r0, [pc, #524]	; (8000738 <MX_GPIO_Init+0x33c>)
 800052a:	f002 f9e2 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800052e:	2308      	movs	r3, #8
 8000530:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000532:	2303      	movs	r3, #3
 8000534:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000536:	2300      	movs	r3, #0
 8000538:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800053a:	463b      	mov	r3, r7
 800053c:	4619      	mov	r1, r3
 800053e:	487e      	ldr	r0, [pc, #504]	; (8000738 <MX_GPIO_Init+0x33c>)
 8000540:	f002 f9d7 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000544:	2301      	movs	r3, #1
 8000546:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000548:	2303      	movs	r3, #3
 800054a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800054c:	2300      	movs	r3, #0
 800054e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000550:	463b      	mov	r3, r7
 8000552:	4619      	mov	r1, r3
 8000554:	4879      	ldr	r0, [pc, #484]	; (800073c <MX_GPIO_Init+0x340>)
 8000556:	f002 f9cc 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800055a:	2302      	movs	r3, #2
 800055c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800055e:	2303      	movs	r3, #3
 8000560:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000562:	2300      	movs	r3, #0
 8000564:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000566:	463b      	mov	r3, r7
 8000568:	4619      	mov	r1, r3
 800056a:	4874      	ldr	r0, [pc, #464]	; (800073c <MX_GPIO_Init+0x340>)
 800056c:	f002 f9c1 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000570:	2304      	movs	r3, #4
 8000572:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000574:	2303      	movs	r3, #3
 8000576:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000578:	2300      	movs	r3, #0
 800057a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057c:	463b      	mov	r3, r7
 800057e:	4619      	mov	r1, r3
 8000580:	486e      	ldr	r0, [pc, #440]	; (800073c <MX_GPIO_Init+0x340>)
 8000582:	f002 f9b6 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000586:	2308      	movs	r3, #8
 8000588:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800058a:	2303      	movs	r3, #3
 800058c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000592:	463b      	mov	r3, r7
 8000594:	4619      	mov	r1, r3
 8000596:	4869      	ldr	r0, [pc, #420]	; (800073c <MX_GPIO_Init+0x340>)
 8000598:	f002 f9ab 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 800059c:	2310      	movs	r3, #16
 800059e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80005a0:	2303      	movs	r3, #3
 80005a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005a4:	2300      	movs	r3, #0
 80005a6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a8:	463b      	mov	r3, r7
 80005aa:	4619      	mov	r1, r3
 80005ac:	4863      	ldr	r0, [pc, #396]	; (800073c <MX_GPIO_Init+0x340>)
 80005ae:	f002 f9a0 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80005b2:	2320      	movs	r3, #32
 80005b4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80005b6:	2303      	movs	r3, #3
 80005b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005be:	463b      	mov	r3, r7
 80005c0:	4619      	mov	r1, r3
 80005c2:	485e      	ldr	r0, [pc, #376]	; (800073c <MX_GPIO_Init+0x340>)
 80005c4:	f002 f995 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80005c8:	2340      	movs	r3, #64	; 0x40
 80005ca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80005cc:	2303      	movs	r3, #3
 80005ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d4:	463b      	mov	r3, r7
 80005d6:	4619      	mov	r1, r3
 80005d8:	4858      	ldr	r0, [pc, #352]	; (800073c <MX_GPIO_Init+0x340>)
 80005da:	f002 f98a 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80005de:	2380      	movs	r3, #128	; 0x80
 80005e0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80005e2:	2303      	movs	r3, #3
 80005e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005e6:	2300      	movs	r3, #0
 80005e8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ea:	463b      	mov	r3, r7
 80005ec:	4619      	mov	r1, r3
 80005ee:	4853      	ldr	r0, [pc, #332]	; (800073c <MX_GPIO_Init+0x340>)
 80005f0:	f002 f97f 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80005f4:	2310      	movs	r3, #16
 80005f6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80005f8:	2303      	movs	r3, #3
 80005fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000600:	463b      	mov	r3, r7
 8000602:	4619      	mov	r1, r3
 8000604:	484c      	ldr	r0, [pc, #304]	; (8000738 <MX_GPIO_Init+0x33c>)
 8000606:	f002 f974 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800060a:	2320      	movs	r3, #32
 800060c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800060e:	2303      	movs	r3, #3
 8000610:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000616:	463b      	mov	r3, r7
 8000618:	4619      	mov	r1, r3
 800061a:	4847      	ldr	r0, [pc, #284]	; (8000738 <MX_GPIO_Init+0x33c>)
 800061c:	f002 f969 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000620:	2301      	movs	r3, #1
 8000622:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000624:	2303      	movs	r3, #3
 8000626:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062c:	463b      	mov	r3, r7
 800062e:	4619      	mov	r1, r3
 8000630:	4843      	ldr	r0, [pc, #268]	; (8000740 <MX_GPIO_Init+0x344>)
 8000632:	f002 f95e 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000636:	2302      	movs	r3, #2
 8000638:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800063a:	2303      	movs	r3, #3
 800063c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000642:	463b      	mov	r3, r7
 8000644:	4619      	mov	r1, r3
 8000646:	483e      	ldr	r0, [pc, #248]	; (8000740 <MX_GPIO_Init+0x344>)
 8000648:	f002 f953 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800064c:	2304      	movs	r3, #4
 800064e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000650:	2303      	movs	r3, #3
 8000652:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4838      	ldr	r0, [pc, #224]	; (8000740 <MX_GPIO_Init+0x344>)
 800065e:	f002 f948 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000662:	2380      	movs	r3, #128	; 0x80
 8000664:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000666:	2303      	movs	r3, #3
 8000668:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800066e:	463b      	mov	r3, r7
 8000670:	4619      	mov	r1, r3
 8000672:	4830      	ldr	r0, [pc, #192]	; (8000734 <MX_GPIO_Init+0x338>)
 8000674:	f002 f93d 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800067c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800067e:	2303      	movs	r3, #3
 8000680:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000686:	463b      	mov	r3, r7
 8000688:	4619      	mov	r1, r3
 800068a:	482a      	ldr	r0, [pc, #168]	; (8000734 <MX_GPIO_Init+0x338>)
 800068c:	f002 f931 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000690:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000694:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000696:	2303      	movs	r3, #3
 8000698:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800069e:	463b      	mov	r3, r7
 80006a0:	4619      	mov	r1, r3
 80006a2:	4824      	ldr	r0, [pc, #144]	; (8000734 <MX_GPIO_Init+0x338>)
 80006a4:	f002 f925 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80006a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ac:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80006ae:	2303      	movs	r3, #3
 80006b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006b6:	463b      	mov	r3, r7
 80006b8:	4619      	mov	r1, r3
 80006ba:	481e      	ldr	r0, [pc, #120]	; (8000734 <MX_GPIO_Init+0x338>)
 80006bc:	f002 f919 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80006c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006c4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80006c6:	2303      	movs	r3, #3
 80006c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006ce:	463b      	mov	r3, r7
 80006d0:	4619      	mov	r1, r3
 80006d2:	4818      	ldr	r0, [pc, #96]	; (8000734 <MX_GPIO_Init+0x338>)
 80006d4:	f002 f90d 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80006d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006dc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80006de:	2303      	movs	r3, #3
 80006e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006e6:	463b      	mov	r3, r7
 80006e8:	4619      	mov	r1, r3
 80006ea:	4812      	ldr	r0, [pc, #72]	; (8000734 <MX_GPIO_Init+0x338>)
 80006ec:	f002 f901 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 80006f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80006f6:	2303      	movs	r3, #3
 80006f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006fe:	463b      	mov	r3, r7
 8000700:	4619      	mov	r1, r3
 8000702:	480c      	ldr	r0, [pc, #48]	; (8000734 <MX_GPIO_Init+0x338>)
 8000704:	f002 f8f5 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8000708:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800070c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800070e:	2303      	movs	r3, #3
 8000710:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000716:	463b      	mov	r3, r7
 8000718:	4619      	mov	r1, r3
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <MX_GPIO_Init+0x338>)
 800071c:	f002 f8e9 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000724:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000726:	2303      	movs	r3, #3
 8000728:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800072e:	463b      	mov	r3, r7
 8000730:	4619      	mov	r1, r3
 8000732:	e007      	b.n	8000744 <MX_GPIO_Init+0x348>
 8000734:	40021000 	.word	0x40021000
 8000738:	40020800 	.word	0x40020800
 800073c:	40020000 	.word	0x40020000
 8000740:	40020400 	.word	0x40020400
 8000744:	48bc      	ldr	r0, [pc, #752]	; (8000a38 <MX_GPIO_Init+0x63c>)
 8000746:	f002 f8d4 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800074a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800074e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000750:	2303      	movs	r3, #3
 8000752:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000754:	2300      	movs	r3, #0
 8000756:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000758:	463b      	mov	r3, r7
 800075a:	4619      	mov	r1, r3
 800075c:	48b7      	ldr	r0, [pc, #732]	; (8000a3c <MX_GPIO_Init+0x640>)
 800075e:	f002 f8c8 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000762:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000766:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000768:	2303      	movs	r3, #3
 800076a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800076c:	2300      	movs	r3, #0
 800076e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000770:	463b      	mov	r3, r7
 8000772:	4619      	mov	r1, r3
 8000774:	48b1      	ldr	r0, [pc, #708]	; (8000a3c <MX_GPIO_Init+0x640>)
 8000776:	f002 f8bc 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 800077a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000780:	2303      	movs	r3, #3
 8000782:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000784:	2300      	movs	r3, #0
 8000786:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000788:	463b      	mov	r3, r7
 800078a:	4619      	mov	r1, r3
 800078c:	48ab      	ldr	r0, [pc, #684]	; (8000a3c <MX_GPIO_Init+0x640>)
 800078e:	f002 f8b0 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8000792:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000796:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000798:	2303      	movs	r3, #3
 800079a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a0:	463b      	mov	r3, r7
 80007a2:	4619      	mov	r1, r3
 80007a4:	48a5      	ldr	r0, [pc, #660]	; (8000a3c <MX_GPIO_Init+0x640>)
 80007a6:	f002 f8a4 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 80007aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007ae:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80007b0:	2303      	movs	r3, #3
 80007b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007b4:	2300      	movs	r3, #0
 80007b6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	489f      	ldr	r0, [pc, #636]	; (8000a3c <MX_GPIO_Init+0x640>)
 80007be:	f002 f898 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80007c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007c6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80007c8:	2303      	movs	r3, #3
 80007ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007cc:	2300      	movs	r3, #0
 80007ce:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d0:	463b      	mov	r3, r7
 80007d2:	4619      	mov	r1, r3
 80007d4:	4899      	ldr	r0, [pc, #612]	; (8000a3c <MX_GPIO_Init+0x640>)
 80007d6:	f002 f88c 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80007da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007de:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80007e0:	2303      	movs	r3, #3
 80007e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007e4:	2300      	movs	r3, #0
 80007e6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007e8:	463b      	mov	r3, r7
 80007ea:	4619      	mov	r1, r3
 80007ec:	4894      	ldr	r0, [pc, #592]	; (8000a40 <MX_GPIO_Init+0x644>)
 80007ee:	f002 f880 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80007f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007f6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80007f8:	2303      	movs	r3, #3
 80007fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007fc:	2300      	movs	r3, #0
 80007fe:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000800:	463b      	mov	r3, r7
 8000802:	4619      	mov	r1, r3
 8000804:	488e      	ldr	r0, [pc, #568]	; (8000a40 <MX_GPIO_Init+0x644>)
 8000806:	f002 f874 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800080a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800080e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000810:	2303      	movs	r3, #3
 8000812:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000814:	2300      	movs	r3, #0
 8000816:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000818:	463b      	mov	r3, r7
 800081a:	4619      	mov	r1, r3
 800081c:	4888      	ldr	r0, [pc, #544]	; (8000a40 <MX_GPIO_Init+0x644>)
 800081e:	f002 f868 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000822:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000826:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000828:	2303      	movs	r3, #3
 800082a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000830:	463b      	mov	r3, r7
 8000832:	4619      	mov	r1, r3
 8000834:	4882      	ldr	r0, [pc, #520]	; (8000a40 <MX_GPIO_Init+0x644>)
 8000836:	f002 f85c 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 800083a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000840:	2303      	movs	r3, #3
 8000842:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000844:	2300      	movs	r3, #0
 8000846:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000848:	463b      	mov	r3, r7
 800084a:	4619      	mov	r1, r3
 800084c:	487c      	ldr	r0, [pc, #496]	; (8000a40 <MX_GPIO_Init+0x644>)
 800084e:	f002 f850 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8000852:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000856:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000858:	2303      	movs	r3, #3
 800085a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000860:	463b      	mov	r3, r7
 8000862:	4619      	mov	r1, r3
 8000864:	4876      	ldr	r0, [pc, #472]	; (8000a40 <MX_GPIO_Init+0x644>)
 8000866:	f002 f844 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 800086a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800086e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000870:	2303      	movs	r3, #3
 8000872:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000878:	463b      	mov	r3, r7
 800087a:	4619      	mov	r1, r3
 800087c:	4870      	ldr	r0, [pc, #448]	; (8000a40 <MX_GPIO_Init+0x644>)
 800087e:	f002 f838 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000886:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000888:	2303      	movs	r3, #3
 800088a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000890:	463b      	mov	r3, r7
 8000892:	4619      	mov	r1, r3
 8000894:	486a      	ldr	r0, [pc, #424]	; (8000a40 <MX_GPIO_Init+0x644>)
 8000896:	f002 f82c 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800089a:	2340      	movs	r3, #64	; 0x40
 800089c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800089e:	2303      	movs	r3, #3
 80008a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a6:	463b      	mov	r3, r7
 80008a8:	4619      	mov	r1, r3
 80008aa:	4866      	ldr	r0, [pc, #408]	; (8000a44 <MX_GPIO_Init+0x648>)
 80008ac:	f002 f821 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80008b4:	2303      	movs	r3, #3
 80008b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008b8:	2300      	movs	r3, #0
 80008ba:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008bc:	463b      	mov	r3, r7
 80008be:	4619      	mov	r1, r3
 80008c0:	4860      	ldr	r0, [pc, #384]	; (8000a44 <MX_GPIO_Init+0x648>)
 80008c2:	f002 f816 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80008c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80008cc:	2303      	movs	r3, #3
 80008ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008d0:	2300      	movs	r3, #0
 80008d2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d4:	463b      	mov	r3, r7
 80008d6:	4619      	mov	r1, r3
 80008d8:	485a      	ldr	r0, [pc, #360]	; (8000a44 <MX_GPIO_Init+0x648>)
 80008da:	f002 f80a 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80008de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008e2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80008e4:	2303      	movs	r3, #3
 80008e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008e8:	2300      	movs	r3, #0
 80008ea:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ec:	463b      	mov	r3, r7
 80008ee:	4619      	mov	r1, r3
 80008f0:	4854      	ldr	r0, [pc, #336]	; (8000a44 <MX_GPIO_Init+0x648>)
 80008f2:	f001 fffe 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80008f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008fa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80008fc:	2303      	movs	r3, #3
 80008fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	463b      	mov	r3, r7
 8000906:	4619      	mov	r1, r3
 8000908:	484f      	ldr	r0, [pc, #316]	; (8000a48 <MX_GPIO_Init+0x64c>)
 800090a:	f001 fff2 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800090e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000912:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000914:	2303      	movs	r3, #3
 8000916:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	463b      	mov	r3, r7
 800091e:	4619      	mov	r1, r3
 8000920:	4849      	ldr	r0, [pc, #292]	; (8000a48 <MX_GPIO_Init+0x64c>)
 8000922:	f001 ffe6 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800092a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800092c:	2303      	movs	r3, #3
 800092e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000930:	2300      	movs	r3, #0
 8000932:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	463b      	mov	r3, r7
 8000936:	4619      	mov	r1, r3
 8000938:	4843      	ldr	r0, [pc, #268]	; (8000a48 <MX_GPIO_Init+0x64c>)
 800093a:	f001 ffda 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 800093e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000942:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000944:	2303      	movs	r3, #3
 8000946:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000948:	2300      	movs	r3, #0
 800094a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	463b      	mov	r3, r7
 800094e:	4619      	mov	r1, r3
 8000950:	483d      	ldr	r0, [pc, #244]	; (8000a48 <MX_GPIO_Init+0x64c>)
 8000952:	f001 ffce 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8000956:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800095c:	2303      	movs	r3, #3
 800095e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000960:	2300      	movs	r3, #0
 8000962:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	463b      	mov	r3, r7
 8000966:	4619      	mov	r1, r3
 8000968:	4837      	ldr	r0, [pc, #220]	; (8000a48 <MX_GPIO_Init+0x64c>)
 800096a:	f001 ffc2 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800096e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000972:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000974:	2303      	movs	r3, #3
 8000976:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000978:	2300      	movs	r3, #0
 800097a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	463b      	mov	r3, r7
 800097e:	4619      	mov	r1, r3
 8000980:	4831      	ldr	r0, [pc, #196]	; (8000a48 <MX_GPIO_Init+0x64c>)
 8000982:	f001 ffb6 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800098c:	2303      	movs	r3, #3
 800098e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000994:	463b      	mov	r3, r7
 8000996:	4619      	mov	r1, r3
 8000998:	482a      	ldr	r0, [pc, #168]	; (8000a44 <MX_GPIO_Init+0x648>)
 800099a:	f001 ffaa 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 800099e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009a2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80009a4:	2303      	movs	r3, #3
 80009a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ac:	463b      	mov	r3, r7
 80009ae:	4619      	mov	r1, r3
 80009b0:	4824      	ldr	r0, [pc, #144]	; (8000a44 <MX_GPIO_Init+0x648>)
 80009b2:	f001 ff9e 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80009b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80009bc:	2303      	movs	r3, #3
 80009be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009c0:	2300      	movs	r3, #0
 80009c2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	481e      	ldr	r0, [pc, #120]	; (8000a44 <MX_GPIO_Init+0x648>)
 80009ca:	f001 ff92 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80009ce:	2301      	movs	r3, #1
 80009d0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80009d2:	2303      	movs	r3, #3
 80009d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009da:	463b      	mov	r3, r7
 80009dc:	4619      	mov	r1, r3
 80009de:	4818      	ldr	r0, [pc, #96]	; (8000a40 <MX_GPIO_Init+0x644>)
 80009e0:	f001 ff87 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80009e4:	2302      	movs	r3, #2
 80009e6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80009e8:	2303      	movs	r3, #3
 80009ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009ec:	2300      	movs	r3, #0
 80009ee:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f0:	463b      	mov	r3, r7
 80009f2:	4619      	mov	r1, r3
 80009f4:	4812      	ldr	r0, [pc, #72]	; (8000a40 <MX_GPIO_Init+0x644>)
 80009f6:	f001 ff7c 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80009fa:	2304      	movs	r3, #4
 80009fc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80009fe:	2303      	movs	r3, #3
 8000a00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a06:	463b      	mov	r3, r7
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480d      	ldr	r0, [pc, #52]	; (8000a40 <MX_GPIO_Init+0x644>)
 8000a0c:	f001 ff71 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000a10:	2308      	movs	r3, #8
 8000a12:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a14:	2303      	movs	r3, #3
 8000a16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4807      	ldr	r0, [pc, #28]	; (8000a40 <MX_GPIO_Init+0x644>)
 8000a22:	f001 ff66 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000a26:	2310      	movs	r3, #16
 8000a28:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a32:	463b      	mov	r3, r7
 8000a34:	4619      	mov	r1, r3
 8000a36:	e009      	b.n	8000a4c <MX_GPIO_Init+0x650>
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40020400 	.word	0x40020400
 8000a40:	40020c00 	.word	0x40020c00
 8000a44:	40020800 	.word	0x40020800
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	483b      	ldr	r0, [pc, #236]	; (8000b3c <MX_GPIO_Init+0x740>)
 8000a4e:	f001 ff50 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000a52:	2320      	movs	r3, #32
 8000a54:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a56:	2303      	movs	r3, #3
 8000a58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a5e:	463b      	mov	r3, r7
 8000a60:	4619      	mov	r1, r3
 8000a62:	4836      	ldr	r0, [pc, #216]	; (8000b3c <MX_GPIO_Init+0x740>)
 8000a64:	f001 ff45 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000a68:	2340      	movs	r3, #64	; 0x40
 8000a6a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a70:	2300      	movs	r3, #0
 8000a72:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a74:	463b      	mov	r3, r7
 8000a76:	4619      	mov	r1, r3
 8000a78:	4830      	ldr	r0, [pc, #192]	; (8000b3c <MX_GPIO_Init+0x740>)
 8000a7a:	f001 ff3a 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000a7e:	2380      	movs	r3, #128	; 0x80
 8000a80:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a82:	2303      	movs	r3, #3
 8000a84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	482b      	ldr	r0, [pc, #172]	; (8000b3c <MX_GPIO_Init+0x740>)
 8000a90:	f001 ff2f 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000a94:	2308      	movs	r3, #8
 8000a96:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4826      	ldr	r0, [pc, #152]	; (8000b40 <MX_GPIO_Init+0x744>)
 8000aa6:	f001 ff24 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000aaa:	2310      	movs	r3, #16
 8000aac:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4821      	ldr	r0, [pc, #132]	; (8000b40 <MX_GPIO_Init+0x744>)
 8000abc:	f001 ff19 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000ac0:	2320      	movs	r3, #32
 8000ac2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	463b      	mov	r3, r7
 8000ace:	4619      	mov	r1, r3
 8000ad0:	481b      	ldr	r0, [pc, #108]	; (8000b40 <MX_GPIO_Init+0x744>)
 8000ad2:	f001 ff0e 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ada:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000adc:	2303      	movs	r3, #3
 8000ade:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4815      	ldr	r0, [pc, #84]	; (8000b40 <MX_GPIO_Init+0x744>)
 8000aea:	f001 ff02 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000af2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000af4:	2303      	movs	r3, #3
 8000af6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	463b      	mov	r3, r7
 8000afe:	4619      	mov	r1, r3
 8000b00:	480f      	ldr	r0, [pc, #60]	; (8000b40 <MX_GPIO_Init+0x744>)
 8000b02:	f001 fef6 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000b06:	2301      	movs	r3, #1
 8000b08:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b12:	463b      	mov	r3, r7
 8000b14:	4619      	mov	r1, r3
 8000b16:	480b      	ldr	r0, [pc, #44]	; (8000b44 <MX_GPIO_Init+0x748>)
 8000b18:	f001 feeb 	bl	80028f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000b20:	2303      	movs	r3, #3
 8000b22:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b28:	463b      	mov	r3, r7
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_GPIO_Init+0x748>)
 8000b2e:	f001 fee0 	bl	80028f2 <LL_GPIO_Init>

}
 8000b32:	bf00      	nop
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40020c00 	.word	0x40020c00
 8000b40:	40020400 	.word	0x40020400
 8000b44:	40021000 	.word	0x40021000

08000b48 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <LL_RCC_HSE_Enable+0x1c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <LL_RCC_HSE_Enable+0x1c>)
 8000b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b56:	6013      	str	r3, [r2, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800

08000b68 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000b6c:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <LL_RCC_HSE_IsReady+0x24>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000b78:	bf0c      	ite	eq
 8000b7a:	2301      	moveq	r3, #1
 8000b7c:	2300      	movne	r3, #0
 8000b7e:	b2db      	uxtb	r3, r3
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800

08000b90 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <LL_RCC_SetSysClkSource+0x24>)
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	f023 0203 	bic.w	r2, r3, #3
 8000ba0:	4904      	ldr	r1, [pc, #16]	; (8000bb4 <LL_RCC_SetSysClkSource+0x24>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	608b      	str	r3, [r1, #8]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <LL_RCC_GetSysClkSource+0x18>)
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	f003 030c 	and.w	r3, r3, #12
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000be4:	4904      	ldr	r1, [pc, #16]	; (8000bf8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	608b      	str	r3, [r1, #8]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	40023800 	.word	0x40023800

08000bfc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000c0c:	4904      	ldr	r1, [pc, #16]	; (8000c20 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	608b      	str	r3, [r1, #8]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	40023800 	.word	0x40023800

08000c24 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000c34:	4904      	ldr	r1, [pc, #16]	; (8000c48 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	608b      	str	r3, [r1, #8]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	40023800 	.word	0x40023800

08000c4c <LL_RCC_SetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR2, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <LL_RCC_SetUSARTClockSource+0x30>)
 8000c56:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	0c1b      	lsrs	r3, r3, #16
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	401a      	ands	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	4905      	ldr	r1, [pc, #20]	; (8000c7c <LL_RCC_SetUSARTClockSource+0x30>)
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800

08000c80 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <LL_RCC_PLL_Enable+0x1c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <LL_RCC_PLL_Enable+0x1c>)
 8000c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c8e:	6013      	str	r3, [r2, #0]
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800

08000ca0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <LL_RCC_PLL_IsReady+0x24>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000cb0:	bf0c      	ite	eq
 8000cb2:	2301      	moveq	r3, #1
 8000cb4:	2300      	movne	r3, #0
 8000cb6:	b2db      	uxtb	r3, r3
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
 8000cd4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP,
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000cdc:	4013      	ands	r3, r2
 8000cde:	68f9      	ldr	r1, [r7, #12]
 8000ce0:	68ba      	ldr	r2, [r7, #8]
 8000ce2:	4311      	orrs	r1, r2
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	0192      	lsls	r2, r2, #6
 8000ce8:	4311      	orrs	r1, r2
 8000cea:	683a      	ldr	r2, [r7, #0]
 8000cec:	430a      	orrs	r2, r1
 8000cee:	4904      	ldr	r1, [pc, #16]	; (8000d00 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLP);
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	40023800 	.word	0x40023800
 8000d04:	ffbc8000 	.word	0xffbc8000

08000d08 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <LL_FLASH_SetLatency+0x24>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f023 020f 	bic.w	r2, r3, #15
 8000d18:	4904      	ldr	r1, [pc, #16]	; (8000d2c <LL_FLASH_SetLatency+0x24>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	600b      	str	r3, [r1, #0]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	40023c00 	.word	0x40023c00

08000d30 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <LL_FLASH_GetLatency+0x18>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 030f 	and.w	r3, r3, #15
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40023c00 	.word	0x40023c00

08000d4c <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR1    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_ODEN);
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <LL_PWR_EnableOverDriveMode+0x1c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <LL_PWR_EnableOverDriveMode+0x1c>)
 8000d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d5a:	6013      	str	r3, [r2, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40007000 	.word	0x40007000

08000d6c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000d7c:	4904      	ldr	r1, [pc, #16]	; (8000d90 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	600b      	str	r3, [r1, #0]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	40007000 	.word	0x40007000

08000d94 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	69db      	ldr	r3, [r3, #28]
 8000da0:	f003 0310 	and.w	r3, r3, #16
 8000da4:	2b10      	cmp	r3, #16
 8000da6:	d101      	bne.n	8000dac <LL_USART_IsActiveFlag_IDLE+0x18>
 8000da8:	2301      	movs	r3, #1
 8000daa:	e000      	b.n	8000dae <LL_USART_IsActiveFlag_IDLE+0x1a>
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2210      	movs	r2, #16
 8000dc6:	621a      	str	r2, [r3, #32]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd8:	f000 ff25 	bl	8001c26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ddc:	f000 f820 	bl	8000e20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de0:	f7ff fb0c 	bl	80003fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000de4:	f7ff faca 	bl	800037c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000de8:	f000 fe1e 	bl	8001a28 <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		//将需要发送到ROS的数据，从该函数发出，前三个数据范围（-32768 - +32767），第四个数据的范围(0 - 255)
		usartSendData(testSend1,testSend2,testSend3,testSend4);
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <main+0x3c>)
 8000dee:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <main+0x40>)
 8000df4:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000df8:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <main+0x44>)
 8000dfa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000dfe:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <main+0x48>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	f000 f9bb 	bl	800117c <usartSendData>
		//必须的延时
		HAL_Delay(13); // 延时13ms
 8000e06:	200d      	movs	r0, #13
 8000e08:	f000 ff3a 	bl	8001c80 <HAL_Delay>
		usartSendData(testSend1,testSend2,testSend3,testSend4);
 8000e0c:	e7ee      	b.n	8000dec <main+0x18>
 8000e0e:	bf00      	nop
 8000e10:	20000000 	.word	0x20000000
 8000e14:	20000002 	.word	0x20000002
 8000e18:	20000004 	.word	0x20000004
 8000e1c:	20000006 	.word	0x20000006

08000e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_7);
 8000e24:	2007      	movs	r0, #7
 8000e26:	f7ff ff6f 	bl	8000d08 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_7)
 8000e2a:	bf00      	nop
 8000e2c:	f7ff ff80 	bl	8000d30 <LL_FLASH_GetLatency>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b07      	cmp	r3, #7
 8000e34:	d1fa      	bne.n	8000e2c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000e36:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8000e3a:	f7ff ff97 	bl	8000d6c <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 8000e3e:	f7ff ff85 	bl	8000d4c <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSE_Enable();
 8000e42:	f7ff fe81 	bl	8000b48 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000e46:	bf00      	nop
 8000e48:	f7ff fe8e 	bl	8000b68 <LL_RCC_HSE_IsReady>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d1fa      	bne.n	8000e48 <SystemClock_Config+0x28>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_25, 432, LL_RCC_PLLP_DIV_2);
 8000e52:	2300      	movs	r3, #0
 8000e54:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8000e58:	2119      	movs	r1, #25
 8000e5a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000e5e:	f7ff ff33 	bl	8000cc8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000e62:	f7ff ff0d 	bl	8000c80 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000e66:	bf00      	nop
 8000e68:	f7ff ff1a 	bl	8000ca0 <LL_RCC_PLL_IsReady>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d1fa      	bne.n	8000e68 <SystemClock_Config+0x48>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000e72:	2000      	movs	r0, #0
 8000e74:	f7ff feae 	bl	8000bd4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000e78:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000e7c:	f7ff febe 	bl	8000bfc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_4);
 8000e80:	f44f 4020 	mov.w	r0, #40960	; 0xa000
 8000e84:	f7ff fece 	bl	8000c24 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000e88:	2002      	movs	r0, #2
 8000e8a:	f7ff fe81 	bl	8000b90 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000e8e:	bf00      	nop
 8000e90:	f7ff fe92 	bl	8000bb8 <LL_RCC_GetSysClkSource>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b08      	cmp	r3, #8
 8000e98:	d1fa      	bne.n	8000e90 <SystemClock_Config+0x70>
  {

  }
  LL_SetSystemCoreClock(216000000);
 8000e9a:	4808      	ldr	r0, [pc, #32]	; (8000ebc <SystemClock_Config+0x9c>)
 8000e9c:	f002 f9f4 	bl	8003288 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f000 fab5 	bl	8001410 <HAL_InitTick>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000eac:	f000 f81a 	bl	8000ee4 <Error_Handler>
  }
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 8000eb0:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000eb4:	f7ff feca 	bl	8000c4c <LL_RCC_SetUSARTClockSource>
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	0cdfe600 	.word	0x0cdfe600

08000ec0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d101      	bne.n	8000ed6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ed2:	f000 feb5 	bl	8001c40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40001400 	.word	0x40001400

08000ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
//  __disable_irq();
//  while (1)
//  {
//  }
  /* USER CODE END Error_Handler_Debug */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART1))
 8000ef8:	4807      	ldr	r0, [pc, #28]	; (8000f18 <USART1_IRQHandler+0x24>)
 8000efa:	f7ff ff4b 	bl	8000d94 <LL_USART_IsActiveFlag_IDLE>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d007      	beq.n	8000f14 <USART1_IRQHandler+0x20>
	{
		LL_USART_ClearFlag_IDLE(USART1);
 8000f04:	4804      	ldr	r0, [pc, #16]	; (8000f18 <USART1_IRQHandler+0x24>)
 8000f06:	f7ff ff58 	bl	8000dba <LL_USART_ClearFlag_IDLE>
		usartReceiveOneData(&testRece1,&testRece2,&testRece3);
 8000f0a:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <USART1_IRQHandler+0x28>)
 8000f0c:	4904      	ldr	r1, [pc, #16]	; (8000f20 <USART1_IRQHandler+0x2c>)
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <USART1_IRQHandler+0x30>)
 8000f10:	f000 f818 	bl	8000f44 <usartReceiveOneData>
//		LL_DMA_ClearFlag_TE5(DMA2);
//		LL_DMA_ClearFlag_FE5(DMA2);
//		LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_5, RX_LEN);
//		LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_5);
	}
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40011000 	.word	0x40011000
 8000f1c:	20000034 	.word	0x20000034
 8000f20:	20000030 	.word	0x20000030
 8000f24:	2000002c 	.word	0x2000002c

08000f28 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f34:	b2db      	uxtb	r3, r3
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <usartReceiveOneData>:
函数功能：通过串口中断服务函数，获取上位机发送的左右轮控制速度、预留控制标志位，分别存入参数中
入口参数：左轮轮速控制地址、右轮轮速控制地址、预留控制标志位
返回  值：无特殊意义
**************************************************************************/
int usartReceiveOneData(int *p_leftSpeedSet,int *p_rightSpeedSet,unsigned char *p_crtlFlag)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
	unsigned char USART_Receiver              = 0;          //接收数据
 8000f50:	2300      	movs	r3, #0
 8000f52:	75fb      	strb	r3, [r7, #23]
	static short j=0,k=0;
	static unsigned char USARTReceiverFront   = 0;
	static unsigned char Start_Flag           = START;      //一帧数据传送开始标志位
	static short dataLength                   = 0;

	USART_Receiver = LL_USART_ReceiveData8(USART1);   //@@@@@#####如果你使用不是USART1更改成相应的，比如USART3
 8000f54:	487e      	ldr	r0, [pc, #504]	; (8001150 <usartReceiveOneData+0x20c>)
 8000f56:	f7ff ffe7 	bl	8000f28 <LL_USART_ReceiveData8>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	75fb      	strb	r3, [r7, #23]
	//接收消息头
	if(Start_Flag == START)
 8000f5e:	4b7d      	ldr	r3, [pc, #500]	; (8001154 <usartReceiveOneData+0x210>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b11      	cmp	r3, #17
 8000f64:	d11b      	bne.n	8000f9e <usartReceiveOneData+0x5a>
	{
		if(USART_Receiver == 0xaa)                             //buf[1]
 8000f66:	7dfb      	ldrb	r3, [r7, #23]
 8000f68:	2baa      	cmp	r3, #170	; 0xaa
 8000f6a:	d114      	bne.n	8000f96 <usartReceiveOneData+0x52>
		{
			if(USARTReceiverFront == 0x55)        //数据头两位 //buf[0]
 8000f6c:	4b7a      	ldr	r3, [pc, #488]	; (8001158 <usartReceiveOneData+0x214>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b55      	cmp	r3, #85	; 0x55
 8000f72:	f040 80e8 	bne.w	8001146 <usartReceiveOneData+0x202>
			{
				Start_Flag = !START;              //收到数据头，开始接收数据
 8000f76:	4b77      	ldr	r3, [pc, #476]	; (8001154 <usartReceiveOneData+0x210>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
				//printf("header ok\n");
				receiveBuff[0]=header[0];         //buf[0]
 8000f7c:	2255      	movs	r2, #85	; 0x55
 8000f7e:	4b77      	ldr	r3, [pc, #476]	; (800115c <usartReceiveOneData+0x218>)
 8000f80:	701a      	strb	r2, [r3, #0]
				receiveBuff[1]=header[1];         //buf[1]
 8000f82:	22aa      	movs	r2, #170	; 0xaa
 8000f84:	4b75      	ldr	r3, [pc, #468]	; (800115c <usartReceiveOneData+0x218>)
 8000f86:	705a      	strb	r2, [r3, #1]
				USARTBufferIndex = 0;             //缓冲区初始化
 8000f88:	4b75      	ldr	r3, [pc, #468]	; (8001160 <usartReceiveOneData+0x21c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
				checkSum = 0x00;				  //校验和初始化
 8000f8e:	4b75      	ldr	r3, [pc, #468]	; (8001164 <usartReceiveOneData+0x220>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
 8000f94:	e0d7      	b.n	8001146 <usartReceiveOneData+0x202>
			}
		}
		else
		{
			USARTReceiverFront = USART_Receiver;
 8000f96:	4a70      	ldr	r2, [pc, #448]	; (8001158 <usartReceiveOneData+0x214>)
 8000f98:	7dfb      	ldrb	r3, [r7, #23]
 8000f9a:	7013      	strb	r3, [r2, #0]
 8000f9c:	e0d3      	b.n	8001146 <usartReceiveOneData+0x202>
		}
	}
	else
    {
		switch(USARTBufferIndex)
 8000f9e:	4b70      	ldr	r3, [pc, #448]	; (8001160 <usartReceiveOneData+0x21c>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	f200 80ca 	bhi.w	800113c <usartReceiveOneData+0x1f8>
 8000fa8:	a201      	add	r2, pc, #4	; (adr r2, 8000fb0 <usartReceiveOneData+0x6c>)
 8000faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fae:	bf00      	nop
 8000fb0:	08000fc1 	.word	0x08000fc1
 8000fb4:	08000fdf 	.word	0x08000fdf
 8000fb8:	08001025 	.word	0x08001025
 8000fbc:	08001075 	.word	0x08001075
		{
			case 0://接收左右轮速度数据的长度
				receiveBuff[2] = USART_Receiver;
 8000fc0:	4a66      	ldr	r2, [pc, #408]	; (800115c <usartReceiveOneData+0x218>)
 8000fc2:	7dfb      	ldrb	r3, [r7, #23]
 8000fc4:	7093      	strb	r3, [r2, #2]
				dataLength     = receiveBuff[2];            //buf[2]
 8000fc6:	4b65      	ldr	r3, [pc, #404]	; (800115c <usartReceiveOneData+0x218>)
 8000fc8:	789b      	ldrb	r3, [r3, #2]
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	4b66      	ldr	r3, [pc, #408]	; (8001168 <usartReceiveOneData+0x224>)
 8000fce:	801a      	strh	r2, [r3, #0]
				USARTBufferIndex++;
 8000fd0:	4b63      	ldr	r3, [pc, #396]	; (8001160 <usartReceiveOneData+0x21c>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	4b61      	ldr	r3, [pc, #388]	; (8001160 <usartReceiveOneData+0x21c>)
 8000fda:	701a      	strb	r2, [r3, #0]
				break;
 8000fdc:	e0b3      	b.n	8001146 <usartReceiveOneData+0x202>
			case 1://接收所有数据，并赋值处理
				receiveBuff[j + 3] = USART_Receiver;        //buf[3] - buf[7]
 8000fde:	4b63      	ldr	r3, [pc, #396]	; (800116c <usartReceiveOneData+0x228>)
 8000fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe4:	3303      	adds	r3, #3
 8000fe6:	495d      	ldr	r1, [pc, #372]	; (800115c <usartReceiveOneData+0x218>)
 8000fe8:	7dfa      	ldrb	r2, [r7, #23]
 8000fea:	54ca      	strb	r2, [r1, r3]
				j++;
 8000fec:	4b5f      	ldr	r3, [pc, #380]	; (800116c <usartReceiveOneData+0x228>)
 8000fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	b21a      	sxth	r2, r3
 8000ffa:	4b5c      	ldr	r3, [pc, #368]	; (800116c <usartReceiveOneData+0x228>)
 8000ffc:	801a      	strh	r2, [r3, #0]
				if(j >= dataLength)
 8000ffe:	4b5b      	ldr	r3, [pc, #364]	; (800116c <usartReceiveOneData+0x228>)
 8001000:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001004:	4b58      	ldr	r3, [pc, #352]	; (8001168 <usartReceiveOneData+0x224>)
 8001006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100a:	429a      	cmp	r2, r3
 800100c:	f2c0 8098 	blt.w	8001140 <usartReceiveOneData+0x1fc>
				{
					j = 0;
 8001010:	4b56      	ldr	r3, [pc, #344]	; (800116c <usartReceiveOneData+0x228>)
 8001012:	2200      	movs	r2, #0
 8001014:	801a      	strh	r2, [r3, #0]
					USARTBufferIndex++;
 8001016:	4b52      	ldr	r3, [pc, #328]	; (8001160 <usartReceiveOneData+0x21c>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	3301      	adds	r3, #1
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b50      	ldr	r3, [pc, #320]	; (8001160 <usartReceiveOneData+0x21c>)
 8001020:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001022:	e08d      	b.n	8001140 <usartReceiveOneData+0x1fc>
			case 2://接收校验值信息
				receiveBuff[3 + dataLength] = USART_Receiver;
 8001024:	4b50      	ldr	r3, [pc, #320]	; (8001168 <usartReceiveOneData+0x224>)
 8001026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800102a:	3303      	adds	r3, #3
 800102c:	494b      	ldr	r1, [pc, #300]	; (800115c <usartReceiveOneData+0x218>)
 800102e:	7dfa      	ldrb	r2, [r7, #23]
 8001030:	54ca      	strb	r2, [r1, r3]
				checkSum = getCrc8(receiveBuff, 3 + dataLength);
 8001032:	4b4d      	ldr	r3, [pc, #308]	; (8001168 <usartReceiveOneData+0x224>)
 8001034:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001038:	b29b      	uxth	r3, r3
 800103a:	3303      	adds	r3, #3
 800103c:	b29b      	uxth	r3, r3
 800103e:	4619      	mov	r1, r3
 8001040:	4846      	ldr	r0, [pc, #280]	; (800115c <usartReceiveOneData+0x218>)
 8001042:	f000 f967 	bl	8001314 <getCrc8>
 8001046:	4603      	mov	r3, r0
 8001048:	461a      	mov	r2, r3
 800104a:	4b46      	ldr	r3, [pc, #280]	; (8001164 <usartReceiveOneData+0x220>)
 800104c:	701a      	strb	r2, [r3, #0]
				  // 检查信息校验值
				if (checkSum != receiveBuff[3 + dataLength]) //buf[8]
 800104e:	4b46      	ldr	r3, [pc, #280]	; (8001168 <usartReceiveOneData+0x224>)
 8001050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001054:	3303      	adds	r3, #3
 8001056:	4a41      	ldr	r2, [pc, #260]	; (800115c <usartReceiveOneData+0x218>)
 8001058:	5cd2      	ldrb	r2, [r2, r3]
 800105a:	4b42      	ldr	r3, [pc, #264]	; (8001164 <usartReceiveOneData+0x220>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	429a      	cmp	r2, r3
 8001060:	d001      	beq.n	8001066 <usartReceiveOneData+0x122>
				{
					//printf("Received data check sum error!");
					return 0;
 8001062:	2300      	movs	r3, #0
 8001064:	e070      	b.n	8001148 <usartReceiveOneData+0x204>
				}
				USARTBufferIndex++;
 8001066:	4b3e      	ldr	r3, [pc, #248]	; (8001160 <usartReceiveOneData+0x21c>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	3301      	adds	r3, #1
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4b3c      	ldr	r3, [pc, #240]	; (8001160 <usartReceiveOneData+0x21c>)
 8001070:	701a      	strb	r2, [r3, #0]
				break;
 8001072:	e068      	b.n	8001146 <usartReceiveOneData+0x202>

			case 3://接收信息尾
				if(k==0)
 8001074:	4b3e      	ldr	r3, [pc, #248]	; (8001170 <usartReceiveOneData+0x22c>)
 8001076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d109      	bne.n	8001092 <usartReceiveOneData+0x14e>
				{
					//数据0d     buf[9]  无需判断
					k++;
 800107e:	4b3c      	ldr	r3, [pc, #240]	; (8001170 <usartReceiveOneData+0x22c>)
 8001080:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001084:	b29b      	uxth	r3, r3
 8001086:	3301      	adds	r3, #1
 8001088:	b29b      	uxth	r3, r3
 800108a:	b21a      	sxth	r2, r3
 800108c:	4b38      	ldr	r3, [pc, #224]	; (8001170 <usartReceiveOneData+0x22c>)
 800108e:	801a      	strh	r2, [r3, #0]
					dataLength         = 0;
					j = 0;
					k = 0;
					//-----------------------------------------------------------------
				}
				break;
 8001090:	e058      	b.n	8001144 <usartReceiveOneData+0x200>
				else if (k==1)
 8001092:	4b37      	ldr	r3, [pc, #220]	; (8001170 <usartReceiveOneData+0x22c>)
 8001094:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d153      	bne.n	8001144 <usartReceiveOneData+0x200>
					 for(k = 0; k < 2; k++)
 800109c:	4b34      	ldr	r3, [pc, #208]	; (8001170 <usartReceiveOneData+0x22c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	801a      	strh	r2, [r3, #0]
 80010a2:	e020      	b.n	80010e6 <usartReceiveOneData+0x1a2>
						leftVelSet.data[k]  = receiveBuff[k + 3]; //buf[3]  buf[4]
 80010a4:	4b32      	ldr	r3, [pc, #200]	; (8001170 <usartReceiveOneData+0x22c>)
 80010a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010aa:	3303      	adds	r3, #3
 80010ac:	4a30      	ldr	r2, [pc, #192]	; (8001170 <usartReceiveOneData+0x22c>)
 80010ae:	f9b2 2000 	ldrsh.w	r2, [r2]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4a29      	ldr	r2, [pc, #164]	; (800115c <usartReceiveOneData+0x218>)
 80010b6:	5cd2      	ldrb	r2, [r2, r3]
 80010b8:	4b2e      	ldr	r3, [pc, #184]	; (8001174 <usartReceiveOneData+0x230>)
 80010ba:	545a      	strb	r2, [r3, r1]
						rightVelSet.data[k] = receiveBuff[k + 5]; //buf[5]  buf[6]
 80010bc:	4b2c      	ldr	r3, [pc, #176]	; (8001170 <usartReceiveOneData+0x22c>)
 80010be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c2:	3305      	adds	r3, #5
 80010c4:	4a2a      	ldr	r2, [pc, #168]	; (8001170 <usartReceiveOneData+0x22c>)
 80010c6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80010ca:	4611      	mov	r1, r2
 80010cc:	4a23      	ldr	r2, [pc, #140]	; (800115c <usartReceiveOneData+0x218>)
 80010ce:	5cd2      	ldrb	r2, [r2, r3]
 80010d0:	4b29      	ldr	r3, [pc, #164]	; (8001178 <usartReceiveOneData+0x234>)
 80010d2:	545a      	strb	r2, [r3, r1]
					 for(k = 0; k < 2; k++)
 80010d4:	4b26      	ldr	r3, [pc, #152]	; (8001170 <usartReceiveOneData+0x22c>)
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	3301      	adds	r3, #1
 80010de:	b29b      	uxth	r3, r3
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	4b23      	ldr	r3, [pc, #140]	; (8001170 <usartReceiveOneData+0x22c>)
 80010e4:	801a      	strh	r2, [r3, #0]
 80010e6:	4b22      	ldr	r3, [pc, #136]	; (8001170 <usartReceiveOneData+0x22c>)
 80010e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	ddd9      	ble.n	80010a4 <usartReceiveOneData+0x160>
					*p_leftSpeedSet  = (int)leftVelSet.d;
 80010f0:	4b20      	ldr	r3, [pc, #128]	; (8001174 <usartReceiveOneData+0x230>)
 80010f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f6:	461a      	mov	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	601a      	str	r2, [r3, #0]
					*p_rightSpeedSet = (int)rightVelSet.d;
 80010fc:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <usartReceiveOneData+0x234>)
 80010fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001102:	461a      	mov	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	601a      	str	r2, [r3, #0]
					*p_crtlFlag = receiveBuff[7];                //buf[7]
 8001108:	4b14      	ldr	r3, [pc, #80]	; (800115c <usartReceiveOneData+0x218>)
 800110a:	79da      	ldrb	r2, [r3, #7]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	701a      	strb	r2, [r3, #0]
					USARTBufferIndex   = 0;
 8001110:	4b13      	ldr	r3, [pc, #76]	; (8001160 <usartReceiveOneData+0x21c>)
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
					USARTReceiverFront = 0;
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <usartReceiveOneData+0x214>)
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
					Start_Flag         = START;
 800111c:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <usartReceiveOneData+0x210>)
 800111e:	2211      	movs	r2, #17
 8001120:	701a      	strb	r2, [r3, #0]
					checkSum           = 0;
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <usartReceiveOneData+0x220>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
					dataLength         = 0;
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <usartReceiveOneData+0x224>)
 800112a:	2200      	movs	r2, #0
 800112c:	801a      	strh	r2, [r3, #0]
					j = 0;
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <usartReceiveOneData+0x228>)
 8001130:	2200      	movs	r2, #0
 8001132:	801a      	strh	r2, [r3, #0]
					k = 0;
 8001134:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <usartReceiveOneData+0x22c>)
 8001136:	2200      	movs	r2, #0
 8001138:	801a      	strh	r2, [r3, #0]
				break;
 800113a:	e003      	b.n	8001144 <usartReceiveOneData+0x200>
			 default:break;
 800113c:	bf00      	nop
 800113e:	e002      	b.n	8001146 <usartReceiveOneData+0x202>
				break;
 8001140:	bf00      	nop
 8001142:	e000      	b.n	8001146 <usartReceiveOneData+0x202>
				break;
 8001144:	bf00      	nop
		}
	}
	return 0;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40011000 	.word	0x40011000
 8001154:	20000007 	.word	0x20000007
 8001158:	20000048 	.word	0x20000048
 800115c:	20000038 	.word	0x20000038
 8001160:	20000049 	.word	0x20000049
 8001164:	2000004a 	.word	0x2000004a
 8001168:	2000004c 	.word	0x2000004c
 800116c:	2000004e 	.word	0x2000004e
 8001170:	20000050 	.word	0x20000050
 8001174:	20000064 	.word	0x20000064
 8001178:	20000060 	.word	0x20000060

0800117c <usartSendData>:
函数功能：将左右轮速和角度数据、控制信号进行打包，通过串口发送给Linux
入口参数：实时左轮轮速、实时右轮轮速、实时角度、控制信号（如果没有角度也可以不发）
返回  值：无
**************************************************************************/
void usartSendData(short leftVel, short rightVel,short angle,unsigned char ctrlFlag)
{
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	b089      	sub	sp, #36	; 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	4604      	mov	r4, r0
 8001184:	4608      	mov	r0, r1
 8001186:	4611      	mov	r1, r2
 8001188:	461a      	mov	r2, r3
 800118a:	4623      	mov	r3, r4
 800118c:	80fb      	strh	r3, [r7, #6]
 800118e:	4603      	mov	r3, r0
 8001190:	80bb      	strh	r3, [r7, #4]
 8001192:	460b      	mov	r3, r1
 8001194:	807b      	strh	r3, [r7, #2]
 8001196:	4613      	mov	r3, r2
 8001198:	707b      	strb	r3, [r7, #1]
	// 协议数据缓存数组
	unsigned char buf[13] = {0};
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	731a      	strb	r2, [r3, #12]
	int i, length = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61bb      	str	r3, [r7, #24]

	// 计算左右轮期望速度
	leftVelNow.d  = leftVel;
 80011ac:	4a3f      	ldr	r2, [pc, #252]	; (80012ac <usartSendData+0x130>)
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	8013      	strh	r3, [r2, #0]
	rightVelNow.d = rightVel;
 80011b2:	4a3f      	ldr	r2, [pc, #252]	; (80012b0 <usartSendData+0x134>)
 80011b4:	88bb      	ldrh	r3, [r7, #4]
 80011b6:	8013      	strh	r3, [r2, #0]
	angleNow.d    = angle;
 80011b8:	4a3e      	ldr	r2, [pc, #248]	; (80012b4 <usartSendData+0x138>)
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	8013      	strh	r3, [r2, #0]

	// 设置消息头
	for(i = 0; i < 2; i++)
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
 80011c2:	e00c      	b.n	80011de <usartSendData+0x62>
		buf[i] = header[i];                      // buf[0] buf[1]
 80011c4:	4a3c      	ldr	r2, [pc, #240]	; (80012b8 <usartSendData+0x13c>)
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	4413      	add	r3, r2
 80011ca:	7819      	ldrb	r1, [r3, #0]
 80011cc:	f107 0208 	add.w	r2, r7, #8
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	4413      	add	r3, r2
 80011d4:	460a      	mov	r2, r1
 80011d6:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 2; i++)
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	3301      	adds	r3, #1
 80011dc:	61fb      	str	r3, [r7, #28]
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	ddef      	ble.n	80011c4 <usartSendData+0x48>

	// 设置机器人左右轮速度、角度
	length = 7;
 80011e4:	2307      	movs	r3, #7
 80011e6:	61bb      	str	r3, [r7, #24]
	buf[2] = length;                             // buf[2]
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	72bb      	strb	r3, [r7, #10]
	for(i = 0; i < 2; i++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
 80011f2:	e023      	b.n	800123c <usartSendData+0xc0>
	{
		buf[i + 3] = leftVelNow.data[i];         // buf[3] buf[4]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	3303      	adds	r3, #3
 80011f8:	492c      	ldr	r1, [pc, #176]	; (80012ac <usartSendData+0x130>)
 80011fa:	69fa      	ldr	r2, [r7, #28]
 80011fc:	440a      	add	r2, r1
 80011fe:	7812      	ldrb	r2, [r2, #0]
 8001200:	f107 0120 	add.w	r1, r7, #32
 8001204:	440b      	add	r3, r1
 8001206:	f803 2c18 	strb.w	r2, [r3, #-24]
		buf[i + 5] = rightVelNow.data[i];        // buf[5] buf[6]
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3305      	adds	r3, #5
 800120e:	4928      	ldr	r1, [pc, #160]	; (80012b0 <usartSendData+0x134>)
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	440a      	add	r2, r1
 8001214:	7812      	ldrb	r2, [r2, #0]
 8001216:	f107 0120 	add.w	r1, r7, #32
 800121a:	440b      	add	r3, r1
 800121c:	f803 2c18 	strb.w	r2, [r3, #-24]
		buf[i + 7] = angleNow.data[i];           // buf[7] buf[8]
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	3307      	adds	r3, #7
 8001224:	4923      	ldr	r1, [pc, #140]	; (80012b4 <usartSendData+0x138>)
 8001226:	69fa      	ldr	r2, [r7, #28]
 8001228:	440a      	add	r2, r1
 800122a:	7812      	ldrb	r2, [r2, #0]
 800122c:	f107 0120 	add.w	r1, r7, #32
 8001230:	440b      	add	r3, r1
 8001232:	f803 2c18 	strb.w	r2, [r3, #-24]
	for(i = 0; i < 2; i++)
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3301      	adds	r3, #1
 800123a:	61fb      	str	r3, [r7, #28]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	2b01      	cmp	r3, #1
 8001240:	ddd8      	ble.n	80011f4 <usartSendData+0x78>
	}
	// 预留控制指令
	buf[3 + length - 1] = ctrlFlag;              // buf[9]
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	3302      	adds	r3, #2
 8001246:	f107 0220 	add.w	r2, r7, #32
 800124a:	4413      	add	r3, r2
 800124c:	787a      	ldrb	r2, [r7, #1]
 800124e:	f803 2c18 	strb.w	r2, [r3, #-24]

	// 设置校验值、消息尾
	buf[3 + length] = getCrc8(buf, 3 + length);  // buf[10]
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	b29b      	uxth	r3, r3
 8001256:	3303      	adds	r3, #3
 8001258:	b29a      	uxth	r2, r3
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	1cdc      	adds	r4, r3, #3
 800125e:	f107 0308 	add.w	r3, r7, #8
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f000 f855 	bl	8001314 <getCrc8>
 800126a:	4603      	mov	r3, r0
 800126c:	461a      	mov	r2, r3
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	4423      	add	r3, r4
 8001274:	f803 2c18 	strb.w	r2, [r3, #-24]
	buf[3 + length + 1] = ender[0];              // buf[11]
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	3304      	adds	r3, #4
 800127c:	220d      	movs	r2, #13
 800127e:	f107 0120 	add.w	r1, r7, #32
 8001282:	440b      	add	r3, r1
 8001284:	f803 2c18 	strb.w	r2, [r3, #-24]
	buf[3 + length + 2] = ender[1];              // buf[12]
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	3305      	adds	r3, #5
 800128c:	220a      	movs	r2, #10
 800128e:	f107 0120 	add.w	r1, r7, #32
 8001292:	440b      	add	r3, r1
 8001294:	f803 2c18 	strb.w	r2, [r3, #-24]

	//发送字符串数据
	USART_Send_String(buf,sizeof(buf));
 8001298:	f107 0308 	add.w	r3, r7, #8
 800129c:	210d      	movs	r1, #13
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f80c 	bl	80012bc <USART_Send_String>
}
 80012a4:	bf00      	nop
 80012a6:	3724      	adds	r7, #36	; 0x24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd90      	pop	{r4, r7, pc}
 80012ac:	20000068 	.word	0x20000068
 80012b0:	2000005c 	.word	0x2000005c
 80012b4:	20000058 	.word	0x20000058
 80012b8:	08003308 	.word	0x08003308

080012bc <USART_Send_String>:
函数功能：发送指定大小的字符数组，被usartSendData函数调用
入口参数：数组地址、数组大小
返回  值：无
**************************************************************************/
void USART_Send_String(uint8_t *p,uint16_t sendSize)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	807b      	strh	r3, [r7, #2]
	static int length =0;
	while(length<sendSize)
 80012c8:	e012      	b.n	80012f0 <USART_Send_String+0x34>
	{
		//@@@@@#####如果你使用不是USART1更改成相应的，比如USART3，这里有两处修改
		while( !(USART1->ISR&(0x01<<7)) );//发送缓冲区为空
 80012ca:	bf00      	nop
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <USART_Send_String+0x50>)
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0f9      	beq.n	80012cc <USART_Send_String+0x10>
		USART1->RDR=*p;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	781a      	ldrb	r2, [r3, #0]
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <USART_Send_String+0x50>)
 80012de:	625a      	str	r2, [r3, #36]	; 0x24
		p++;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3301      	adds	r3, #1
 80012e4:	607b      	str	r3, [r7, #4]
		length++;
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <USART_Send_String+0x54>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	3301      	adds	r3, #1
 80012ec:	4a08      	ldr	r2, [pc, #32]	; (8001310 <USART_Send_String+0x54>)
 80012ee:	6013      	str	r3, [r2, #0]
	while(length<sendSize)
 80012f0:	887a      	ldrh	r2, [r7, #2]
 80012f2:	4b07      	ldr	r3, [pc, #28]	; (8001310 <USART_Send_String+0x54>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	dce7      	bgt.n	80012ca <USART_Send_String+0xe>
	}
	length =0;
 80012fa:	4b05      	ldr	r3, [pc, #20]	; (8001310 <USART_Send_String+0x54>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	40011000 	.word	0x40011000
 8001310:	20000054 	.word	0x20000054

08001314 <getCrc8>:
函数功能：计算八位循环冗余校验，被usartSendData和usartReceiveOneData函数调用
入口参数：数组地址、数组大小
返回  值：无
**************************************************************************/
unsigned char getCrc8(unsigned char *ptr, unsigned short len)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	807b      	strh	r3, [r7, #2]
	unsigned char crc;
	unsigned char i;
	crc = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	73fb      	strb	r3, [r7, #15]
	while(len--)
 8001324:	e01f      	b.n	8001366 <getCrc8+0x52>
	{
		crc ^= *ptr++;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	781a      	ldrb	r2, [r3, #0]
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	4053      	eors	r3, r2
 8001332:	73fb      	strb	r3, [r7, #15]
		for(i = 0; i < 8; i++)
 8001334:	2300      	movs	r3, #0
 8001336:	73bb      	strb	r3, [r7, #14]
 8001338:	e012      	b.n	8001360 <getCrc8+0x4c>
		{
			if(crc&0x01)
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d007      	beq.n	8001354 <getCrc8+0x40>
                crc=(crc>>1)^0x8C;
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	085b      	lsrs	r3, r3, #1
 8001348:	b2da      	uxtb	r2, r3
 800134a:	f06f 0373 	mvn.w	r3, #115	; 0x73
 800134e:	4053      	eors	r3, r2
 8001350:	73fb      	strb	r3, [r7, #15]
 8001352:	e002      	b.n	800135a <getCrc8+0x46>
			else
                crc >>= 1;
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	085b      	lsrs	r3, r3, #1
 8001358:	73fb      	strb	r3, [r7, #15]
		for(i = 0; i < 8; i++)
 800135a:	7bbb      	ldrb	r3, [r7, #14]
 800135c:	3301      	adds	r3, #1
 800135e:	73bb      	strb	r3, [r7, #14]
 8001360:	7bbb      	ldrb	r3, [r7, #14]
 8001362:	2b07      	cmp	r3, #7
 8001364:	d9e9      	bls.n	800133a <getCrc8+0x26>
	while(len--)
 8001366:	887b      	ldrh	r3, [r7, #2]
 8001368:	1e5a      	subs	r2, r3, #1
 800136a:	807a      	strh	r2, [r7, #2]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1da      	bne.n	8001326 <getCrc8+0x12>
		}
	}
	return crc;
 8001370:	7bfb      	ldrb	r3, [r7, #15]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	4b21      	ldr	r3, [pc, #132]	; (800140c <HAL_MspInit+0x8c>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a20      	ldr	r2, [pc, #128]	; (800140c <HAL_MspInit+0x8c>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
 8001392:	4b1e      	ldr	r3, [pc, #120]	; (800140c <HAL_MspInit+0x8c>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	4b1b      	ldr	r3, [pc, #108]	; (800140c <HAL_MspInit+0x8c>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	4a1a      	ldr	r2, [pc, #104]	; (800140c <HAL_MspInit+0x8c>)
 80013a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a8:	6453      	str	r3, [r2, #68]	; 0x44
 80013aa:	4b18      	ldr	r3, [pc, #96]	; (800140c <HAL_MspInit+0x8c>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	210f      	movs	r1, #15
 80013ba:	f06f 0001 	mvn.w	r0, #1
 80013be:	f000 fd39 	bl	8001e34 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2105      	movs	r1, #5
 80013c6:	2001      	movs	r0, #1
 80013c8:	f000 fd34 	bl	8001e34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80013cc:	2001      	movs	r0, #1
 80013ce:	f000 fd4d 	bl	8001e6c <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2105      	movs	r1, #5
 80013d6:	2004      	movs	r0, #4
 80013d8:	f000 fd2c 	bl	8001e34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80013dc:	2004      	movs	r0, #4
 80013de:	f000 fd45 	bl	8001e6c <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2105      	movs	r1, #5
 80013e6:	2005      	movs	r0, #5
 80013e8:	f000 fd24 	bl	8001e34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80013ec:	2005      	movs	r0, #5
 80013ee:	f000 fd3d 	bl	8001e6c <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2105      	movs	r1, #5
 80013f6:	2051      	movs	r0, #81	; 0x51
 80013f8:	f000 fd1c 	bl	8001e34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80013fc:	2051      	movs	r0, #81	; 0x51
 80013fe:	f000 fd35 	bl	8001e6c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800

08001410 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08c      	sub	sp, #48	; 0x30
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001420:	2200      	movs	r2, #0
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	2037      	movs	r0, #55	; 0x37
 8001426:	f000 fd05 	bl	8001e34 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800142a:	2037      	movs	r0, #55	; 0x37
 800142c:	f000 fd1e 	bl	8001e6c <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001430:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <HAL_InitTick+0xa0>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	4a1e      	ldr	r2, [pc, #120]	; (80014b0 <HAL_InitTick+0xa0>)
 8001436:	f043 0320 	orr.w	r3, r3, #32
 800143a:	6413      	str	r3, [r2, #64]	; 0x40
 800143c:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <HAL_InitTick+0xa0>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	f003 0320 	and.w	r3, r3, #32
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001448:	f107 0210 	add.w	r2, r7, #16
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4611      	mov	r1, r2
 8001452:	4618      	mov	r0, r3
 8001454:	f000 feb0 	bl	80021b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001458:	f000 fe9a 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 800145c:	4603      	mov	r3, r0
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001464:	4a13      	ldr	r2, [pc, #76]	; (80014b4 <HAL_InitTick+0xa4>)
 8001466:	fba2 2303 	umull	r2, r3, r2, r3
 800146a:	0c9b      	lsrs	r3, r3, #18
 800146c:	3b01      	subs	r3, #1
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <HAL_InitTick+0xa8>)
 8001472:	4a12      	ldr	r2, [pc, #72]	; (80014bc <HAL_InitTick+0xac>)
 8001474:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <HAL_InitTick+0xa8>)
 8001478:	f240 32e7 	movw	r2, #999	; 0x3e7
 800147c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800147e:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <HAL_InitTick+0xa8>)
 8001480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001482:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <HAL_InitTick+0xa8>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <HAL_InitTick+0xa8>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001490:	4809      	ldr	r0, [pc, #36]	; (80014b8 <HAL_InitTick+0xa8>)
 8001492:	f000 fec3 	bl	800221c <HAL_TIM_Base_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d104      	bne.n	80014a6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 800149c:	4806      	ldr	r0, [pc, #24]	; (80014b8 <HAL_InitTick+0xa8>)
 800149e:	f000 fef3 	bl	8002288 <HAL_TIM_Base_Start_IT>
 80014a2:	4603      	mov	r3, r0
 80014a4:	e000      	b.n	80014a8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3730      	adds	r7, #48	; 0x30
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40023800 	.word	0x40023800
 80014b4:	431bde83 	.word	0x431bde83
 80014b8:	2000006c 	.word	0x2000006c
 80014bc:	40001400 	.word	0x40001400

080014c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <NMI_Handler+0x4>

080014c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <HardFault_Handler+0x4>

080014cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <MemManage_Handler+0x4>

080014d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <BusFault_Handler+0x4>

080014d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <UsageFault_Handler+0x4>

080014de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800151a:	f000 fe13 	bl	8002144 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}

08001522 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001526:	f000 fcaf 	bl	8001e88 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}

0800152e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <TIM7_IRQHandler+0x10>)
 8001542:	f000 fecb 	bl	80022dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2000006c 	.word	0x2000006c

08001550 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream5_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream7_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <SystemInit+0x28>)
 8001582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001586:	4a07      	ldr	r2, [pc, #28]	; (80015a4 <SystemInit+0x28>)
 8001588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800158c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001590:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <SystemInit+0x28>)
 8001592:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001596:	609a      	str	r2, [r3, #8]
#endif
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_GetPriorityGrouping>:
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	f003 0307 	and.w	r3, r3, #7
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_EnableIRQ>:
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	db0b      	blt.n	80015ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	f003 021f 	and.w	r2, r3, #31
 80015dc:	4907      	ldr	r1, [pc, #28]	; (80015fc <__NVIC_EnableIRQ+0x38>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	095b      	lsrs	r3, r3, #5
 80015e4:	2001      	movs	r0, #1
 80015e6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000e100 	.word	0xe000e100

08001600 <__NVIC_SetPriority>:
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	6039      	str	r1, [r7, #0]
 800160a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	2b00      	cmp	r3, #0
 8001612:	db0a      	blt.n	800162a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	b2da      	uxtb	r2, r3
 8001618:	490c      	ldr	r1, [pc, #48]	; (800164c <__NVIC_SetPriority+0x4c>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	0112      	lsls	r2, r2, #4
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	440b      	add	r3, r1
 8001624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001628:	e00a      	b.n	8001640 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4908      	ldr	r1, [pc, #32]	; (8001650 <__NVIC_SetPriority+0x50>)
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	3b04      	subs	r3, #4
 8001638:	0112      	lsls	r2, r2, #4
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	440b      	add	r3, r1
 800163e:	761a      	strb	r2, [r3, #24]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000e100 	.word	0xe000e100
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <NVIC_EncodePriority>:
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	; 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f1c3 0307 	rsb	r3, r3, #7
 800166e:	2b04      	cmp	r3, #4
 8001670:	bf28      	it	cs
 8001672:	2304      	movcs	r3, #4
 8001674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3304      	adds	r3, #4
 800167a:	2b06      	cmp	r3, #6
 800167c:	d902      	bls.n	8001684 <NVIC_EncodePriority+0x30>
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3b03      	subs	r3, #3
 8001682:	e000      	b.n	8001686 <NVIC_EncodePriority+0x32>
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	f04f 32ff 	mov.w	r2, #4294967295
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43da      	mvns	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	401a      	ands	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800169c:	f04f 31ff 	mov.w	r1, #4294967295
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	43d9      	mvns	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	4313      	orrs	r3, r2
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3724      	adds	r7, #36	; 0x24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80016c8:	4a0d      	ldr	r2, [pc, #52]	; (8001700 <LL_DMA_SetDataTransferDirection+0x44>)
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	4413      	add	r3, r2
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4413      	add	r3, r2
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80016dc:	4908      	ldr	r1, [pc, #32]	; (8001700 <LL_DMA_SetDataTransferDirection+0x44>)
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	440b      	add	r3, r1
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	440b      	add	r3, r1
 80016ea:	4619      	mov	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	600b      	str	r3, [r1, #0]
}
 80016f2:	bf00      	nop
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	08003324 	.word	0x08003324

08001704 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8001710:	4a0d      	ldr	r2, [pc, #52]	; (8001748 <LL_DMA_SetMode+0x44>)
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	4413      	add	r3, r2
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4413      	add	r3, r2
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8001724:	4908      	ldr	r1, [pc, #32]	; (8001748 <LL_DMA_SetMode+0x44>)
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	440b      	add	r3, r1
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	440b      	add	r3, r1
 8001732:	4619      	mov	r1, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4313      	orrs	r3, r2
 8001738:	600b      	str	r3, [r1, #0]
}
 800173a:	bf00      	nop
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	08003324 	.word	0x08003324

0800174c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8001758:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <LL_DMA_SetPeriphIncMode+0x44>)
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	4413      	add	r3, r2
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4413      	add	r3, r2
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800176c:	4908      	ldr	r1, [pc, #32]	; (8001790 <LL_DMA_SetPeriphIncMode+0x44>)
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	440b      	add	r3, r1
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4619      	mov	r1, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	440b      	add	r3, r1
 800177a:	4619      	mov	r1, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4313      	orrs	r3, r2
 8001780:	600b      	str	r3, [r1, #0]
}
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	08003324 	.word	0x08003324

08001794 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80017a0:	4a0d      	ldr	r2, [pc, #52]	; (80017d8 <LL_DMA_SetMemoryIncMode+0x44>)
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	4413      	add	r3, r2
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	4413      	add	r3, r2
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80017b4:	4908      	ldr	r1, [pc, #32]	; (80017d8 <LL_DMA_SetMemoryIncMode+0x44>)
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	440b      	add	r3, r1
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	4619      	mov	r1, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	440b      	add	r3, r1
 80017c2:	4619      	mov	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	600b      	str	r3, [r1, #0]
}
 80017ca:	bf00      	nop
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	08003324 	.word	0x08003324

080017dc <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80017e8:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <LL_DMA_SetPeriphSize+0x44>)
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	4413      	add	r3, r2
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4413      	add	r3, r2
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80017fc:	4908      	ldr	r1, [pc, #32]	; (8001820 <LL_DMA_SetPeriphSize+0x44>)
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	440b      	add	r3, r1
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	4619      	mov	r1, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	440b      	add	r3, r1
 800180a:	4619      	mov	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4313      	orrs	r3, r2
 8001810:	600b      	str	r3, [r1, #0]
}
 8001812:	bf00      	nop
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	08003324 	.word	0x08003324

08001824 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8001830:	4a0d      	ldr	r2, [pc, #52]	; (8001868 <LL_DMA_SetMemorySize+0x44>)
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	4413      	add	r3, r2
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	461a      	mov	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4413      	add	r3, r2
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8001844:	4908      	ldr	r1, [pc, #32]	; (8001868 <LL_DMA_SetMemorySize+0x44>)
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	440b      	add	r3, r1
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	440b      	add	r3, r1
 8001852:	4619      	mov	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4313      	orrs	r3, r2
 8001858:	600b      	str	r3, [r1, #0]
}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	08003324 	.word	0x08003324

0800186c <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8001878:	4a0d      	ldr	r2, [pc, #52]	; (80018b0 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	4413      	add	r3, r2
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	4413      	add	r3, r2
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800188c:	4908      	ldr	r1, [pc, #32]	; (80018b0 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	440b      	add	r3, r1
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4619      	mov	r1, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	440b      	add	r3, r1
 800189a:	4619      	mov	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4313      	orrs	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]
}
 80018a2:	bf00      	nop
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	08003324 	.word	0x08003324

080018b4 <LL_DMA_SetChannelSelection>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80018c0:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <LL_DMA_SetChannelSelection+0x44>)
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	4413      	add	r3, r2
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4413      	add	r3, r2
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f023 52f0 	bic.w	r2, r3, #503316480	; 0x1e000000
 80018d4:	4908      	ldr	r1, [pc, #32]	; (80018f8 <LL_DMA_SetChannelSelection+0x44>)
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	440b      	add	r3, r1
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	4619      	mov	r1, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	440b      	add	r3, r1
 80018e2:	4619      	mov	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	600b      	str	r3, [r1, #0]
}
 80018ea:	bf00      	nop
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	08003324 	.word	0x08003324

080018fc <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8001906:	4a0c      	ldr	r2, [pc, #48]	; (8001938 <LL_DMA_DisableFifoMode+0x3c>)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	4413      	add	r3, r2
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	461a      	mov	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4413      	add	r3, r2
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	4908      	ldr	r1, [pc, #32]	; (8001938 <LL_DMA_DisableFifoMode+0x3c>)
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	440a      	add	r2, r1
 800191c:	7812      	ldrb	r2, [r2, #0]
 800191e:	4611      	mov	r1, r2
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	440a      	add	r2, r1
 8001924:	f023 0304 	bic.w	r3, r3, #4
 8001928:	6153      	str	r3, [r2, #20]
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	08003324 	.word	0x08003324

0800193c <LL_AHB1_GRP1_EnableClock>:
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001948:	4907      	ldr	r1, [pc, #28]	; (8001968 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4313      	orrs	r3, r2
 800194e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4013      	ands	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800195a:	68fb      	ldr	r3, [r7, #12]
}
 800195c:	bf00      	nop
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	40023800 	.word	0x40023800

0800196c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001976:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001978:	4907      	ldr	r1, [pc, #28]	; (8001998 <LL_APB2_GRP1_EnableClock+0x2c>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4313      	orrs	r3, r2
 800197e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001982:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4013      	ands	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800198a:	68fb      	ldr	r3, [r7, #12]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	40023800 	.word	0x40023800

0800199c <LL_USART_Enable>:
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f043 0201 	orr.w	r2, r3, #1
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	601a      	str	r2, [r3, #0]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <LL_USART_DisableOverrunDetect>:
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	609a      	str	r2, [r3, #8]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <LL_USART_ConfigAsyncMode>:
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	609a      	str	r2, [r3, #8]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_USART_DisableDMADeactOnRxErr>:
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_DDRE);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08e      	sub	sp, #56	; 0x38
 8001a2c:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
 8001a3c:	611a      	str	r2, [r3, #16]
 8001a3e:	615a      	str	r2, [r3, #20]
 8001a40:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
 8001a50:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001a52:	2010      	movs	r0, #16
 8001a54:	f7ff ff8a 	bl	800196c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001a58:	2002      	movs	r0, #2
 8001a5a:	f7ff ff6f 	bl	800193c <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001a5e:	2340      	movs	r3, #64	; 0x40
 8001a60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a62:	2302      	movs	r3, #2
 8001a64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001a66:	2303      	movs	r3, #3
 8001a68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001a72:	2307      	movs	r3, #7
 8001a74:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4853      	ldr	r0, [pc, #332]	; (8001bc8 <MX_USART1_UART_Init+0x1a0>)
 8001a7c:	f000 ff39 	bl	80028f2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a84:	2302      	movs	r3, #2
 8001a86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001a94:	2307      	movs	r3, #7
 8001a96:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	484a      	ldr	r0, [pc, #296]	; (8001bc8 <MX_USART1_UART_Init+0x1a0>)
 8001a9e:	f000 ff28 	bl	80028f2 <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_RX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_5, LL_DMA_CHANNEL_4);
 8001aa2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aa6:	2105      	movs	r1, #5
 8001aa8:	4848      	ldr	r0, [pc, #288]	; (8001bcc <MX_USART1_UART_Init+0x1a4>)
 8001aaa:	f7ff ff03 	bl	80018b4 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2105      	movs	r1, #5
 8001ab2:	4846      	ldr	r0, [pc, #280]	; (8001bcc <MX_USART1_UART_Init+0x1a4>)
 8001ab4:	f7ff fe02 	bl	80016bc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_5, LL_DMA_PRIORITY_LOW);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2105      	movs	r1, #5
 8001abc:	4843      	ldr	r0, [pc, #268]	; (8001bcc <MX_USART1_UART_Init+0x1a4>)
 8001abe:	f7ff fed5 	bl	800186c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_5, LL_DMA_MODE_CIRCULAR);
 8001ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ac6:	2105      	movs	r1, #5
 8001ac8:	4840      	ldr	r0, [pc, #256]	; (8001bcc <MX_USART1_UART_Init+0x1a4>)
 8001aca:	f7ff fe1b 	bl	8001704 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2105      	movs	r1, #5
 8001ad2:	483e      	ldr	r0, [pc, #248]	; (8001bcc <MX_USART1_UART_Init+0x1a4>)
 8001ad4:	f7ff fe3a 	bl	800174c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
 8001ad8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001adc:	2105      	movs	r1, #5
 8001ade:	483b      	ldr	r0, [pc, #236]	; (8001bcc <MX_USART1_UART_Init+0x1a4>)
 8001ae0:	f7ff fe58 	bl	8001794 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_BYTE);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2105      	movs	r1, #5
 8001ae8:	4838      	ldr	r0, [pc, #224]	; (8001bcc <MX_USART1_UART_Init+0x1a4>)
 8001aea:	f7ff fe77 	bl	80017dc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_BYTE);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2105      	movs	r1, #5
 8001af2:	4836      	ldr	r0, [pc, #216]	; (8001bcc <MX_USART1_UART_Init+0x1a4>)
 8001af4:	f7ff fe96 	bl	8001824 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_5);
 8001af8:	2105      	movs	r1, #5
 8001afa:	4834      	ldr	r0, [pc, #208]	; (8001bcc <MX_USART1_UART_Init+0x1a4>)
 8001afc:	f7ff fefe 	bl	80018fc <LL_DMA_DisableFifoMode>

  /* USART1_TX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_7, LL_DMA_CHANNEL_4);
 8001b00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b04:	2107      	movs	r1, #7
 8001b06:	4831      	ldr	r0, [pc, #196]	; (8001bcc <MX_USART1_UART_Init+0x1a4>)
 8001b08:	f7ff fed4 	bl	80018b4 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001b0c:	2240      	movs	r2, #64	; 0x40
 8001b0e:	2107      	movs	r1, #7
 8001b10:	482e      	ldr	r0, [pc, #184]	; (8001bcc <MX_USART1_UART_Init+0x1a4>)
 8001b12:	f7ff fdd3 	bl	80016bc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_7, LL_DMA_PRIORITY_LOW);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2107      	movs	r1, #7
 8001b1a:	482c      	ldr	r0, [pc, #176]	; (8001bcc <MX_USART1_UART_Init+0x1a4>)
 8001b1c:	f7ff fea6 	bl	800186c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_7, LL_DMA_MODE_CIRCULAR);
 8001b20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b24:	2107      	movs	r1, #7
 8001b26:	4829      	ldr	r0, [pc, #164]	; (8001bcc <MX_USART1_UART_Init+0x1a4>)
 8001b28:	f7ff fdec 	bl	8001704 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_7, LL_DMA_PERIPH_NOINCREMENT);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2107      	movs	r1, #7
 8001b30:	4826      	ldr	r0, [pc, #152]	; (8001bcc <MX_USART1_UART_Init+0x1a4>)
 8001b32:	f7ff fe0b 	bl	800174c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_7, LL_DMA_MEMORY_INCREMENT);
 8001b36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b3a:	2107      	movs	r1, #7
 8001b3c:	4823      	ldr	r0, [pc, #140]	; (8001bcc <MX_USART1_UART_Init+0x1a4>)
 8001b3e:	f7ff fe29 	bl	8001794 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_7, LL_DMA_PDATAALIGN_BYTE);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2107      	movs	r1, #7
 8001b46:	4821      	ldr	r0, [pc, #132]	; (8001bcc <MX_USART1_UART_Init+0x1a4>)
 8001b48:	f7ff fe48 	bl	80017dc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_7, LL_DMA_MDATAALIGN_BYTE);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2107      	movs	r1, #7
 8001b50:	481e      	ldr	r0, [pc, #120]	; (8001bcc <MX_USART1_UART_Init+0x1a4>)
 8001b52:	f7ff fe67 	bl	8001824 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_7);
 8001b56:	2107      	movs	r1, #7
 8001b58:	481c      	ldr	r0, [pc, #112]	; (8001bcc <MX_USART1_UART_Init+0x1a4>)
 8001b5a:	f7ff fecf 	bl	80018fc <LL_DMA_DisableFifoMode>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001b5e:	f7ff fd23 	bl	80015a8 <__NVIC_GetPriorityGrouping>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2200      	movs	r2, #0
 8001b66:	2105      	movs	r1, #5
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fd73 	bl	8001654 <NVIC_EncodePriority>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4619      	mov	r1, r3
 8001b72:	2025      	movs	r0, #37	; 0x25
 8001b74:	f7ff fd44 	bl	8001600 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001b78:	2025      	movs	r0, #37	; 0x25
 8001b7a:	f7ff fd23 	bl	80015c4 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8001b7e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001b82:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001b84:	2300      	movs	r3, #0
 8001b86:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001b90:	230c      	movs	r3, #12
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8001b9c:	f107 031c 	add.w	r3, r7, #28
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	480b      	ldr	r0, [pc, #44]	; (8001bd0 <MX_USART1_UART_Init+0x1a8>)
 8001ba4:	f001 fad0 	bl	8003148 <LL_USART_Init>
  LL_USART_DisableOverrunDetect(USART1);
 8001ba8:	4809      	ldr	r0, [pc, #36]	; (8001bd0 <MX_USART1_UART_Init+0x1a8>)
 8001baa:	f7ff ff07 	bl	80019bc <LL_USART_DisableOverrunDetect>
  LL_USART_DisableDMADeactOnRxErr(USART1);
 8001bae:	4808      	ldr	r0, [pc, #32]	; (8001bd0 <MX_USART1_UART_Init+0x1a8>)
 8001bb0:	f7ff ff2a 	bl	8001a08 <LL_USART_DisableDMADeactOnRxErr>
  LL_USART_ConfigAsyncMode(USART1);
 8001bb4:	4806      	ldr	r0, [pc, #24]	; (8001bd0 <MX_USART1_UART_Init+0x1a8>)
 8001bb6:	f7ff ff11 	bl	80019dc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001bba:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <MX_USART1_UART_Init+0x1a8>)
 8001bbc:	f7ff feee 	bl	800199c <LL_USART_Enable>

}
 8001bc0:	bf00      	nop
 8001bc2:	3738      	adds	r7, #56	; 0x38
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40020400 	.word	0x40020400
 8001bcc:	40026400 	.word	0x40026400
 8001bd0:	40011000 	.word	0x40011000

08001bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bda:	e003      	b.n	8001be4 <LoopCopyDataInit>

08001bdc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001be0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001be2:	3104      	adds	r1, #4

08001be4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001be4:	480b      	ldr	r0, [pc, #44]	; (8001c14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001be8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bec:	d3f6      	bcc.n	8001bdc <CopyDataInit>
  ldr  r2, =_sbss
 8001bee:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bf0:	e002      	b.n	8001bf8 <LoopFillZerobss>

08001bf2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bf2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bf4:	f842 3b04 	str.w	r3, [r2], #4

08001bf8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bfc:	d3f9      	bcc.n	8001bf2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bfe:	f7ff fcbd 	bl	800157c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c02:	f001 fb51 	bl	80032a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c06:	f7ff f8e5 	bl	8000dd4 <main>
  bx  lr    
 8001c0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c0c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001c10:	08003334 	.word	0x08003334
  ldr  r0, =_sdata
 8001c14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c18:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001c1c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001c20:	200000cc 	.word	0x200000cc

08001c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c24:	e7fe      	b.n	8001c24 <ADC_IRQHandler>

08001c26 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c2a:	2003      	movs	r0, #3
 8001c2c:	f000 f8f7 	bl	8001e1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c30:	2000      	movs	r0, #0
 8001c32:	f7ff fbed 	bl	8001410 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001c36:	f7ff fba3 	bl	8001380 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_IncTick+0x20>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_IncTick+0x24>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <HAL_IncTick+0x24>)
 8001c52:	6013      	str	r3, [r2, #0]
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	2000000c 	.word	0x2000000c
 8001c64:	200000ac 	.word	0x200000ac

08001c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c6c:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <HAL_GetTick+0x14>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	200000ac 	.word	0x200000ac

08001c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c88:	f7ff ffee 	bl	8001c68 <HAL_GetTick>
 8001c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c98:	d005      	beq.n	8001ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c9a:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HAL_Delay+0x40>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ca6:	bf00      	nop
 8001ca8:	f7ff ffde 	bl	8001c68 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d8f7      	bhi.n	8001ca8 <HAL_Delay+0x28>
  {
  }
}
 8001cb8:	bf00      	nop
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	2000000c 	.word	0x2000000c

08001cc4 <__NVIC_SetPriorityGrouping>:
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <__NVIC_SetPriorityGrouping+0x40>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <__NVIC_SetPriorityGrouping+0x44>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf2:	4a04      	ldr	r2, [pc, #16]	; (8001d04 <__NVIC_SetPriorityGrouping+0x40>)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	60d3      	str	r3, [r2, #12]
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00
 8001d08:	05fa0000 	.word	0x05fa0000

08001d0c <__NVIC_GetPriorityGrouping>:
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d10:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <__NVIC_GetPriorityGrouping+0x18>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	0a1b      	lsrs	r3, r3, #8
 8001d16:	f003 0307 	and.w	r3, r3, #7
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_EnableIRQ>:
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	db0b      	blt.n	8001d52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	f003 021f 	and.w	r2, r3, #31
 8001d40:	4907      	ldr	r1, [pc, #28]	; (8001d60 <__NVIC_EnableIRQ+0x38>)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	095b      	lsrs	r3, r3, #5
 8001d48:	2001      	movs	r0, #1
 8001d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000e100 	.word	0xe000e100

08001d64 <__NVIC_SetPriority>:
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	6039      	str	r1, [r7, #0]
 8001d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	db0a      	blt.n	8001d8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	490c      	ldr	r1, [pc, #48]	; (8001db0 <__NVIC_SetPriority+0x4c>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	0112      	lsls	r2, r2, #4
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	440b      	add	r3, r1
 8001d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d8c:	e00a      	b.n	8001da4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4908      	ldr	r1, [pc, #32]	; (8001db4 <__NVIC_SetPriority+0x50>)
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	3b04      	subs	r3, #4
 8001d9c:	0112      	lsls	r2, r2, #4
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	440b      	add	r3, r1
 8001da2:	761a      	strb	r2, [r3, #24]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000e100 	.word	0xe000e100
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <NVIC_EncodePriority>:
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	; 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f1c3 0307 	rsb	r3, r3, #7
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	bf28      	it	cs
 8001dd6:	2304      	movcs	r3, #4
 8001dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	2b06      	cmp	r3, #6
 8001de0:	d902      	bls.n	8001de8 <NVIC_EncodePriority+0x30>
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3b03      	subs	r3, #3
 8001de6:	e000      	b.n	8001dea <NVIC_EncodePriority+0x32>
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	f04f 32ff 	mov.w	r2, #4294967295
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43da      	mvns	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e00:	f04f 31ff 	mov.w	r1, #4294967295
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0a:	43d9      	mvns	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	4313      	orrs	r3, r2
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3724      	adds	r7, #36	; 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ff4c 	bl	8001cc4 <__NVIC_SetPriorityGrouping>
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e46:	f7ff ff61 	bl	8001d0c <__NVIC_GetPriorityGrouping>
 8001e4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	68b9      	ldr	r1, [r7, #8]
 8001e50:	6978      	ldr	r0, [r7, #20]
 8001e52:	f7ff ffb1 	bl	8001db8 <NVIC_EncodePriority>
 8001e56:	4602      	mov	r2, r0
 8001e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff ff80 	bl	8001d64 <__NVIC_SetPriority>
}
 8001e64:	bf00      	nop
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ff54 	bl	8001d28 <__NVIC_EnableIRQ>
}
 8001e80:	bf00      	nop
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
  uint32_t temp = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
  
  /* If the program operation is completed, disable the PG Bit */
  FLASH->CR &= (~FLASH_CR_PG);
 8001e92:	4b52      	ldr	r3, [pc, #328]	; (8001fdc <HAL_FLASH_IRQHandler+0x154>)
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	4a51      	ldr	r2, [pc, #324]	; (8001fdc <HAL_FLASH_IRQHandler+0x154>)
 8001e98:	f023 0301 	bic.w	r3, r3, #1
 8001e9c:	6113      	str	r3, [r2, #16]

  /* If the erase operation is completed, disable the SER Bit */
  FLASH->CR &= (~FLASH_CR_SER);
 8001e9e:	4b4f      	ldr	r3, [pc, #316]	; (8001fdc <HAL_FLASH_IRQHandler+0x154>)
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	4a4e      	ldr	r2, [pc, #312]	; (8001fdc <HAL_FLASH_IRQHandler+0x154>)
 8001ea4:	f023 0302 	bic.w	r3, r3, #2
 8001ea8:	6113      	str	r3, [r2, #16]
  FLASH->CR &= SECTOR_MASK; 
 8001eaa:	4b4c      	ldr	r3, [pc, #304]	; (8001fdc <HAL_FLASH_IRQHandler+0x154>)
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	4a4b      	ldr	r2, [pc, #300]	; (8001fdc <HAL_FLASH_IRQHandler+0x154>)
 8001eb0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001eb4:	6113      	str	r3, [r2, #16]

  /* if the erase operation is completed, disable the MER Bit */
  FLASH->CR &= (~FLASH_MER_BIT);
 8001eb6:	4b49      	ldr	r3, [pc, #292]	; (8001fdc <HAL_FLASH_IRQHandler+0x154>)
 8001eb8:	691a      	ldr	r2, [r3, #16]
 8001eba:	4948      	ldr	r1, [pc, #288]	; (8001fdc <HAL_FLASH_IRQHandler+0x154>)
 8001ebc:	4b48      	ldr	r3, [pc, #288]	; (8001fe0 <HAL_FLASH_IRQHandler+0x158>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	610b      	str	r3, [r1, #16]

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001ec2:	4b46      	ldr	r3, [pc, #280]	; (8001fdc <HAL_FLASH_IRQHandler+0x154>)
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d046      	beq.n	8001f5c <HAL_FLASH_IRQHandler+0xd4>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001ece:	4b43      	ldr	r3, [pc, #268]	; (8001fdc <HAL_FLASH_IRQHandler+0x154>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	60da      	str	r2, [r3, #12]
    
    switch (pFlash.ProcedureOnGoing)
 8001ed4:	4b43      	ldr	r3, [pc, #268]	; (8001fe4 <HAL_FLASH_IRQHandler+0x15c>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d02e      	beq.n	8001f3c <HAL_FLASH_IRQHandler+0xb4>
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d033      	beq.n	8001f4a <HAL_FLASH_IRQHandler+0xc2>
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d000      	beq.n	8001ee8 <HAL_FLASH_IRQHandler+0x60>
        /* Programming procedure is completed */
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
        break;
      }
      default :
        break;
 8001ee6:	e03a      	b.n	8001f5e <HAL_FLASH_IRQHandler+0xd6>
        pFlash.NbSectorsToErase--;
 8001ee8:	4b3e      	ldr	r3, [pc, #248]	; (8001fe4 <HAL_FLASH_IRQHandler+0x15c>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	3b01      	subs	r3, #1
 8001eee:	4a3d      	ldr	r2, [pc, #244]	; (8001fe4 <HAL_FLASH_IRQHandler+0x15c>)
 8001ef0:	6053      	str	r3, [r2, #4]
        if(pFlash.NbSectorsToErase != 0)
 8001ef2:	4b3c      	ldr	r3, [pc, #240]	; (8001fe4 <HAL_FLASH_IRQHandler+0x15c>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d013      	beq.n	8001f22 <HAL_FLASH_IRQHandler+0x9a>
          temp = pFlash.Sector;
 8001efa:	4b3a      	ldr	r3, [pc, #232]	; (8001fe4 <HAL_FLASH_IRQHandler+0x15c>)
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	607b      	str	r3, [r7, #4]
          HAL_FLASH_EndOfOperationCallback(temp);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f871 	bl	8001fe8 <HAL_FLASH_EndOfOperationCallback>
          temp = ++pFlash.Sector;
 8001f06:	4b37      	ldr	r3, [pc, #220]	; (8001fe4 <HAL_FLASH_IRQHandler+0x15c>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	4a35      	ldr	r2, [pc, #212]	; (8001fe4 <HAL_FLASH_IRQHandler+0x15c>)
 8001f0e:	60d3      	str	r3, [r2, #12]
 8001f10:	607b      	str	r3, [r7, #4]
          FLASH_Erase_Sector(temp, pFlash.VoltageForErase);
 8001f12:	4b34      	ldr	r3, [pc, #208]	; (8001fe4 <HAL_FLASH_IRQHandler+0x15c>)
 8001f14:	7a1b      	ldrb	r3, [r3, #8]
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	4619      	mov	r1, r3
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f8c2 	bl	80020a4 <FLASH_Erase_Sector>
        break;
 8001f20:	e01d      	b.n	8001f5e <HAL_FLASH_IRQHandler+0xd6>
          pFlash.Sector = temp = 0xFFFFFFFFU;
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	4a2e      	ldr	r2, [pc, #184]	; (8001fe4 <HAL_FLASH_IRQHandler+0x15c>)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	60d3      	str	r3, [r2, #12]
          HAL_FLASH_EndOfOperationCallback(temp);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f85a 	bl	8001fe8 <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001f34:	4b2b      	ldr	r3, [pc, #172]	; (8001fe4 <HAL_FLASH_IRQHandler+0x15c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]
        break;
 8001f3a:	e010      	b.n	8001f5e <HAL_FLASH_IRQHandler+0xd6>
        HAL_FLASH_EndOfOperationCallback(0);
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f000 f853 	bl	8001fe8 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001f42:	4b28      	ldr	r3, [pc, #160]	; (8001fe4 <HAL_FLASH_IRQHandler+0x15c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
        break;
 8001f48:	e009      	b.n	8001f5e <HAL_FLASH_IRQHandler+0xd6>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8001f4a:	4b26      	ldr	r3, [pc, #152]	; (8001fe4 <HAL_FLASH_IRQHandler+0x15c>)
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 f84a 	bl	8001fe8 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001f54:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <HAL_FLASH_IRQHandler+0x15c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
        break;
 8001f5a:	e000      	b.n	8001f5e <HAL_FLASH_IRQHandler+0xd6>
    }
  }
 8001f5c:	bf00      	nop
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8001f5e:	4b1f      	ldr	r3, [pc, #124]	; (8001fdc <HAL_FLASH_IRQHandler+0x154>)
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d020      	beq.n	8001fac <HAL_FLASH_IRQHandler+0x124>
  {
    switch (pFlash.ProcedureOnGoing)
 8001f6a:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <HAL_FLASH_IRQHandler+0x15c>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d00c      	beq.n	8001f8e <HAL_FLASH_IRQHandler+0x106>
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d00d      	beq.n	8001f94 <HAL_FLASH_IRQHandler+0x10c>
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d000      	beq.n	8001f7e <HAL_FLASH_IRQHandler+0xf6>
        /*return the faulty address*/
        temp = pFlash.Address;
        break;
      }
    default :
      break;
 8001f7c:	e00e      	b.n	8001f9c <HAL_FLASH_IRQHandler+0x114>
        temp = pFlash.Sector;
 8001f7e:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <HAL_FLASH_IRQHandler+0x15c>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	607b      	str	r3, [r7, #4]
        pFlash.Sector = 0xFFFFFFFFU;
 8001f84:	4b17      	ldr	r3, [pc, #92]	; (8001fe4 <HAL_FLASH_IRQHandler+0x15c>)
 8001f86:	f04f 32ff 	mov.w	r2, #4294967295
 8001f8a:	60da      	str	r2, [r3, #12]
        break;
 8001f8c:	e006      	b.n	8001f9c <HAL_FLASH_IRQHandler+0x114>
        temp = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
        break;
 8001f92:	e003      	b.n	8001f9c <HAL_FLASH_IRQHandler+0x114>
        temp = pFlash.Address;
 8001f94:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <HAL_FLASH_IRQHandler+0x15c>)
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	607b      	str	r3, [r7, #4]
        break;
 8001f9a:	bf00      	nop
    }
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8001f9c:	f000 f838 	bl	8002010 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f82b 	bl	8001ffc <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <HAL_FLASH_IRQHandler+0x15c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8001fac:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <HAL_FLASH_IRQHandler+0x15c>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10e      	bne.n	8001fd4 <HAL_FLASH_IRQHandler+0x14c>
  {
    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <HAL_FLASH_IRQHandler+0x154>)
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	4a08      	ldr	r2, [pc, #32]	; (8001fdc <HAL_FLASH_IRQHandler+0x154>)
 8001fbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fc0:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_FLASH_IRQHandler+0x154>)
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	4a05      	ldr	r2, [pc, #20]	; (8001fdc <HAL_FLASH_IRQHandler+0x154>)
 8001fc8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001fcc:	6113      	str	r3, [r2, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8001fce:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <HAL_FLASH_IRQHandler+0x15c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	751a      	strb	r2, [r3, #20]
  }
  
}
 8001fd4:	bf00      	nop
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40023c00 	.word	0x40023c00
 8001fe0:	ffff7ffb 	.word	0xffff7ffb
 8001fe4:	200000b0 	.word	0x200000b0

08001fe8 <HAL_FLASH_EndOfOperationCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
  */ 
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_FLASH_OperationErrorCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002014:	4b21      	ldr	r3, [pc, #132]	; (800209c <FLASH_SetErrorCode+0x8c>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002020:	4b1f      	ldr	r3, [pc, #124]	; (80020a0 <FLASH_SetErrorCode+0x90>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f043 0320 	orr.w	r3, r3, #32
 8002028:	4a1d      	ldr	r2, [pc, #116]	; (80020a0 <FLASH_SetErrorCode+0x90>)
 800202a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800202c:	4b1b      	ldr	r3, [pc, #108]	; (800209c <FLASH_SetErrorCode+0x8c>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <FLASH_SetErrorCode+0x90>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f043 0310 	orr.w	r3, r3, #16
 8002040:	4a17      	ldr	r2, [pc, #92]	; (80020a0 <FLASH_SetErrorCode+0x90>)
 8002042:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002044:	4b15      	ldr	r3, [pc, #84]	; (800209c <FLASH_SetErrorCode+0x8c>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0320 	and.w	r3, r3, #32
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002050:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <FLASH_SetErrorCode+0x90>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	f043 0308 	orr.w	r3, r3, #8
 8002058:	4a11      	ldr	r2, [pc, #68]	; (80020a0 <FLASH_SetErrorCode+0x90>)
 800205a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800205c:	4b0f      	ldr	r3, [pc, #60]	; (800209c <FLASH_SetErrorCode+0x8c>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002068:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <FLASH_SetErrorCode+0x90>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	f043 0304 	orr.w	r3, r3, #4
 8002070:	4a0b      	ldr	r2, [pc, #44]	; (80020a0 <FLASH_SetErrorCode+0x90>)
 8002072:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <FLASH_SetErrorCode+0x8c>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <FLASH_SetErrorCode+0x90>)
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	f043 0302 	orr.w	r3, r3, #2
 8002088:	4a05      	ldr	r2, [pc, #20]	; (80020a0 <FLASH_SetErrorCode+0x90>)
 800208a:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <FLASH_SetErrorCode+0x8c>)
 800208e:	22f2      	movs	r2, #242	; 0xf2
 8002090:	60da      	str	r2, [r3, #12]
}
 8002092:	bf00      	nop
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	40023c00 	.word	0x40023c00
 80020a0:	200000b0 	.word	0x200000b0

080020a4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d102      	bne.n	80020c0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	e010      	b.n	80020e2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d103      	bne.n	80020ce <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80020c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	e009      	b.n	80020e2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80020ce:	78fb      	ldrb	r3, [r7, #3]
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d103      	bne.n	80020dc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80020d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	e002      	b.n	80020e2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80020dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020e0:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b0b      	cmp	r3, #11
 80020e6:	d902      	bls.n	80020ee <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3304      	adds	r3, #4
 80020ec:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 80020ee:	4b14      	ldr	r3, [pc, #80]	; (8002140 <FLASH_Erase_Sector+0x9c>)
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	4a13      	ldr	r2, [pc, #76]	; (8002140 <FLASH_Erase_Sector+0x9c>)
 80020f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80020fa:	4b11      	ldr	r3, [pc, #68]	; (8002140 <FLASH_Erase_Sector+0x9c>)
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	4910      	ldr	r1, [pc, #64]	; (8002140 <FLASH_Erase_Sector+0x9c>)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4313      	orrs	r3, r2
 8002104:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002106:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <FLASH_Erase_Sector+0x9c>)
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	4a0d      	ldr	r2, [pc, #52]	; (8002140 <FLASH_Erase_Sector+0x9c>)
 800210c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002110:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002112:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <FLASH_Erase_Sector+0x9c>)
 8002114:	691a      	ldr	r2, [r3, #16]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4313      	orrs	r3, r2
 800211c:	4a08      	ldr	r2, [pc, #32]	; (8002140 <FLASH_Erase_Sector+0x9c>)
 800211e:	f043 0302 	orr.w	r3, r3, #2
 8002122:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <FLASH_Erase_Sector+0x9c>)
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	4a05      	ldr	r2, [pc, #20]	; (8002140 <FLASH_Erase_Sector+0x9c>)
 800212a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212e:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002130:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002134:	bf00      	nop
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	40023c00 	.word	0x40023c00

08002144 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_PWR_PVD_IRQHandler+0x20>)
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8002154:	f000 f808 	bl	8002168 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8002158:	4b02      	ldr	r3, [pc, #8]	; (8002164 <HAL_PWR_PVD_IRQHandler+0x20>)
 800215a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800215e:	615a      	str	r2, [r3, #20]
  }
}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40013c00 	.word	0x40013c00

08002168 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800217c:	4b03      	ldr	r3, [pc, #12]	; (800218c <HAL_RCC_GetHCLKFreq+0x14>)
 800217e:	681b      	ldr	r3, [r3, #0]
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20000008 	.word	0x20000008

08002190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002194:	f7ff fff0 	bl	8002178 <HAL_RCC_GetHCLKFreq>
 8002198:	4601      	mov	r1, r0
 800219a:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	0a9b      	lsrs	r3, r3, #10
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	4a03      	ldr	r2, [pc, #12]	; (80021b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021a6:	5cd3      	ldrb	r3, [r2, r3]
 80021a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40023800 	.word	0x40023800
 80021b4:	0800331c 	.word	0x0800331c

080021b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	220f      	movs	r2, #15
 80021c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021c8:	4b12      	ldr	r3, [pc, #72]	; (8002214 <HAL_RCC_GetClockConfig+0x5c>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 0203 	and.w	r2, r3, #3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021d4:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <HAL_RCC_GetClockConfig+0x5c>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <HAL_RCC_GetClockConfig+0x5c>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <HAL_RCC_GetClockConfig+0x5c>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021fa:	4b07      	ldr	r3, [pc, #28]	; (8002218 <HAL_RCC_GetClockConfig+0x60>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 020f 	and.w	r2, r3, #15
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	601a      	str	r2, [r3, #0]
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800
 8002218:	40023c00 	.word	0x40023c00

0800221c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e01d      	b.n	800226a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f815 	bl	8002272 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2202      	movs	r2, #2
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3304      	adds	r3, #4
 8002258:	4619      	mov	r1, r3
 800225a:	4610      	mov	r0, r2
 800225c:	f000 f986 	bl	800256c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 0201 	orr.w	r2, r2, #1
 800229e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <HAL_TIM_Base_Start_IT+0x50>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d00b      	beq.n	80022ca <HAL_TIM_Base_Start_IT+0x42>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b8:	d007      	beq.n	80022ca <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0201 	orr.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	00010007 	.word	0x00010007

080022dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d122      	bne.n	8002338 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d11b      	bne.n	8002338 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0202 	mvn.w	r2, #2
 8002308:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f905 	bl	800252e <HAL_TIM_IC_CaptureCallback>
 8002324:	e005      	b.n	8002332 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f8f7 	bl	800251a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f908 	bl	8002542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f003 0304 	and.w	r3, r3, #4
 8002342:	2b04      	cmp	r3, #4
 8002344:	d122      	bne.n	800238c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b04      	cmp	r3, #4
 8002352:	d11b      	bne.n	800238c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0204 	mvn.w	r2, #4
 800235c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2202      	movs	r2, #2
 8002362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f8db 	bl	800252e <HAL_TIM_IC_CaptureCallback>
 8002378:	e005      	b.n	8002386 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f8cd 	bl	800251a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f8de 	bl	8002542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b08      	cmp	r3, #8
 8002398:	d122      	bne.n	80023e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d11b      	bne.n	80023e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0208 	mvn.w	r2, #8
 80023b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2204      	movs	r2, #4
 80023b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f8b1 	bl	800252e <HAL_TIM_IC_CaptureCallback>
 80023cc:	e005      	b.n	80023da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f8a3 	bl	800251a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f8b4 	bl	8002542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	2b10      	cmp	r3, #16
 80023ec:	d122      	bne.n	8002434 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 0310 	and.w	r3, r3, #16
 80023f8:	2b10      	cmp	r3, #16
 80023fa:	d11b      	bne.n	8002434 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f06f 0210 	mvn.w	r2, #16
 8002404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2208      	movs	r2, #8
 800240a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f887 	bl	800252e <HAL_TIM_IC_CaptureCallback>
 8002420:	e005      	b.n	800242e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f879 	bl	800251a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f88a 	bl	8002542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b01      	cmp	r3, #1
 8002440:	d10e      	bne.n	8002460 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b01      	cmp	r3, #1
 800244e:	d107      	bne.n	8002460 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0201 	mvn.w	r2, #1
 8002458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7fe fd30 	bl	8000ec0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246a:	2b80      	cmp	r3, #128	; 0x80
 800246c:	d10e      	bne.n	800248c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002478:	2b80      	cmp	r3, #128	; 0x80
 800247a:	d107      	bne.n	800248c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f91a 	bl	80026c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800249a:	d10e      	bne.n	80024ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a6:	2b80      	cmp	r3, #128	; 0x80
 80024a8:	d107      	bne.n	80024ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80024b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 f90d 	bl	80026d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c4:	2b40      	cmp	r3, #64	; 0x40
 80024c6:	d10e      	bne.n	80024e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d2:	2b40      	cmp	r3, #64	; 0x40
 80024d4:	d107      	bne.n	80024e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f838 	bl	8002556 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	f003 0320 	and.w	r3, r3, #32
 80024f0:	2b20      	cmp	r3, #32
 80024f2:	d10e      	bne.n	8002512 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f003 0320 	and.w	r3, r3, #32
 80024fe:	2b20      	cmp	r3, #32
 8002500:	d107      	bne.n	8002512 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f06f 0220 	mvn.w	r2, #32
 800250a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f8cd 	bl	80026ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a40      	ldr	r2, [pc, #256]	; (8002680 <TIM_Base_SetConfig+0x114>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d013      	beq.n	80025ac <TIM_Base_SetConfig+0x40>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800258a:	d00f      	beq.n	80025ac <TIM_Base_SetConfig+0x40>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a3d      	ldr	r2, [pc, #244]	; (8002684 <TIM_Base_SetConfig+0x118>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d00b      	beq.n	80025ac <TIM_Base_SetConfig+0x40>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a3c      	ldr	r2, [pc, #240]	; (8002688 <TIM_Base_SetConfig+0x11c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d007      	beq.n	80025ac <TIM_Base_SetConfig+0x40>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a3b      	ldr	r2, [pc, #236]	; (800268c <TIM_Base_SetConfig+0x120>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d003      	beq.n	80025ac <TIM_Base_SetConfig+0x40>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a3a      	ldr	r2, [pc, #232]	; (8002690 <TIM_Base_SetConfig+0x124>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d108      	bne.n	80025be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a2f      	ldr	r2, [pc, #188]	; (8002680 <TIM_Base_SetConfig+0x114>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d02b      	beq.n	800261e <TIM_Base_SetConfig+0xb2>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025cc:	d027      	beq.n	800261e <TIM_Base_SetConfig+0xb2>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a2c      	ldr	r2, [pc, #176]	; (8002684 <TIM_Base_SetConfig+0x118>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d023      	beq.n	800261e <TIM_Base_SetConfig+0xb2>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a2b      	ldr	r2, [pc, #172]	; (8002688 <TIM_Base_SetConfig+0x11c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d01f      	beq.n	800261e <TIM_Base_SetConfig+0xb2>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a2a      	ldr	r2, [pc, #168]	; (800268c <TIM_Base_SetConfig+0x120>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d01b      	beq.n	800261e <TIM_Base_SetConfig+0xb2>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a29      	ldr	r2, [pc, #164]	; (8002690 <TIM_Base_SetConfig+0x124>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d017      	beq.n	800261e <TIM_Base_SetConfig+0xb2>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a28      	ldr	r2, [pc, #160]	; (8002694 <TIM_Base_SetConfig+0x128>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d013      	beq.n	800261e <TIM_Base_SetConfig+0xb2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a27      	ldr	r2, [pc, #156]	; (8002698 <TIM_Base_SetConfig+0x12c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d00f      	beq.n	800261e <TIM_Base_SetConfig+0xb2>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a26      	ldr	r2, [pc, #152]	; (800269c <TIM_Base_SetConfig+0x130>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d00b      	beq.n	800261e <TIM_Base_SetConfig+0xb2>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a25      	ldr	r2, [pc, #148]	; (80026a0 <TIM_Base_SetConfig+0x134>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d007      	beq.n	800261e <TIM_Base_SetConfig+0xb2>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a24      	ldr	r2, [pc, #144]	; (80026a4 <TIM_Base_SetConfig+0x138>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d003      	beq.n	800261e <TIM_Base_SetConfig+0xb2>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a23      	ldr	r2, [pc, #140]	; (80026a8 <TIM_Base_SetConfig+0x13c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d108      	bne.n	8002630 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	4313      	orrs	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	4313      	orrs	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <TIM_Base_SetConfig+0x114>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d003      	beq.n	8002664 <TIM_Base_SetConfig+0xf8>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a0c      	ldr	r2, [pc, #48]	; (8002690 <TIM_Base_SetConfig+0x124>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d103      	bne.n	800266c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	615a      	str	r2, [r3, #20]
}
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40010000 	.word	0x40010000
 8002684:	40000400 	.word	0x40000400
 8002688:	40000800 	.word	0x40000800
 800268c:	40000c00 	.word	0x40000c00
 8002690:	40010400 	.word	0x40010400
 8002694:	40014000 	.word	0x40014000
 8002698:	40014400 	.word	0x40014400
 800269c:	40014800 	.word	0x40014800
 80026a0:	40001800 	.word	0x40001800
 80026a4:	40001c00 	.word	0x40001c00
 80026a8:	40002000 	.word	0x40002000

080026ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b089      	sub	sp, #36	; 0x24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	fa93 f3a3 	rbit	r3, r3
 8002702:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	fab3 f383 	clz	r3, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	2103      	movs	r1, #3
 8002710:	fa01 f303 	lsl.w	r3, r1, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	401a      	ands	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	61bb      	str	r3, [r7, #24]
  return result;
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	fa01 f303 	lsl.w	r3, r1, r3
 8002734:	431a      	orrs	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	601a      	str	r2, [r3, #0]
}
 800273a:	bf00      	nop
 800273c:	3724      	adds	r7, #36	; 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002746:	b480      	push	{r7}
 8002748:	b085      	sub	sp, #20
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	43db      	mvns	r3, r3
 800275a:	401a      	ands	r2, r3
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	fb01 f303 	mul.w	r3, r1, r3
 8002764:	431a      	orrs	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	605a      	str	r2, [r3, #4]
}
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002776:	b480      	push	{r7}
 8002778:	b089      	sub	sp, #36	; 0x24
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	fa93 f3a3 	rbit	r3, r3
 8002790:	613b      	str	r3, [r7, #16]
  return result;
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	fab3 f383 	clz	r3, r3
 8002798:	b2db      	uxtb	r3, r3
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	2103      	movs	r1, #3
 800279e:	fa01 f303 	lsl.w	r3, r1, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	401a      	ands	r2, r3
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	61bb      	str	r3, [r7, #24]
  return result;
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	fab3 f383 	clz	r3, r3
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	fa01 f303 	lsl.w	r3, r1, r3
 80027c2:	431a      	orrs	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80027c8:	bf00      	nop
 80027ca:	3724      	adds	r7, #36	; 0x24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b089      	sub	sp, #36	; 0x24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	fa93 f3a3 	rbit	r3, r3
 80027ee:	613b      	str	r3, [r7, #16]
  return result;
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	fab3 f383 	clz	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	2103      	movs	r1, #3
 80027fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	401a      	ands	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	61bb      	str	r3, [r7, #24]
  return result;
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	fa01 f303 	lsl.w	r3, r1, r3
 8002820:	431a      	orrs	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	60da      	str	r2, [r3, #12]
}
 8002826:	bf00      	nop
 8002828:	3724      	adds	r7, #36	; 0x24
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002832:	b480      	push	{r7}
 8002834:	b089      	sub	sp, #36	; 0x24
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a1a      	ldr	r2, [r3, #32]
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	613b      	str	r3, [r7, #16]
  return result;
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	fab3 f383 	clz	r3, r3
 8002854:	b2db      	uxtb	r3, r3
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	210f      	movs	r1, #15
 800285a:	fa01 f303 	lsl.w	r3, r1, r3
 800285e:	43db      	mvns	r3, r3
 8002860:	401a      	ands	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	fa93 f3a3 	rbit	r3, r3
 800286c:	61bb      	str	r3, [r7, #24]
  return result;
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	fab3 f383 	clz	r3, r3
 8002874:	b2db      	uxtb	r3, r3
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	431a      	orrs	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002884:	bf00      	nop
 8002886:	3724      	adds	r7, #36	; 0x24
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002890:	b480      	push	{r7}
 8002892:	b089      	sub	sp, #36	; 0x24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	0a1b      	lsrs	r3, r3, #8
 80028a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	fa93 f3a3 	rbit	r3, r3
 80028ac:	613b      	str	r3, [r7, #16]
  return result;
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	fab3 f383 	clz	r3, r3
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	210f      	movs	r1, #15
 80028ba:	fa01 f303 	lsl.w	r3, r1, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	401a      	ands	r2, r3
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	0a1b      	lsrs	r3, r3, #8
 80028c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	61bb      	str	r3, [r7, #24]
  return result;
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	fa01 f303 	lsl.w	r3, r1, r3
 80028e0:	431a      	orrs	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80028e6:	bf00      	nop
 80028e8:	3724      	adds	r7, #36	; 0x24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b088      	sub	sp, #32
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002900:	2300      	movs	r3, #0
 8002902:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	fa93 f3a3 	rbit	r3, r3
 8002910:	613b      	str	r3, [r7, #16]
  return result;
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	fab3 f383 	clz	r3, r3
 8002918:	b2db      	uxtb	r3, r3
 800291a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800291c:	e051      	b.n	80029c2 <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	2101      	movs	r1, #1
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	fa01 f303 	lsl.w	r3, r1, r3
 800292a:	4013      	ands	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d043      	beq.n	80029bc <LL_GPIO_Init+0xca>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d003      	beq.n	8002944 <LL_GPIO_Init+0x52>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d10e      	bne.n	8002962 <LL_GPIO_Init+0x70>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	461a      	mov	r2, r3
 800294a:	69b9      	ldr	r1, [r7, #24]
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff ff12 	bl	8002776 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	6819      	ldr	r1, [r3, #0]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	461a      	mov	r2, r3
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7ff fef2 	bl	8002746 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	461a      	mov	r2, r3
 8002968:	69b9      	ldr	r1, [r7, #24]
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff ff32 	bl	80027d4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b02      	cmp	r3, #2
 8002976:	d11a      	bne.n	80029ae <LL_GPIO_Init+0xbc>
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	60bb      	str	r3, [r7, #8]
  return result;
 8002984:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002986:	fab3 f383 	clz	r3, r3
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b07      	cmp	r3, #7
 800298e:	d807      	bhi.n	80029a0 <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	461a      	mov	r2, r3
 8002996:	69b9      	ldr	r1, [r7, #24]
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff ff4a 	bl	8002832 <LL_GPIO_SetAFPin_0_7>
 800299e:	e006      	b.n	80029ae <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	461a      	mov	r2, r3
 80029a6:	69b9      	ldr	r1, [r7, #24]
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff ff71 	bl	8002890 <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	461a      	mov	r2, r3
 80029b4:	69b9      	ldr	r1, [r7, #24]
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff fe96 	bl	80026e8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	3301      	adds	r3, #1
 80029c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	fa22 f303 	lsr.w	r3, r2, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1a6      	bne.n	800291e <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3720      	adds	r7, #32
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <LL_RCC_HSI_IsReady>:
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80029e0:	4b06      	ldr	r3, [pc, #24]	; (80029fc <LL_RCC_HSI_IsReady+0x20>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	bf0c      	ite	eq
 80029ec:	2301      	moveq	r3, #1
 80029ee:	2300      	movne	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	40023800 	.word	0x40023800

08002a00 <LL_RCC_LSE_IsReady>:
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002a04:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <LL_RCC_LSE_IsReady+0x20>)
 8002a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	bf0c      	ite	eq
 8002a10:	2301      	moveq	r3, #1
 8002a12:	2300      	movne	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	40023800 	.word	0x40023800

08002a24 <LL_RCC_GetSysClkSource>:
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a28:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <LL_RCC_GetSysClkSource+0x18>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 030c 	and.w	r3, r3, #12
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800

08002a40 <LL_RCC_GetAHBPrescaler>:
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002a44:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <LL_RCC_GetAHBPrescaler+0x18>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40023800 	.word	0x40023800

08002a5c <LL_RCC_GetAPB1Prescaler>:
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002a60:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800

08002a78 <LL_RCC_GetAPB2Prescaler>:
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002a7c:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800

08002a94 <LL_RCC_GetUSARTClockSource>:
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 8002a9c:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <LL_RCC_GetUSARTClockSource+0x24>)
 8002a9e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	401a      	ands	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	041b      	lsls	r3, r3, #16
 8002aaa:	4313      	orrs	r3, r2
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	40023800 	.word	0x40023800

08002abc <LL_RCC_GetUARTClockSource>:
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, UARTx) | (UARTx << 16U));
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <LL_RCC_GetUARTClockSource+0x24>)
 8002ac6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	401a      	ands	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	041b      	lsls	r3, r3, #16
 8002ad2:	4313      	orrs	r3, r2
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	40023800 	.word	0x40023800

08002ae4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002ae8:	4b04      	ldr	r3, [pc, #16]	; (8002afc <LL_RCC_PLL_GetMainSource+0x18>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40023800 	.word	0x40023800

08002b00 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 50 and 432
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <LL_RCC_PLL_GetN+0x18>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	099b      	lsrs	r3, r3, #6
 8002b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	40023800 	.word	0x40023800

08002b1c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002b20:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <LL_RCC_PLL_GetP+0x18>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40023800 	.word	0x40023800

08002b38 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002b3c:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <LL_RCC_PLL_GetDivider+0x18>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40023800 	.word	0x40023800

08002b54 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d130      	bne.n	8002bc8 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff ff94 	bl	8002a94 <LL_RCC_GetUSARTClockSource>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	4a6d      	ldr	r2, [pc, #436]	; (8002d24 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d009      	beq.n	8002b88 <LL_RCC_GetUSARTClockFreq+0x34>
 8002b74:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8002b78:	d00f      	beq.n	8002b9a <LL_RCC_GetUSARTClockFreq+0x46>
 8002b7a:	4a6b      	ldr	r2, [pc, #428]	; (8002d28 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d116      	bne.n	8002bae <LL_RCC_GetUSARTClockFreq+0x5a>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002b80:	f000 f9de 	bl	8002f40 <RCC_GetSystemClockFreq>
 8002b84:	60f8      	str	r0, [r7, #12]
        break;
 8002b86:	e0c7      	b.n	8002d18 <LL_RCC_GetUSARTClockFreq+0x1c4>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002b88:	f7ff ff28 	bl	80029dc <LL_RCC_HSI_IsReady>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 80b1 	beq.w	8002cf6 <LL_RCC_GetUSARTClockFreq+0x1a2>
        {
          usart_frequency = HSI_VALUE;
 8002b94:	4b65      	ldr	r3, [pc, #404]	; (8002d2c <LL_RCC_GetUSARTClockFreq+0x1d8>)
 8002b96:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002b98:	e0ad      	b.n	8002cf6 <LL_RCC_GetUSARTClockFreq+0x1a2>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002b9a:	f7ff ff31 	bl	8002a00 <LL_RCC_LSE_IsReady>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 80aa 	beq.w	8002cfa <LL_RCC_GetUSARTClockFreq+0x1a6>
        {
          usart_frequency = LSE_VALUE;
 8002ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002baa:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002bac:	e0a5      	b.n	8002cfa <LL_RCC_GetUSARTClockFreq+0x1a6>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002bae:	f000 f9c7 	bl	8002f40 <RCC_GetSystemClockFreq>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 f9e7 	bl	8002f88 <RCC_GetHCLKClockFreq>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 fa0d 	bl	8002fdc <RCC_GetPCLK2ClockFreq>
 8002bc2:	60f8      	str	r0, [r7, #12]
        break;
 8002bc4:	bf00      	nop
 8002bc6:	e0a7      	b.n	8002d18 <LL_RCC_GetUSARTClockFreq+0x1c4>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b0c      	cmp	r3, #12
 8002bcc:	d12f      	bne.n	8002c2e <LL_RCC_GetUSARTClockFreq+0xda>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff ff60 	bl	8002a94 <LL_RCC_GetUSARTClockSource>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	4a56      	ldr	r2, [pc, #344]	; (8002d30 <LL_RCC_GetUSARTClockFreq+0x1dc>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d009      	beq.n	8002bf0 <LL_RCC_GetUSARTClockFreq+0x9c>
 8002bdc:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8002be0:	d00f      	beq.n	8002c02 <LL_RCC_GetUSARTClockFreq+0xae>
 8002be2:	4a54      	ldr	r2, [pc, #336]	; (8002d34 <LL_RCC_GetUSARTClockFreq+0x1e0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d115      	bne.n	8002c14 <LL_RCC_GetUSARTClockFreq+0xc0>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002be8:	f000 f9aa 	bl	8002f40 <RCC_GetSystemClockFreq>
 8002bec:	60f8      	str	r0, [r7, #12]
        break;
 8002bee:	e093      	b.n	8002d18 <LL_RCC_GetUSARTClockFreq+0x1c4>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002bf0:	f7ff fef4 	bl	80029dc <LL_RCC_HSI_IsReady>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 8081 	beq.w	8002cfe <LL_RCC_GetUSARTClockFreq+0x1aa>
        {
          usart_frequency = HSI_VALUE;
 8002bfc:	4b4b      	ldr	r3, [pc, #300]	; (8002d2c <LL_RCC_GetUSARTClockFreq+0x1d8>)
 8002bfe:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002c00:	e07d      	b.n	8002cfe <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002c02:	f7ff fefd 	bl	8002a00 <LL_RCC_LSE_IsReady>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d07a      	beq.n	8002d02 <LL_RCC_GetUSARTClockFreq+0x1ae>
        {
          usart_frequency = LSE_VALUE;
 8002c0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c10:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002c12:	e076      	b.n	8002d02 <LL_RCC_GetUSARTClockFreq+0x1ae>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002c14:	f000 f994 	bl	8002f40 <RCC_GetSystemClockFreq>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 f9b4 	bl	8002f88 <RCC_GetHCLKClockFreq>
 8002c20:	4603      	mov	r3, r0
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 f9c6 	bl	8002fb4 <RCC_GetPCLK1ClockFreq>
 8002c28:	60f8      	str	r0, [r7, #12]
        break;
 8002c2a:	bf00      	nop
 8002c2c:	e074      	b.n	8002d18 <LL_RCC_GetUSARTClockFreq+0x1c4>
    }
  }
  else if (USARTxSource == LL_RCC_USART6_CLKSOURCE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c34:	d12e      	bne.n	8002c94 <LL_RCC_GetUSARTClockFreq+0x140>
  {
    /* USART6CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff ff2c 	bl	8002a94 <LL_RCC_GetUSARTClockSource>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	4a3e      	ldr	r2, [pc, #248]	; (8002d38 <LL_RCC_GetUSARTClockFreq+0x1e4>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d009      	beq.n	8002c58 <LL_RCC_GetUSARTClockFreq+0x104>
 8002c44:	f1b3 2f0c 	cmp.w	r3, #201329664	; 0xc000c00
 8002c48:	d00e      	beq.n	8002c68 <LL_RCC_GetUSARTClockFreq+0x114>
 8002c4a:	4a3c      	ldr	r2, [pc, #240]	; (8002d3c <LL_RCC_GetUSARTClockFreq+0x1e8>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d114      	bne.n	8002c7a <LL_RCC_GetUSARTClockFreq+0x126>
    {
      case LL_RCC_USART6_CLKSOURCE_SYSCLK: /* USART6 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002c50:	f000 f976 	bl	8002f40 <RCC_GetSystemClockFreq>
 8002c54:	60f8      	str	r0, [r7, #12]
        break;
 8002c56:	e05f      	b.n	8002d18 <LL_RCC_GetUSARTClockFreq+0x1c4>

      case LL_RCC_USART6_CLKSOURCE_HSI:    /* USART6 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002c58:	f7ff fec0 	bl	80029dc <LL_RCC_HSI_IsReady>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d051      	beq.n	8002d06 <LL_RCC_GetUSARTClockFreq+0x1b2>
        {
          usart_frequency = HSI_VALUE;
 8002c62:	4b32      	ldr	r3, [pc, #200]	; (8002d2c <LL_RCC_GetUSARTClockFreq+0x1d8>)
 8002c64:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002c66:	e04e      	b.n	8002d06 <LL_RCC_GetUSARTClockFreq+0x1b2>

      case LL_RCC_USART6_CLKSOURCE_LSE:    /* USART6 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002c68:	f7ff feca 	bl	8002a00 <LL_RCC_LSE_IsReady>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d04b      	beq.n	8002d0a <LL_RCC_GetUSARTClockFreq+0x1b6>
        {
          usart_frequency = LSE_VALUE;
 8002c72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c76:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002c78:	e047      	b.n	8002d0a <LL_RCC_GetUSARTClockFreq+0x1b6>

      case LL_RCC_USART6_CLKSOURCE_PCLK2:  /* USART6 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002c7a:	f000 f961 	bl	8002f40 <RCC_GetSystemClockFreq>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 f981 	bl	8002f88 <RCC_GetHCLKClockFreq>
 8002c86:	4603      	mov	r3, r0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 f9a7 	bl	8002fdc <RCC_GetPCLK2ClockFreq>
 8002c8e:	60f8      	str	r0, [r7, #12]
        break;
 8002c90:	bf00      	nop
 8002c92:	e041      	b.n	8002d18 <LL_RCC_GetUSARTClockFreq+0x1c4>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b30      	cmp	r3, #48	; 0x30
 8002c98:	d139      	bne.n	8002d0e <LL_RCC_GetUSARTClockFreq+0x1ba>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff fefa 	bl	8002a94 <LL_RCC_GetUSARTClockSource>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	4a27      	ldr	r2, [pc, #156]	; (8002d40 <LL_RCC_GetUSARTClockFreq+0x1ec>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d009      	beq.n	8002cbc <LL_RCC_GetUSARTClockFreq+0x168>
 8002ca8:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8002cac:	d00e      	beq.n	8002ccc <LL_RCC_GetUSARTClockFreq+0x178>
 8002cae:	4a25      	ldr	r2, [pc, #148]	; (8002d44 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d114      	bne.n	8002cde <LL_RCC_GetUSARTClockFreq+0x18a>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8002cb4:	f000 f944 	bl	8002f40 <RCC_GetSystemClockFreq>
 8002cb8:	60f8      	str	r0, [r7, #12]
          break;
 8002cba:	e02d      	b.n	8002d18 <LL_RCC_GetUSARTClockFreq+0x1c4>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 8002cbc:	f7ff fe8e 	bl	80029dc <LL_RCC_HSI_IsReady>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d025      	beq.n	8002d12 <LL_RCC_GetUSARTClockFreq+0x1be>
          {
            usart_frequency = HSI_VALUE;
 8002cc6:	4b19      	ldr	r3, [pc, #100]	; (8002d2c <LL_RCC_GetUSARTClockFreq+0x1d8>)
 8002cc8:	60fb      	str	r3, [r7, #12]
          }
          break;
 8002cca:	e022      	b.n	8002d12 <LL_RCC_GetUSARTClockFreq+0x1be>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 8002ccc:	f7ff fe98 	bl	8002a00 <LL_RCC_LSE_IsReady>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d01f      	beq.n	8002d16 <LL_RCC_GetUSARTClockFreq+0x1c2>
          {
            usart_frequency = LSE_VALUE;
 8002cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cda:	60fb      	str	r3, [r7, #12]
          }
          break;
 8002cdc:	e01b      	b.n	8002d16 <LL_RCC_GetUSARTClockFreq+0x1c2>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002cde:	f000 f92f 	bl	8002f40 <RCC_GetSystemClockFreq>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 f94f 	bl	8002f88 <RCC_GetHCLKClockFreq>
 8002cea:	4603      	mov	r3, r0
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 f961 	bl	8002fb4 <RCC_GetPCLK1ClockFreq>
 8002cf2:	60f8      	str	r0, [r7, #12]
          break;
 8002cf4:	e010      	b.n	8002d18 <LL_RCC_GetUSARTClockFreq+0x1c4>
        break;
 8002cf6:	bf00      	nop
 8002cf8:	e00e      	b.n	8002d18 <LL_RCC_GetUSARTClockFreq+0x1c4>
        break;
 8002cfa:	bf00      	nop
 8002cfc:	e00c      	b.n	8002d18 <LL_RCC_GetUSARTClockFreq+0x1c4>
        break;
 8002cfe:	bf00      	nop
 8002d00:	e00a      	b.n	8002d18 <LL_RCC_GetUSARTClockFreq+0x1c4>
        break;
 8002d02:	bf00      	nop
 8002d04:	e008      	b.n	8002d18 <LL_RCC_GetUSARTClockFreq+0x1c4>
        break;
 8002d06:	bf00      	nop
 8002d08:	e006      	b.n	8002d18 <LL_RCC_GetUSARTClockFreq+0x1c4>
        break;
 8002d0a:	bf00      	nop
 8002d0c:	e004      	b.n	8002d18 <LL_RCC_GetUSARTClockFreq+0x1c4>
      }
    }
 8002d0e:	bf00      	nop
 8002d10:	e002      	b.n	8002d18 <LL_RCC_GetUSARTClockFreq+0x1c4>
          break;
 8002d12:	bf00      	nop
 8002d14:	e000      	b.n	8002d18 <LL_RCC_GetUSARTClockFreq+0x1c4>
          break;
 8002d16:	bf00      	nop
  }
  return usart_frequency;
 8002d18:	68fb      	ldr	r3, [r7, #12]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	00030002 	.word	0x00030002
 8002d28:	00030001 	.word	0x00030001
 8002d2c:	00f42400 	.word	0x00f42400
 8002d30:	000c0008 	.word	0x000c0008
 8002d34:	000c0004 	.word	0x000c0004
 8002d38:	0c000800 	.word	0x0c000800
 8002d3c:	0c000400 	.word	0x0c000400
 8002d40:	00300020 	.word	0x00300020
 8002d44:	00300010 	.word	0x00300010

08002d48 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART8_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2bc0      	cmp	r3, #192	; 0xc0
 8002d58:	d130      	bne.n	8002dbc <LL_RCC_GetUARTClockFreq+0x74>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff feae 	bl	8002abc <LL_RCC_GetUARTClockSource>
 8002d60:	4603      	mov	r3, r0
 8002d62:	4a6e      	ldr	r2, [pc, #440]	; (8002f1c <LL_RCC_GetUARTClockFreq+0x1d4>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d009      	beq.n	8002d7c <LL_RCC_GetUARTClockFreq+0x34>
 8002d68:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8002d6c:	d00f      	beq.n	8002d8e <LL_RCC_GetUARTClockFreq+0x46>
 8002d6e:	4a6c      	ldr	r2, [pc, #432]	; (8002f20 <LL_RCC_GetUARTClockFreq+0x1d8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d116      	bne.n	8002da2 <LL_RCC_GetUARTClockFreq+0x5a>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8002d74:	f000 f8e4 	bl	8002f40 <RCC_GetSystemClockFreq>
 8002d78:	60f8      	str	r0, [r7, #12]
        break;
 8002d7a:	e0c9      	b.n	8002f10 <LL_RCC_GetUARTClockFreq+0x1c8>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002d7c:	f7ff fe2e 	bl	80029dc <LL_RCC_HSI_IsReady>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 80b3 	beq.w	8002eee <LL_RCC_GetUARTClockFreq+0x1a6>
        {
          uart_frequency = HSI_VALUE;
 8002d88:	4b66      	ldr	r3, [pc, #408]	; (8002f24 <LL_RCC_GetUARTClockFreq+0x1dc>)
 8002d8a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002d8c:	e0af      	b.n	8002eee <LL_RCC_GetUARTClockFreq+0x1a6>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002d8e:	f7ff fe37 	bl	8002a00 <LL_RCC_LSE_IsReady>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80ac 	beq.w	8002ef2 <LL_RCC_GetUARTClockFreq+0x1aa>
        {
          uart_frequency = LSE_VALUE;
 8002d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d9e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002da0:	e0a7      	b.n	8002ef2 <LL_RCC_GetUARTClockFreq+0x1aa>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002da2:	f000 f8cd 	bl	8002f40 <RCC_GetSystemClockFreq>
 8002da6:	4603      	mov	r3, r0
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 f8ed 	bl	8002f88 <RCC_GetHCLKClockFreq>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 f8ff 	bl	8002fb4 <RCC_GetPCLK1ClockFreq>
 8002db6:	60f8      	str	r0, [r7, #12]
        break;
 8002db8:	bf00      	nop
 8002dba:	e0a9      	b.n	8002f10 <LL_RCC_GetUARTClockFreq+0x1c8>
    }
  }
  else if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dc2:	d12f      	bne.n	8002e24 <LL_RCC_GetUARTClockFreq+0xdc>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff fe79 	bl	8002abc <LL_RCC_GetUARTClockSource>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4a56      	ldr	r2, [pc, #344]	; (8002f28 <LL_RCC_GetUARTClockFreq+0x1e0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d009      	beq.n	8002de6 <LL_RCC_GetUARTClockFreq+0x9e>
 8002dd2:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8002dd6:	d00f      	beq.n	8002df8 <LL_RCC_GetUARTClockFreq+0xb0>
 8002dd8:	4a54      	ldr	r2, [pc, #336]	; (8002f2c <LL_RCC_GetUARTClockFreq+0x1e4>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d115      	bne.n	8002e0a <LL_RCC_GetUARTClockFreq+0xc2>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8002dde:	f000 f8af 	bl	8002f40 <RCC_GetSystemClockFreq>
 8002de2:	60f8      	str	r0, [r7, #12]
        break;
 8002de4:	e094      	b.n	8002f10 <LL_RCC_GetUARTClockFreq+0x1c8>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002de6:	f7ff fdf9 	bl	80029dc <LL_RCC_HSI_IsReady>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 8082 	beq.w	8002ef6 <LL_RCC_GetUARTClockFreq+0x1ae>
        {
          uart_frequency = HSI_VALUE;
 8002df2:	4b4c      	ldr	r3, [pc, #304]	; (8002f24 <LL_RCC_GetUARTClockFreq+0x1dc>)
 8002df4:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002df6:	e07e      	b.n	8002ef6 <LL_RCC_GetUARTClockFreq+0x1ae>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002df8:	f7ff fe02 	bl	8002a00 <LL_RCC_LSE_IsReady>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d07b      	beq.n	8002efa <LL_RCC_GetUARTClockFreq+0x1b2>
        {
          uart_frequency = LSE_VALUE;
 8002e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e06:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002e08:	e077      	b.n	8002efa <LL_RCC_GetUARTClockFreq+0x1b2>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002e0a:	f000 f899 	bl	8002f40 <RCC_GetSystemClockFreq>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 f8b9 	bl	8002f88 <RCC_GetHCLKClockFreq>
 8002e16:	4603      	mov	r3, r0
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 f8cb 	bl	8002fb4 <RCC_GetPCLK1ClockFreq>
 8002e1e:	60f8      	str	r0, [r7, #12]
        break;
 8002e20:	bf00      	nop
 8002e22:	e075      	b.n	8002f10 <LL_RCC_GetUARTClockFreq+0x1c8>
    }
  }
  else if (UARTxSource == LL_RCC_UART7_CLKSOURCE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e2a:	d12e      	bne.n	8002e8a <LL_RCC_GetUARTClockFreq+0x142>
  {
    /* UART7CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff fe45 	bl	8002abc <LL_RCC_GetUARTClockSource>
 8002e32:	4603      	mov	r3, r0
 8002e34:	4a3e      	ldr	r2, [pc, #248]	; (8002f30 <LL_RCC_GetUARTClockFreq+0x1e8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d009      	beq.n	8002e4e <LL_RCC_GetUARTClockFreq+0x106>
 8002e3a:	f1b3 2f30 	cmp.w	r3, #805318656	; 0x30003000
 8002e3e:	d00e      	beq.n	8002e5e <LL_RCC_GetUARTClockFreq+0x116>
 8002e40:	4a3c      	ldr	r2, [pc, #240]	; (8002f34 <LL_RCC_GetUARTClockFreq+0x1ec>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d114      	bne.n	8002e70 <LL_RCC_GetUARTClockFreq+0x128>
    {
      case LL_RCC_UART7_CLKSOURCE_SYSCLK: /* UART7 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8002e46:	f000 f87b 	bl	8002f40 <RCC_GetSystemClockFreq>
 8002e4a:	60f8      	str	r0, [r7, #12]
        break;
 8002e4c:	e060      	b.n	8002f10 <LL_RCC_GetUARTClockFreq+0x1c8>

      case LL_RCC_UART7_CLKSOURCE_HSI:    /* UART7 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002e4e:	f7ff fdc5 	bl	80029dc <LL_RCC_HSI_IsReady>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d052      	beq.n	8002efe <LL_RCC_GetUARTClockFreq+0x1b6>
        {
          uart_frequency = HSI_VALUE;
 8002e58:	4b32      	ldr	r3, [pc, #200]	; (8002f24 <LL_RCC_GetUARTClockFreq+0x1dc>)
 8002e5a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002e5c:	e04f      	b.n	8002efe <LL_RCC_GetUARTClockFreq+0x1b6>

      case LL_RCC_UART7_CLKSOURCE_LSE:    /* UART7 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002e5e:	f7ff fdcf 	bl	8002a00 <LL_RCC_LSE_IsReady>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d04c      	beq.n	8002f02 <LL_RCC_GetUARTClockFreq+0x1ba>
        {
          uart_frequency = LSE_VALUE;
 8002e68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e6c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002e6e:	e048      	b.n	8002f02 <LL_RCC_GetUARTClockFreq+0x1ba>

      case LL_RCC_UART7_CLKSOURCE_PCLK1:  /* UART7 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002e70:	f000 f866 	bl	8002f40 <RCC_GetSystemClockFreq>
 8002e74:	4603      	mov	r3, r0
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 f886 	bl	8002f88 <RCC_GetHCLKClockFreq>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 f898 	bl	8002fb4 <RCC_GetPCLK1ClockFreq>
 8002e84:	60f8      	str	r0, [r7, #12]
        break;
 8002e86:	bf00      	nop
 8002e88:	e042      	b.n	8002f10 <LL_RCC_GetUARTClockFreq+0x1c8>
    }
  }
  else
  {
    if (UARTxSource == LL_RCC_UART8_CLKSOURCE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e90:	d139      	bne.n	8002f06 <LL_RCC_GetUARTClockFreq+0x1be>
    {
      /* UART8CLK clock frequency */
      switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff fe12 	bl	8002abc <LL_RCC_GetUARTClockSource>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	4a27      	ldr	r2, [pc, #156]	; (8002f38 <LL_RCC_GetUARTClockFreq+0x1f0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d009      	beq.n	8002eb4 <LL_RCC_GetUARTClockFreq+0x16c>
 8002ea0:	f1b3 2fc0 	cmp.w	r3, #3221274624	; 0xc000c000
 8002ea4:	d00e      	beq.n	8002ec4 <LL_RCC_GetUARTClockFreq+0x17c>
 8002ea6:	4a25      	ldr	r2, [pc, #148]	; (8002f3c <LL_RCC_GetUARTClockFreq+0x1f4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d114      	bne.n	8002ed6 <LL_RCC_GetUARTClockFreq+0x18e>
      {
        case LL_RCC_UART8_CLKSOURCE_SYSCLK: /* UART8 Clock is System Clock */
          uart_frequency = RCC_GetSystemClockFreq();
 8002eac:	f000 f848 	bl	8002f40 <RCC_GetSystemClockFreq>
 8002eb0:	60f8      	str	r0, [r7, #12]
          break;
 8002eb2:	e02d      	b.n	8002f10 <LL_RCC_GetUARTClockFreq+0x1c8>

        case LL_RCC_UART8_CLKSOURCE_HSI:    /* UART8 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 8002eb4:	f7ff fd92 	bl	80029dc <LL_RCC_HSI_IsReady>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d025      	beq.n	8002f0a <LL_RCC_GetUARTClockFreq+0x1c2>
          {
            uart_frequency = HSI_VALUE;
 8002ebe:	4b19      	ldr	r3, [pc, #100]	; (8002f24 <LL_RCC_GetUARTClockFreq+0x1dc>)
 8002ec0:	60fb      	str	r3, [r7, #12]
          }
          break;
 8002ec2:	e022      	b.n	8002f0a <LL_RCC_GetUARTClockFreq+0x1c2>

        case LL_RCC_UART8_CLKSOURCE_LSE:    /* UART8 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 8002ec4:	f7ff fd9c 	bl	8002a00 <LL_RCC_LSE_IsReady>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d01f      	beq.n	8002f0e <LL_RCC_GetUARTClockFreq+0x1c6>
          {
            uart_frequency = LSE_VALUE;
 8002ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ed2:	60fb      	str	r3, [r7, #12]
          }
          break;
 8002ed4:	e01b      	b.n	8002f0e <LL_RCC_GetUARTClockFreq+0x1c6>

        case LL_RCC_UART8_CLKSOURCE_PCLK1:  /* UART8 Clock is PCLK1 */
        default:
          uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002ed6:	f000 f833 	bl	8002f40 <RCC_GetSystemClockFreq>
 8002eda:	4603      	mov	r3, r0
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 f853 	bl	8002f88 <RCC_GetHCLKClockFreq>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 f865 	bl	8002fb4 <RCC_GetPCLK1ClockFreq>
 8002eea:	60f8      	str	r0, [r7, #12]
          break;
 8002eec:	e010      	b.n	8002f10 <LL_RCC_GetUARTClockFreq+0x1c8>
        break;
 8002eee:	bf00      	nop
 8002ef0:	e00e      	b.n	8002f10 <LL_RCC_GetUARTClockFreq+0x1c8>
        break;
 8002ef2:	bf00      	nop
 8002ef4:	e00c      	b.n	8002f10 <LL_RCC_GetUARTClockFreq+0x1c8>
        break;
 8002ef6:	bf00      	nop
 8002ef8:	e00a      	b.n	8002f10 <LL_RCC_GetUARTClockFreq+0x1c8>
        break;
 8002efa:	bf00      	nop
 8002efc:	e008      	b.n	8002f10 <LL_RCC_GetUARTClockFreq+0x1c8>
        break;
 8002efe:	bf00      	nop
 8002f00:	e006      	b.n	8002f10 <LL_RCC_GetUARTClockFreq+0x1c8>
        break;
 8002f02:	bf00      	nop
 8002f04:	e004      	b.n	8002f10 <LL_RCC_GetUARTClockFreq+0x1c8>
      }
    }
 8002f06:	bf00      	nop
 8002f08:	e002      	b.n	8002f10 <LL_RCC_GetUARTClockFreq+0x1c8>
          break;
 8002f0a:	bf00      	nop
 8002f0c:	e000      	b.n	8002f10 <LL_RCC_GetUARTClockFreq+0x1c8>
          break;
 8002f0e:	bf00      	nop
  }
  return uart_frequency;
 8002f10:	68fb      	ldr	r3, [r7, #12]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	00c00080 	.word	0x00c00080
 8002f20:	00c00040 	.word	0x00c00040
 8002f24:	00f42400 	.word	0x00f42400
 8002f28:	03000200 	.word	0x03000200
 8002f2c:	03000100 	.word	0x03000100
 8002f30:	30002000 	.word	0x30002000
 8002f34:	30001000 	.word	0x30001000
 8002f38:	c0008000 	.word	0xc0008000
 8002f3c:	c0004000 	.word	0xc0004000

08002f40 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002f4a:	f7ff fd6b 	bl	8002a24 <LL_RCC_GetSysClkSource>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d006      	beq.n	8002f62 <RCC_GetSystemClockFreq+0x22>
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d007      	beq.n	8002f68 <RCC_GetSystemClockFreq+0x28>
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d109      	bne.n	8002f70 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002f5c:	4b08      	ldr	r3, [pc, #32]	; (8002f80 <RCC_GetSystemClockFreq+0x40>)
 8002f5e:	607b      	str	r3, [r7, #4]
      break;
 8002f60:	e009      	b.n	8002f76 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002f62:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <RCC_GetSystemClockFreq+0x44>)
 8002f64:	607b      	str	r3, [r7, #4]
      break;
 8002f66:	e006      	b.n	8002f76 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002f68:	f000 f84c 	bl	8003004 <RCC_PLL_GetFreqDomain_SYS>
 8002f6c:	6078      	str	r0, [r7, #4]
      break;
 8002f6e:	e002      	b.n	8002f76 <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8002f70:	4b03      	ldr	r3, [pc, #12]	; (8002f80 <RCC_GetSystemClockFreq+0x40>)
 8002f72:	607b      	str	r3, [r7, #4]
      break;
 8002f74:	bf00      	nop
  }

  return frequency;
 8002f76:	687b      	ldr	r3, [r7, #4]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	00f42400 	.word	0x00f42400
 8002f84:	017d7840 	.word	0x017d7840

08002f88 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002f90:	f7ff fd56 	bl	8002a40 <LL_RCC_GetAHBPrescaler>
 8002f94:	4603      	mov	r3, r0
 8002f96:	091b      	lsrs	r3, r3, #4
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	4a04      	ldr	r2, [pc, #16]	; (8002fb0 <RCC_GetHCLKClockFreq+0x28>)
 8002f9e:	5cd3      	ldrb	r3, [r2, r3]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	40d3      	lsrs	r3, r2
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	0800330c 	.word	0x0800330c

08002fb4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002fbc:	f7ff fd4e 	bl	8002a5c <LL_RCC_GetAPB1Prescaler>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	0a9b      	lsrs	r3, r3, #10
 8002fc4:	4a04      	ldr	r2, [pc, #16]	; (8002fd8 <RCC_GetPCLK1ClockFreq+0x24>)
 8002fc6:	5cd3      	ldrb	r3, [r2, r3]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	40d3      	lsrs	r3, r2
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	0800331c 	.word	0x0800331c

08002fdc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002fe4:	f7ff fd48 	bl	8002a78 <LL_RCC_GetAPB2Prescaler>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	0b5b      	lsrs	r3, r3, #13
 8002fec:	4a04      	ldr	r2, [pc, #16]	; (8003000 <RCC_GetPCLK2ClockFreq+0x24>)
 8002fee:	5cd3      	ldrb	r3, [r2, r3]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	40d3      	lsrs	r3, r2
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	0800331c 	.word	0x0800331c

08003004 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003004:	b590      	push	{r4, r7, lr}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800300a:	2300      	movs	r3, #0
 800300c:	607b      	str	r3, [r7, #4]
 800300e:	2300      	movs	r3, #0
 8003010:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003012:	f7ff fd67 	bl	8002ae4 <LL_RCC_PLL_GetMainSource>
 8003016:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800301e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003022:	d003      	beq.n	800302c <RCC_PLL_GetFreqDomain_SYS+0x28>
 8003024:	e005      	b.n	8003032 <RCC_PLL_GetFreqDomain_SYS+0x2e>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003026:	4b10      	ldr	r3, [pc, #64]	; (8003068 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8003028:	607b      	str	r3, [r7, #4]
      break;
 800302a:	e005      	b.n	8003038 <RCC_PLL_GetFreqDomain_SYS+0x34>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800302c:	4b0f      	ldr	r3, [pc, #60]	; (800306c <RCC_PLL_GetFreqDomain_SYS+0x68>)
 800302e:	607b      	str	r3, [r7, #4]
      break;
 8003030:	e002      	b.n	8003038 <RCC_PLL_GetFreqDomain_SYS+0x34>

    default:
      pllinputfreq = HSI_VALUE;
 8003032:	4b0d      	ldr	r3, [pc, #52]	; (8003068 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8003034:	607b      	str	r3, [r7, #4]
      break;
 8003036:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003038:	f7ff fd7e 	bl	8002b38 <LL_RCC_PLL_GetDivider>
 800303c:	4602      	mov	r2, r0
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	fbb3 f4f2 	udiv	r4, r3, r2
 8003044:	f7ff fd5c 	bl	8002b00 <LL_RCC_PLL_GetN>
 8003048:	4603      	mov	r3, r0
 800304a:	fb03 f404 	mul.w	r4, r3, r4
 800304e:	f7ff fd65 	bl	8002b1c <LL_RCC_PLL_GetP>
 8003052:	4603      	mov	r3, r0
 8003054:	0c1b      	lsrs	r3, r3, #16
 8003056:	3301      	adds	r3, #1
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 800305e:	4618      	mov	r0, r3
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	bd90      	pop	{r4, r7, pc}
 8003066:	bf00      	nop
 8003068:	00f42400 	.word	0x00f42400
 800306c:	017d7840 	.word	0x017d7840

08003070 <LL_USART_IsEnabled>:
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <LL_USART_IsEnabled+0x18>
 8003084:	2301      	movs	r3, #1
 8003086:	e000      	b.n	800308a <LL_USART_IsEnabled+0x1a>
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <LL_USART_SetStopBitsLength>:
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	605a      	str	r2, [r3, #4]
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <LL_USART_SetHWFlowCtrl>:
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	431a      	orrs	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	609a      	str	r2, [r3, #8]
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <LL_USART_SetBaudRate>:
{
 80030e2:	b490      	push	{r4, r7}
 80030e4:	b086      	sub	sp, #24
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	607a      	str	r2, [r7, #4]
 80030ee:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f6:	d116      	bne.n	8003126 <LL_USART_SetBaudRate+0x44>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	005a      	lsls	r2, r3, #1
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	085b      	lsrs	r3, r3, #1
 8003100:	441a      	add	r2, r3
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	fbb2 f3f3 	udiv	r3, r2, r3
 8003108:	b29b      	uxth	r3, r3
 800310a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8003112:	401c      	ands	r4, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	085b      	lsrs	r3, r3, #1
 8003118:	b29b      	uxth	r3, r3
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	60dc      	str	r4, [r3, #12]
}
 8003124:	e00a      	b.n	800313c <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	085a      	lsrs	r2, r3, #1
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	441a      	add	r2, r3
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	fbb2 f3f3 	udiv	r3, r2, r3
 8003134:	b29b      	uxth	r3, r3
 8003136:	461a      	mov	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	60da      	str	r2, [r3, #12]
}
 800313c:	bf00      	nop
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bc90      	pop	{r4, r7}
 8003144:	4770      	bx	lr
	...

08003148 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003156:	2300      	movs	r3, #0
 8003158:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff ff88 	bl	8003070 <LL_USART_IsEnabled>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d179      	bne.n	800325a <LL_USART_Init+0x112>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	4b3e      	ldr	r3, [pc, #248]	; (8003264 <LL_USART_Init+0x11c>)
 800316c:	4013      	ands	r3, r2
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	6851      	ldr	r1, [r2, #4]
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	68d2      	ldr	r2, [r2, #12]
 8003176:	4311      	orrs	r1, r2
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	6912      	ldr	r2, [r2, #16]
 800317c:	4311      	orrs	r1, r2
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	6992      	ldr	r2, [r2, #24]
 8003182:	430a      	orrs	r2, r1
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	4619      	mov	r1, r3
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff ff80 	bl	8003096 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	4619      	mov	r1, r3
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff ff8d 	bl	80030bc <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a30      	ldr	r2, [pc, #192]	; (8003268 <LL_USART_Init+0x120>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d104      	bne.n	80031b4 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80031aa:	2003      	movs	r0, #3
 80031ac:	f7ff fcd2 	bl	8002b54 <LL_RCC_GetUSARTClockFreq>
 80031b0:	60b8      	str	r0, [r7, #8]
 80031b2:	e041      	b.n	8003238 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART2)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a2d      	ldr	r2, [pc, #180]	; (800326c <LL_USART_Init+0x124>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d104      	bne.n	80031c6 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80031bc:	200c      	movs	r0, #12
 80031be:	f7ff fcc9 	bl	8002b54 <LL_RCC_GetUSARTClockFreq>
 80031c2:	60b8      	str	r0, [r7, #8]
 80031c4:	e038      	b.n	8003238 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART3)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a29      	ldr	r2, [pc, #164]	; (8003270 <LL_USART_Init+0x128>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d104      	bne.n	80031d8 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80031ce:	2030      	movs	r0, #48	; 0x30
 80031d0:	f7ff fcc0 	bl	8002b54 <LL_RCC_GetUSARTClockFreq>
 80031d4:	60b8      	str	r0, [r7, #8]
 80031d6:	e02f      	b.n	8003238 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART4)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a26      	ldr	r2, [pc, #152]	; (8003274 <LL_USART_Init+0x12c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d104      	bne.n	80031ea <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80031e0:	20c0      	movs	r0, #192	; 0xc0
 80031e2:	f7ff fdb1 	bl	8002d48 <LL_RCC_GetUARTClockFreq>
 80031e6:	60b8      	str	r0, [r7, #8]
 80031e8:	e026      	b.n	8003238 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART5)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a22      	ldr	r2, [pc, #136]	; (8003278 <LL_USART_Init+0x130>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d105      	bne.n	80031fe <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80031f2:	f44f 7040 	mov.w	r0, #768	; 0x300
 80031f6:	f7ff fda7 	bl	8002d48 <LL_RCC_GetUARTClockFreq>
 80031fa:	60b8      	str	r0, [r7, #8]
 80031fc:	e01c      	b.n	8003238 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART6)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a1e      	ldr	r2, [pc, #120]	; (800327c <LL_USART_Init+0x134>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d105      	bne.n	8003212 <LL_USART_Init+0xca>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART6_CLKSOURCE);
 8003206:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800320a:	f7ff fca3 	bl	8002b54 <LL_RCC_GetUSARTClockFreq>
 800320e:	60b8      	str	r0, [r7, #8]
 8003210:	e012      	b.n	8003238 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART7)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a1a      	ldr	r2, [pc, #104]	; (8003280 <LL_USART_Init+0x138>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d105      	bne.n	8003226 <LL_USART_Init+0xde>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART7_CLKSOURCE);
 800321a:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800321e:	f7ff fd93 	bl	8002d48 <LL_RCC_GetUARTClockFreq>
 8003222:	60b8      	str	r0, [r7, #8]
 8003224:	e008      	b.n	8003238 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART8)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a16      	ldr	r2, [pc, #88]	; (8003284 <LL_USART_Init+0x13c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d104      	bne.n	8003238 <LL_USART_Init+0xf0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 800322e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8003232:	f7ff fd89 	bl	8002d48 <LL_RCC_GetUARTClockFreq>
 8003236:	60b8      	str	r0, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00d      	beq.n	800325a <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d009      	beq.n	800325a <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 8003246:	2300      	movs	r3, #0
 8003248:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	699a      	ldr	r2, [r3, #24]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68b9      	ldr	r1, [r7, #8]
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff ff44 	bl	80030e2 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800325a:	7bfb      	ldrb	r3, [r7, #15]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	efff69f3 	.word	0xefff69f3
 8003268:	40011000 	.word	0x40011000
 800326c:	40004400 	.word	0x40004400
 8003270:	40004800 	.word	0x40004800
 8003274:	40004c00 	.word	0x40004c00
 8003278:	40005000 	.word	0x40005000
 800327c:	40011400 	.word	0x40011400
 8003280:	40007800 	.word	0x40007800
 8003284:	40007c00 	.word	0x40007c00

08003288 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003290:	4a04      	ldr	r2, [pc, #16]	; (80032a4 <LL_SetSystemCoreClock+0x1c>)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6013      	str	r3, [r2, #0]
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	20000008 	.word	0x20000008

080032a8 <__libc_init_array>:
 80032a8:	b570      	push	{r4, r5, r6, lr}
 80032aa:	4e0d      	ldr	r6, [pc, #52]	; (80032e0 <__libc_init_array+0x38>)
 80032ac:	4c0d      	ldr	r4, [pc, #52]	; (80032e4 <__libc_init_array+0x3c>)
 80032ae:	1ba4      	subs	r4, r4, r6
 80032b0:	10a4      	asrs	r4, r4, #2
 80032b2:	2500      	movs	r5, #0
 80032b4:	42a5      	cmp	r5, r4
 80032b6:	d109      	bne.n	80032cc <__libc_init_array+0x24>
 80032b8:	4e0b      	ldr	r6, [pc, #44]	; (80032e8 <__libc_init_array+0x40>)
 80032ba:	4c0c      	ldr	r4, [pc, #48]	; (80032ec <__libc_init_array+0x44>)
 80032bc:	f000 f818 	bl	80032f0 <_init>
 80032c0:	1ba4      	subs	r4, r4, r6
 80032c2:	10a4      	asrs	r4, r4, #2
 80032c4:	2500      	movs	r5, #0
 80032c6:	42a5      	cmp	r5, r4
 80032c8:	d105      	bne.n	80032d6 <__libc_init_array+0x2e>
 80032ca:	bd70      	pop	{r4, r5, r6, pc}
 80032cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032d0:	4798      	blx	r3
 80032d2:	3501      	adds	r5, #1
 80032d4:	e7ee      	b.n	80032b4 <__libc_init_array+0xc>
 80032d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032da:	4798      	blx	r3
 80032dc:	3501      	adds	r5, #1
 80032de:	e7f2      	b.n	80032c6 <__libc_init_array+0x1e>
 80032e0:	0800332c 	.word	0x0800332c
 80032e4:	0800332c 	.word	0x0800332c
 80032e8:	0800332c 	.word	0x0800332c
 80032ec:	08003330 	.word	0x08003330

080032f0 <_init>:
 80032f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f2:	bf00      	nop
 80032f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032f6:	bc08      	pop	{r3}
 80032f8:	469e      	mov	lr, r3
 80032fa:	4770      	bx	lr

080032fc <_fini>:
 80032fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fe:	bf00      	nop
 8003300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003302:	bc08      	pop	{r3}
 8003304:	469e      	mov	lr, r3
 8003306:	4770      	bx	lr
